
/Users/freymann/Dropbox/Electronics/_CODE/ParticleWorkbench/Test1/target/1.4.4/photon/Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000059b0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a59d0  080a59d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a59d8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a8  20000000  080a59dc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000af4  200000a8  200000a8  000400a8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a5a84  080a5a84  00035a84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a5aac  080a5aac  00035aac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000d5117  00000000  00000000  00035ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000136e7  00000000  00000000  0010abc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001706d  00000000  00000000  0011e2ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002528  00000000  00000000  0013531b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000039d8  00000000  00000000  00137843  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002a475  00000000  00000000  0013b21b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002d9c2  00000000  00000000  00165690  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000ab6c5  00000000  00000000  00193052  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c898  00000000  00000000  0023e718  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f004 ff65 	bl	80a4f00 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f004 ff6a 	bl	80a4f16 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a59dc 	.word	0x080a59dc
 80a0050:	200000a8 	.word	0x200000a8
 80a0054:	200000a8 	.word	0x200000a8
 80a0058:	20000b9c 	.word	0x20000b9c
 80a005c:	20000b9c 	.word	0x20000b9c

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f003 fb7b 	bl	80a375c <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a597c 	.word	0x080a597c
 80a0088:	080a59c4 	.word	0x080a59c4

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b866 	b.w	80a015c <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f9a9 	bl	80a03e8 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f003 bb21 	b.w	80a36e0 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f001 be0d 	b.w	80a1cbc <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 be13 	b.w	80a1ccc <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZN8DogLcdhwD1Ev>:

/**
 * A class for Dog text LCD's using the
 * SPI-feature of the controller.
 */
class DogLcdhw : public Print {
 80a00b6:	4770      	bx	lr

080a00b8 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
 80a00b8:	b510      	push	{r4, lr}
 80a00ba:	4604      	mov	r4, r0
 80a00bc:	3004      	adds	r0, #4
 80a00be:	f002 fcfd 	bl	80a2abc <_ZN6StringD1Ev>
 80a00c2:	4620      	mov	r0, r4
 80a00c4:	bd10      	pop	{r4, pc}

080a00c6 <_ZN14http_request_tD1Ev>:
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
 80a00c6:	b510      	push	{r4, lr}
 80a00c8:	4604      	mov	r4, r0
 80a00ca:	303c      	adds	r0, #60	; 0x3c
 80a00cc:	f002 fcf6 	bl	80a2abc <_ZN6StringD1Ev>
 80a00d0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a00d4:	f002 fcf2 	bl	80a2abc <_ZN6StringD1Ev>
 80a00d8:	4620      	mov	r0, r4
 80a00da:	f002 fcef 	bl	80a2abc <_ZN6StringD1Ev>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN8DogLcdhwD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	2154      	movs	r1, #84	; 0x54
 80a00e8:	f003 fc11 	bl	80a390e <_ZdlPvj>
 80a00ec:	4620      	mov	r0, r4
 80a00ee:	bd10      	pop	{r4, pc}

080a00f0 <_ZN8DogLcdhw5writeEh>:
     * is called whenever a character is to be printed to the
     * display.
     * @param c the character to be printed.
     * @return int number of characters written
     */
     virtual size_t write(uint8_t c) { writeChar(c); return 1; }
 80a00f0:	b508      	push	{r3, lr}
 80a00f2:	f001 f9f5 	bl	80a14e0 <_ZN8DogLcdhw9writeCharEh>
 80a00f6:	2001      	movs	r0, #1
 80a00f8:	bd08      	pop	{r3, pc}

080a00fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a00fa:	b510      	push	{r4, lr}
 80a00fc:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a00fe:	6803      	ldr	r3, [r0, #0]
 80a0100:	689b      	ldr	r3, [r3, #8]
 80a0102:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0104:	68a3      	ldr	r3, [r4, #8]
 80a0106:	3b01      	subs	r3, #1
 80a0108:	60a3      	str	r3, [r4, #8]
 80a010a:	b92b      	cbnz	r3, 80a0118 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.12+0x1e>
            _M_destroy();
 80a010c:	6823      	ldr	r3, [r4, #0]
 80a010e:	4620      	mov	r0, r4
        }
    }
 80a0110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a0114:	68db      	ldr	r3, [r3, #12]
 80a0116:	4718      	bx	r3
 80a0118:	bd10      	pop	{r4, pc}
	...

080a011c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a011c:	b510      	push	{r4, lr}
 80a011e:	4b06      	ldr	r3, [pc, #24]	; (80a0138 <_ZN9TCPClientD1Ev+0x1c>)
 80a0120:	4604      	mov	r4, r0
 80a0122:	6003      	str	r3, [r0, #0]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0124:	6980      	ldr	r0, [r0, #24]
 80a0126:	b128      	cbz	r0, 80a0134 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0128:	6843      	ldr	r3, [r0, #4]
 80a012a:	3b01      	subs	r3, #1
 80a012c:	6043      	str	r3, [r0, #4]
 80a012e:	b90b      	cbnz	r3, 80a0134 <_ZN9TCPClientD1Ev+0x18>
 80a0130:	f7ff ffe3 	bl	80a00fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.12>
 80a0134:	4620      	mov	r0, r4
 80a0136:	bd10      	pop	{r4, pc}
 80a0138:	080a56f8 	.word	0x080a56f8

080a013c <_ZN10HttpClientD1Ev>:
{
  int status;
  String body;
} http_response_t;

class HttpClient {
 80a013c:	b510      	push	{r4, lr}
 80a013e:	4604      	mov	r4, r0
 80a0140:	f7ff ffec 	bl	80a011c <_ZN9TCPClientD1Ev>
 80a0144:	4620      	mov	r0, r4
 80a0146:	bd10      	pop	{r4, pc}

080a0148 <_ZN9TCPClientD0Ev>:
 80a0148:	b510      	push	{r4, lr}
 80a014a:	4604      	mov	r4, r0
 80a014c:	f7ff ffe6 	bl	80a011c <_ZN9TCPClientD1Ev>
 80a0150:	4620      	mov	r0, r4
 80a0152:	211c      	movs	r1, #28
 80a0154:	f003 fbdb 	bl	80a390e <_ZdlPvj>
 80a0158:	4620      	mov	r0, r4
 80a015a:	bd10      	pop	{r4, pc}

080a015c <setup>:
// dmf 3.27.19
uint8_t chirpAddress = 0;
uint8_t chirpSoftVersion = 0;

// SETUP
void setup() {
 80a015c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // WiFi.setCredentials("BijvoetJaldiExt","9412441646");

    // setup our watchdog pin FIRST, since this powers-on peripherals!
    // Note: recovery from SLEEP_MODE_DEEP always passes through SETUP,
    // so this should work to turn everything back on.
    pinMode (sleepCanary, OUTPUT);
 80a015e:	4c73      	ldr	r4, [pc, #460]	; (80a032c <setup+0x1d0>)
 80a0160:	2101      	movs	r1, #1
 80a0162:	8820      	ldrh	r0, [r4, #0]
 80a0164:	f003 fb4a 	bl	80a37fc <pinMode>
    digitalWrite(sleepCanary, LOW);
 80a0168:	2100      	movs	r1, #0
 80a016a:	8820      	ldrh	r0, [r4, #0]
 80a016c:	f003 fb57 	bl	80a381e <digitalWrite>
    delay (500);
 80a0170:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0174:	f001 fdd2 	bl	80a1d1c <delay>

    // initialize i2C
    Wire.begin();
 80a0178:	f003 fb6a 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a017c:	f002 f91c 	bl	80a23b8 <_ZN7TwoWire5beginEv>

#ifdef DOTEST
    // initialize Serial
    Serial.begin(9600);
 80a0180:	f003 f980 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0184:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0188:	f003 f962 	bl	80a3450 <_ZN9USBSerial5beginEl>
#endif

    // find a delay here needed for good Wire/Serial behavior in setup()
    delay(1000);  // dmf 3.27.19 changed 500 to 1000
 80a018c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0190:	f001 fdc4 	bl	80a1d1c <delay>

#ifdef DOTEST
    isWireThere = Wire.isEnabled();
 80a0194:	f003 fb5c 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a0198:	f002 f930 	bl	80a23fc <_ZN7TwoWire9isEnabledEv>
 80a019c:	4c64      	ldr	r4, [pc, #400]	; (80a0330 <setup+0x1d4>)
 80a019e:	4d65      	ldr	r5, [pc, #404]	; (80a0334 <setup+0x1d8>)
 80a01a0:	7020      	strb	r0, [r4, #0]
    Serial.print("Wire isEnabled? (Should be 1 here): ");
 80a01a2:	f003 f96f 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a01a6:	4964      	ldr	r1, [pc, #400]	; (80a0338 <setup+0x1dc>)
 80a01a8:	f002 fa30 	bl	80a260c <_ZN5Print5printEPKc>
    Serial.println(isWireThere);
 80a01ac:	f003 f96a 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a01b0:	220a      	movs	r2, #10
 80a01b2:	7821      	ldrb	r1, [r4, #0]
 80a01b4:	f002 fab3 	bl	80a271e <_ZN5Print7printlnEii>
#endif

    // initialize the Chirp (writes a reset)
    chirp.begin();
 80a01b8:	4860      	ldr	r0, [pc, #384]	; (80a033c <setup+0x1e0>)
 80a01ba:	f000 ff79 	bl	80a10b0 <_ZN21I2CSoilMoistureSensor5beginEv>
    delay(500);
 80a01be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a01c2:	f001 fdab 	bl	80a1d1c <delay>
    if (!isSensorReturn) chirpIsThere = TRUE;
 80a01c6:	4b5e      	ldr	r3, [pc, #376]	; (80a0340 <setup+0x1e4>)
 80a01c8:	681a      	ldr	r2, [r3, #0]
 80a01ca:	461c      	mov	r4, r3
 80a01cc:	b90a      	cbnz	r2, 80a01d2 <setup+0x76>
 80a01ce:	2301      	movs	r3, #1
 80a01d0:	702b      	strb	r3, [r5, #0]

#ifdef DOTEST
    Serial.print("Chirp isSensorReturn: ");
 80a01d2:	f003 f957 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a01d6:	495b      	ldr	r1, [pc, #364]	; (80a0344 <setup+0x1e8>)
 80a01d8:	f002 fa18 	bl	80a260c <_ZN5Print5printEPKc>
    Serial.println(isSensorReturn);
 80a01dc:	f003 f952 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a01e0:	220a      	movs	r2, #10
 80a01e2:	6821      	ldr	r1, [r4, #0]
 80a01e4:	f002 fa9b 	bl	80a271e <_ZN5Print7printlnEii>
    Serial.print("Chirp chirpIsThere: ");
 80a01e8:	f003 f94c 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a01ec:	4956      	ldr	r1, [pc, #344]	; (80a0348 <setup+0x1ec>)
 80a01ee:	f002 fa0d 	bl	80a260c <_ZN5Print5printEPKc>
    Serial.println(chirpIsThere);
 80a01f2:	f003 f947 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a01f6:	7829      	ldrb	r1, [r5, #0]
 80a01f8:	220a      	movs	r2, #10
 80a01fa:	f002 fa90 	bl	80a271e <_ZN5Print7printlnEii>
#endif

    // dmf 3.27.19
    chirpAddress = chirp.getAddress();
 80a01fe:	484f      	ldr	r0, [pc, #316]	; (80a033c <setup+0x1e0>)
 80a0200:	f000 ff3a 	bl	80a1078 <_ZN21I2CSoilMoistureSensor10getAddressEv>
 80a0204:	4d51      	ldr	r5, [pc, #324]	; (80a034c <setup+0x1f0>)
    chirpSoftVersion = chirp.getVersion();
 80a0206:	4c52      	ldr	r4, [pc, #328]	; (80a0350 <setup+0x1f4>)
    Serial.print("Chirp chirpIsThere: ");
    Serial.println(chirpIsThere);
#endif

    // dmf 3.27.19
    chirpAddress = chirp.getAddress();
 80a0208:	7028      	strb	r0, [r5, #0]
    chirpSoftVersion = chirp.getVersion();
 80a020a:	484c      	ldr	r0, [pc, #304]	; (80a033c <setup+0x1e0>)
 80a020c:	f000 ffe0 	bl	80a11d0 <_ZN21I2CSoilMoistureSensor10getVersionEv>
 80a0210:	7020      	strb	r0, [r4, #0]
#ifdef DOTEST
    Serial.print("Chirp address: 0x");
 80a0212:	f003 f937 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0216:	494f      	ldr	r1, [pc, #316]	; (80a0354 <setup+0x1f8>)
 80a0218:	f002 f9f8 	bl	80a260c <_ZN5Print5printEPKc>
    if (chirpAddress<16) Serial.print("0");
 80a021c:	782b      	ldrb	r3, [r5, #0]
 80a021e:	2b0f      	cmp	r3, #15
 80a0220:	d804      	bhi.n	80a022c <setup+0xd0>
 80a0222:	f003 f92f 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0226:	494c      	ldr	r1, [pc, #304]	; (80a0358 <setup+0x1fc>)
 80a0228:	f002 f9f0 	bl	80a260c <_ZN5Print5printEPKc>
    Serial.println(chirpAddress,HEX);
 80a022c:	f003 f92a 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0230:	2210      	movs	r2, #16
 80a0232:	7829      	ldrb	r1, [r5, #0]
 80a0234:	f002 fa33 	bl	80a269e <_ZN5Print7printlnEhi>
    Serial.print("Chirp software Version (eg 0x26 is v2.6): 0x");
 80a0238:	f003 f924 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a023c:	4947      	ldr	r1, [pc, #284]	; (80a035c <setup+0x200>)
 80a023e:	f002 f9e5 	bl	80a260c <_ZN5Print5printEPKc>
    if (chirpSoftVersion<16) Serial.print("0");
 80a0242:	7823      	ldrb	r3, [r4, #0]
 80a0244:	2b0f      	cmp	r3, #15
 80a0246:	d804      	bhi.n	80a0252 <setup+0xf6>
 80a0248:	f003 f91c 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a024c:	4942      	ldr	r1, [pc, #264]	; (80a0358 <setup+0x1fc>)
 80a024e:	f002 f9dd 	bl	80a260c <_ZN5Print5printEPKc>
    Serial.println(chirpSoftVersion,HEX);
 80a0252:	f003 f917 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0256:	7821      	ldrb	r1, [r4, #0]
 80a0258:	2210      	movs	r2, #16
 80a025a:	f002 fa20 	bl	80a269e <_ZN5Print7printlnEhi>
#endif

    // initialize the DOGM display
    lcd.begin(DOG_LCDhw_M162, DOG_LCDhw_VCC_3V3, -1, -1);  // SPARK test configuration
 80a025e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0262:	9300      	str	r3, [sp, #0]
 80a0264:	2201      	movs	r2, #1
 80a0266:	2102      	movs	r1, #2
 80a0268:	483d      	ldr	r0, [pc, #244]	; (80a0360 <setup+0x204>)
 80a026a:	f001 f9f3 	bl	80a1654 <_ZN8DogLcdhw5beginEiiii>
    delay(500);
 80a026e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0272:	f001 fd53 	bl	80a1d1c <delay>

    // initialize the fuel gauge
    badReturn = batteryMonitor.reset();
 80a0276:	483b      	ldr	r0, [pc, #236]	; (80a0364 <setup+0x208>)
 80a0278:	f001 f843 	bl	80a1302 <_ZN8MAX170435resetEv>
 80a027c:	4b3a      	ldr	r3, [pc, #232]	; (80a0368 <setup+0x20c>)
 80a027e:	4d3b      	ldr	r5, [pc, #236]	; (80a036c <setup+0x210>)
 80a0280:	6018      	str	r0, [r3, #0]
 80a0282:	461c      	mov	r4, r3
    if (!badReturn) {
 80a0284:	b960      	cbnz	r0, 80a02a0 <setup+0x144>
      gaugeIsThere=TRUE;
 80a0286:	2301      	movs	r3, #1
      batteryMonitor.quickStart();
 80a0288:	4836      	ldr	r0, [pc, #216]	; (80a0364 <setup+0x208>)
    delay(500);

    // initialize the fuel gauge
    badReturn = batteryMonitor.reset();
    if (!badReturn) {
      gaugeIsThere=TRUE;
 80a028a:	702b      	strb	r3, [r5, #0]
      batteryMonitor.quickStart();
 80a028c:	f001 f834 	bl	80a12f8 <_ZN8MAX1704310quickStartEv>
      delay(500);
 80a0290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0294:	f001 fd42 	bl	80a1d1c <delay>
      batteryMonitor.setThreshold(20);
 80a0298:	2114      	movs	r1, #20
 80a029a:	4832      	ldr	r0, [pc, #200]	; (80a0364 <setup+0x208>)
 80a029c:	f001 f898 	bl	80a13d0 <_ZN8MAX1704312setThresholdEh>
    }
#ifdef DOTEST
    Serial.print("Battery badReturn ");
 80a02a0:	f003 f8f0 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a02a4:	4932      	ldr	r1, [pc, #200]	; (80a0370 <setup+0x214>)
 80a02a6:	f002 f9b1 	bl	80a260c <_ZN5Print5printEPKc>
    Serial.println(badReturn);
 80a02aa:	f003 f8eb 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a02ae:	220a      	movs	r2, #10
 80a02b0:	6821      	ldr	r1, [r4, #0]
 80a02b2:	f002 fa34 	bl	80a271e <_ZN5Print7printlnEii>
    Serial.print("Battery gaugeIsThere ");
 80a02b6:	f003 f8e5 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a02ba:	492e      	ldr	r1, [pc, #184]	; (80a0374 <setup+0x218>)
 80a02bc:	f002 f9a6 	bl	80a260c <_ZN5Print5printEPKc>
    // runningAvgWet.fillValue(0.0,10);
    // dmf 10.16.16 change this to the following -
    runningAvgWet.clear();

    // Setup for Ubidots
    request.hostname = "things.ubidots.com";
 80a02c0:	4c2d      	ldr	r4, [pc, #180]	; (80a0378 <setup+0x21c>)
    }
#ifdef DOTEST
    Serial.print("Battery badReturn ");
    Serial.println(badReturn);
    Serial.print("Battery gaugeIsThere ");
    Serial.println(gaugeIsThere);
 80a02c2:	f003 f8df 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a02c6:	220a      	movs	r2, #10
 80a02c8:	7829      	ldrb	r1, [r5, #0]
 80a02ca:	f002 fa28 	bl	80a271e <_ZN5Print7printlnEii>
    // initialize the running average to 0
    // NOTE: still, the code initializes funny so that garbage
    // is printed until the 10 values have been read.
    // runningAvgWet.fillValue(0.0,10);
    // dmf 10.16.16 change this to the following -
    runningAvgWet.clear();
 80a02ce:	482b      	ldr	r0, [pc, #172]	; (80a037c <setup+0x220>)
 80a02d0:	f000 ff8c 	bl	80a11ec <_ZN14RunningAverage5clearEv>

    // Setup for Ubidots
    request.hostname = "things.ubidots.com";
 80a02d4:	492a      	ldr	r1, [pc, #168]	; (80a0380 <setup+0x224>)
 80a02d6:	4620      	mov	r0, r4
 80a02d8:	f002 fc64 	bl	80a2ba4 <_ZN6StringaSEPKc>
    request.port = 80;
 80a02dc:	2350      	movs	r3, #80	; 0x50
 80a02de:	63a3      	str	r3, [r4, #56]	; 0x38
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a02e0:	2209      	movs	r2, #9
 80a02e2:	2300      	movs	r3, #0
 80a02e4:	4927      	ldr	r1, [pc, #156]	; (80a0384 <setup+0x228>)
 80a02e6:	4828      	ldr	r0, [pc, #160]	; (80a0388 <setup+0x22c>)
 80a02e8:	f001 fc70 	bl	80a1bcc <spark_variable>
 80a02ec:	2300      	movs	r3, #0
 80a02ee:	2209      	movs	r2, #9
 80a02f0:	4926      	ldr	r1, [pc, #152]	; (80a038c <setup+0x230>)
 80a02f2:	4827      	ldr	r0, [pc, #156]	; (80a0390 <setup+0x234>)
 80a02f4:	f001 fc6a 	bl	80a1bcc <spark_variable>
 80a02f8:	2300      	movs	r3, #0
 80a02fa:	2209      	movs	r2, #9
 80a02fc:	4925      	ldr	r1, [pc, #148]	; (80a0394 <setup+0x238>)
 80a02fe:	4826      	ldr	r0, [pc, #152]	; (80a0398 <setup+0x23c>)
 80a0300:	f001 fc64 	bl	80a1bcc <spark_variable>
 80a0304:	2300      	movs	r3, #0
 80a0306:	2209      	movs	r2, #9
 80a0308:	4924      	ldr	r1, [pc, #144]	; (80a039c <setup+0x240>)
 80a030a:	4825      	ldr	r0, [pc, #148]	; (80a03a0 <setup+0x244>)
 80a030c:	f001 fc5e 	bl	80a1bcc <spark_variable>
    Particle.variable("tempValue", &tempValue, DOUBLE);
    Particle.variable("cellvoltage", &cellVoltage, DOUBLE);
    Particle.variable("stateofcharg", &stateOfCharge, DOUBLE);

    // setup onboard LED to indicate activity
    pinMode (D7, OUTPUT);
 80a0310:	2101      	movs	r1, #1
 80a0312:	2007      	movs	r0, #7
 80a0314:	f003 fa72 	bl	80a37fc <pinMode>
    digitalWrite(D7, LOW);
 80a0318:	2100      	movs	r1, #0
 80a031a:	2007      	movs	r0, #7
 80a031c:	f003 fa7f 	bl	80a381e <digitalWrite>

    // no cursor needed
    lcd.noCursor();
 80a0320:	480f      	ldr	r0, [pc, #60]	; (80a0360 <setup+0x204>)

}
 80a0322:	b003      	add	sp, #12
 80a0324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    // setup onboard LED to indicate activity
    pinMode (D7, OUTPUT);
    digitalWrite(D7, LOW);

    // no cursor needed
    lcd.noCursor();
 80a0328:	f001 b909 	b.w	80a153e <_ZN8DogLcdhw8noCursorEv>
 80a032c:	20000014 	.word	0x20000014
 80a0330:	20000570 	.word	0x20000570
 80a0334:	20000581 	.word	0x20000581
 80a0338:	080a514c 	.word	0x080a514c
 80a033c:	200005f0 	.word	0x200005f0
 80a0340:	20000610 	.word	0x20000610
 80a0344:	080a5171 	.word	0x080a5171
 80a0348:	080a5188 	.word	0x080a5188
 80a034c:	200005e0 	.word	0x200005e0
 80a0350:	20000102 	.word	0x20000102
 80a0354:	080a519d 	.word	0x080a519d
 80a0358:	080a51af 	.word	0x080a51af
 80a035c:	080a51b1 	.word	0x080a51b1
 80a0360:	200000ac 	.word	0x200000ac
 80a0364:	20000150 	.word	0x20000150
 80a0368:	20000574 	.word	0x20000574
 80a036c:	20000583 	.word	0x20000583
 80a0370:	080a51de 	.word	0x080a51de
 80a0374:	080a51f1 	.word	0x080a51f1
 80a0378:	20000104 	.word	0x20000104
 80a037c:	20000598 	.word	0x20000598
 80a0380:	080a5207 	.word	0x080a5207
 80a0384:	20000588 	.word	0x20000588
 80a0388:	080a521a 	.word	0x080a521a
 80a038c:	20000578 	.word	0x20000578
 80a0390:	080a5225 	.word	0x080a5225
 80a0394:	200005b8 	.word	0x200005b8
 80a0398:	080a522f 	.word	0x080a522f
 80a039c:	200005b0 	.word	0x200005b0
 80a03a0:	080a523b 	.word	0x080a523b

080a03a4 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>:
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
 80a03a4:	b570      	push	{r4, r5, r6, lr}
 80a03a6:	4606      	mov	r6, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a03a8:	2000      	movs	r0, #0
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
 80a03aa:	460c      	mov	r4, r1
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a03ac:	f001 fbea 	bl	80a1b84 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
 80a03b0:	b908      	cbnz	r0, 80a03b6 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x12>
                    return false;
                }
                ContextT::processApplicationEvents();
            }
        }
        return false;
 80a03b2:	2000      	movs	r0, #0
 80a03b4:	bd70      	pop	{r4, r5, r6, pc}
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
 80a03b6:	2c00      	cmp	r4, #0
 80a03b8:	dd03      	ble.n	80a03c2 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x1e>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a03ba:	f001 fa39 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
 80a03be:	4605      	mov	r5, r0
 80a03c0:	e000      	b.n	80a03c4 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>
 80a03c2:	2500      	movs	r5, #0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a03c4:	7873      	ldrb	r3, [r6, #1]
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 80a03c6:	b93b      	cbnz	r3, 80a03d8 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x34>
                    return true;
                }
                if (timeout > 0 && millis() - t >= (system_tick_t)timeout) {
 80a03c8:	2c00      	cmp	r4, #0
 80a03ca:	dd07      	ble.n	80a03dc <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
 80a03cc:	f001 fa30 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
 80a03d0:	1b40      	subs	r0, r0, r5
 80a03d2:	42a0      	cmp	r0, r4
 80a03d4:	d302      	bcc.n	80a03dc <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
 80a03d6:	e7ec      	b.n	80a03b2 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0xe>
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
                    return true;
 80a03d8:	2001      	movs	r0, #1
 80a03da:	bd70      	pop	{r4, r5, r6, pc}

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
 80a03dc:	f001 fbfe 	bl	80a1bdc <spark_process>
 80a03e0:	e7f0      	b.n	80a03c4 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>
 80a03e2:	0000      	movs	r0, r0
 80a03e4:	0000      	movs	r0, r0
	...

080a03e8 <loop>:

}

// LOOP
void loop() {
 80a03e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool newValue = FALSE;

/* MAKE READINGS */

    // read capacitance (i.e. humidity) register
    c = chirp.getCapacitance();
 80a03ec:	489e      	ldr	r0, [pc, #632]	; (80a0668 <loop+0x280>)
    lcd.noCursor();

}

// LOOP
void loop() {
 80a03ee:	b08b      	sub	sp, #44	; 0x2c
    bool newValue = FALSE;

/* MAKE READINGS */

    // read capacitance (i.e. humidity) register
    c = chirp.getCapacitance();
 80a03f0:	f000 fe94 	bl	80a111c <_ZN21I2CSoilMoistureSensor14getCapacitanceEv>
 80a03f4:	4604      	mov	r4, r0
#ifdef DOTEST
    Serial.println(" ");
 80a03f6:	f003 f845 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a03fa:	499c      	ldr	r1, [pc, #624]	; (80a066c <loop+0x284>)
 80a03fc:	f002 f919 	bl	80a2632 <_ZN5Print7printlnEPKc>
    Serial.print("capacitance ");
 80a0400:	f003 f840 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0404:	499a      	ldr	r1, [pc, #616]	; (80a0670 <loop+0x288>)
 80a0406:	f002 f901 	bl	80a260c <_ZN5Print5printEPKc>
    Serial.println(c);
 80a040a:	f003 f83b 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a040e:	220a      	movs	r2, #10
 80a0410:	4621      	mov	r1, r4
 80a0412:	f002 f94e 	bl	80a26b2 <_ZN5Print7printlnEji>
#endif
    capacitance = c;

    // read temperature register
    t = chirp.getTemperature();
 80a0416:	4894      	ldr	r0, [pc, #592]	; (80a0668 <loop+0x280>)
 80a0418:	f000 feb0 	bl	80a117c <_ZN21I2CSoilMoistureSensor14getTemperatureEv>
 80a041c:	4682      	mov	sl, r0
#ifdef DOTEST
    Serial.print("temperature ");
 80a041e:	f003 f831 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0422:	4994      	ldr	r1, [pc, #592]	; (80a0674 <loop+0x28c>)
 80a0424:	f002 f8f2 	bl	80a260c <_ZN5Print5printEPKc>
    Serial.println(t);
 80a0428:	f003 f82c 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a042c:	220a      	movs	r2, #10
 80a042e:	4651      	mov	r1, sl
 80a0430:	f002 f93f 	bl	80a26b2 <_ZN5Print7printlnEji>
//  Serial.print("lightlevel ");
//  Serial.println(l);
//#endif
// lightlevel = l;

    if (gaugeIsThere) {
 80a0434:	4b90      	ldr	r3, [pc, #576]	; (80a0678 <loop+0x290>)
 80a0436:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 80a06dc <loop+0x2f4>
 80a043a:	781b      	ldrb	r3, [r3, #0]
 80a043c:	4f8f      	ldr	r7, [pc, #572]	; (80a067c <loop+0x294>)
 80a043e:	4d90      	ldr	r5, [pc, #576]	; (80a0680 <loop+0x298>)
 80a0440:	b1ab      	cbz	r3, 80a046e <loop+0x86>
      // read the battery voltage
      cellVoltage = batteryMonitor.getVoltage();
 80a0442:	4890      	ldr	r0, [pc, #576]	; (80a0684 <loop+0x29c>)
 80a0444:	f000 ff9c 	bl	80a1380 <_ZN8MAX1704310getVoltageEv>
 80a0448:	f003 fd9a 	bl	80a3f80 <__aeabi_f2d>
 80a044c:	e9c8 0100 	strd	r0, r1, [r8]

      // read the state of charge
      stateOfCharge = batteryMonitor.getSOC();
 80a0450:	488c      	ldr	r0, [pc, #560]	; (80a0684 <loop+0x29c>)
 80a0452:	f000 ffa3 	bl	80a139c <_ZN8MAX170436getSOCEv>
 80a0456:	f003 fd93 	bl	80a3f80 <__aeabi_f2d>
 80a045a:	e9c7 0100 	strd	r0, r1, [r7]

      // check for an alert
      inAlert = batteryMonitor.getAlert();
 80a045e:	2100      	movs	r1, #0
 80a0460:	4888      	ldr	r0, [pc, #544]	; (80a0684 <loop+0x29c>)
 80a0462:	f000 ffcb 	bl	80a13fc <_ZN8MAX170438getAlertEb>
 80a0466:	3000      	adds	r0, #0
 80a0468:	bf18      	it	ne
 80a046a:	2001      	movne	r0, #1
 80a046c:	7028      	strb	r0, [r5, #0]
    }

#ifdef DOTEST
    Serial.print("battery voltage ");
 80a046e:	f003 f809 	bl	80a3484 <_Z16_fetch_usbserialv>
    Serial.println(cellVoltage);
 80a0472:	2602      	movs	r6, #2
      // check for an alert
      inAlert = batteryMonitor.getAlert();
    }

#ifdef DOTEST
    Serial.print("battery voltage ");
 80a0474:	4984      	ldr	r1, [pc, #528]	; (80a0688 <loop+0x2a0>)
 80a0476:	f002 f8c9 	bl	80a260c <_ZN5Print5printEPKc>
    Serial.println(cellVoltage);
 80a047a:	f003 f803 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a047e:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a0482:	9600      	str	r6, [sp, #0]
 80a0484:	f002 fa09 	bl	80a289a <_ZN5Print7printlnEdi>
    Serial.print("state of charge ");
 80a0488:	f002 fffc 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a048c:	497f      	ldr	r1, [pc, #508]	; (80a068c <loop+0x2a4>)
 80a048e:	f002 f8bd 	bl	80a260c <_ZN5Print5printEPKc>
    Serial.println(stateOfCharge);
 80a0492:	f002 fff7 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0496:	9600      	str	r6, [sp, #0]
 80a0498:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a049c:	f002 f9fd 	bl	80a289a <_ZN5Print7printlnEdi>
    Serial.print("alert ");
 80a04a0:	f002 fff0 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a04a4:	497a      	ldr	r1, [pc, #488]	; (80a0690 <loop+0x2a8>)
 80a04a6:	f002 f8b1 	bl	80a260c <_ZN5Print5printEPKc>
    if (inAlert) Serial.println("YES");
 80a04aa:	782b      	ldrb	r3, [r5, #0]
 80a04ac:	b11b      	cbz	r3, 80a04b6 <loop+0xce>
 80a04ae:	f002 ffe9 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a04b2:	4978      	ldr	r1, [pc, #480]	; (80a0694 <loop+0x2ac>)
 80a04b4:	e002      	b.n	80a04bc <loop+0xd4>
    else Serial.println("NO");
 80a04b6:	f002 ffe5 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a04ba:	4977      	ldr	r1, [pc, #476]	; (80a0698 <loop+0x2b0>)
 80a04bc:	f002 f8b9 	bl	80a2632 <_ZN5Print7printlnEPKc>
#endif

/* PROCESS MEASUREMENTS */

    // simple interpolation based on capacitance = 208 DRY and = 495 IN WATER
    howWet = ((float) capacitance - DRY) / (WET - DRY);
 80a04c0:	4620      	mov	r0, r4
 80a04c2:	f004 f9b3 	bl	80a482c <__aeabi_i2f>
 80a04c6:	4975      	ldr	r1, [pc, #468]	; (80a069c <loop+0x2b4>)
 80a04c8:	f004 f8fa 	bl	80a46c0 <__aeabi_fsub>
 80a04cc:	4974      	ldr	r1, [pc, #464]	; (80a06a0 <loop+0x2b8>)
 80a04ce:	f004 fab5 	bl	80a4a3c <__aeabi_fdiv>
 80a04d2:	f003 fd55 	bl	80a3f80 <__aeabi_f2d>
 80a04d6:	460d      	mov	r5, r1
 80a04d8:	4604      	mov	r4, r0
#ifdef DOTEST
    Serial.println(" ");
 80a04da:	f002 ffd3 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a04de:	4963      	ldr	r1, [pc, #396]	; (80a066c <loop+0x284>)
 80a04e0:	f002 f8a7 	bl	80a2632 <_ZN5Print7printlnEPKc>
    Serial.print("howWet ");
 80a04e4:	f002 ffce 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a04e8:	496e      	ldr	r1, [pc, #440]	; (80a06a4 <loop+0x2bc>)
 80a04ea:	f002 f88f 	bl	80a260c <_ZN5Print5printEPKc>
    Serial.println(howWet, 2);
 80a04ee:	f002 ffc9 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a04f2:	2302      	movs	r3, #2
 80a04f4:	9300      	str	r3, [sp, #0]
 80a04f6:	4622      	mov	r2, r4
 80a04f8:	462b      	mov	r3, r5
 80a04fa:	f002 f9ce 	bl	80a289a <_ZN5Print7printlnEdi>
#endif

    if (howWet < 0) howWet = 0;
 80a04fe:	2200      	movs	r2, #0
 80a0500:	2300      	movs	r3, #0
 80a0502:	4620      	mov	r0, r4
 80a0504:	4629      	mov	r1, r5
 80a0506:	f004 f801 	bl	80a450c <__aeabi_dcmplt>
 80a050a:	b948      	cbnz	r0, 80a0520 <loop+0x138>
    if (howWet > 1) howWet = 1;
 80a050c:	2200      	movs	r2, #0
 80a050e:	4b66      	ldr	r3, [pc, #408]	; (80a06a8 <loop+0x2c0>)
 80a0510:	4620      	mov	r0, r4
 80a0512:	4629      	mov	r1, r5
 80a0514:	f004 f818 	bl	80a4548 <__aeabi_dcmpgt>
 80a0518:	b120      	cbz	r0, 80a0524 <loop+0x13c>
 80a051a:	2400      	movs	r4, #0
 80a051c:	4d62      	ldr	r5, [pc, #392]	; (80a06a8 <loop+0x2c0>)
 80a051e:	e001      	b.n	80a0524 <loop+0x13c>
    Serial.println(" ");
    Serial.print("howWet ");
    Serial.println(howWet, 2);
#endif

    if (howWet < 0) howWet = 0;
 80a0520:	2400      	movs	r4, #0
 80a0522:	2500      	movs	r5, #0
    if (howWet > 1) howWet = 1;

    runningAvgWet.addValue(howWet);
 80a0524:	4622      	mov	r2, r4
 80a0526:	462b      	mov	r3, r5
 80a0528:	4860      	ldr	r0, [pc, #384]	; (80a06ac <loop+0x2c4>)
 80a052a:	f000 fe82 	bl	80a1232 <_ZN14RunningAverage8addValueEd>

    // get the average, set the Spark variable, limit significant digits and convert to %
    avgWet = runningAvgWet.getAverage();
 80a052e:	485f      	ldr	r0, [pc, #380]	; (80a06ac <loop+0x2c4>)
 80a0530:	f000 feaf 	bl	80a1292 <_ZN14RunningAverage10getAverageEv>
    waterValue = floor((avgWet*1000)+0.5)/10;
 80a0534:	2200      	movs	r2, #0
 80a0536:	4b5e      	ldr	r3, [pc, #376]	; (80a06b0 <loop+0x2c8>)
 80a0538:	f003 fd76 	bl	80a4028 <__aeabi_dmul>
 80a053c:	2200      	movs	r2, #0
 80a053e:	4b5d      	ldr	r3, [pc, #372]	; (80a06b4 <loop+0x2cc>)
 80a0540:	f003 fbc0 	bl	80a3cc4 <__adddf3>
 80a0544:	f003 fb30 	bl	80a3ba8 <floor>
 80a0548:	2200      	movs	r2, #0
 80a054a:	4b5b      	ldr	r3, [pc, #364]	; (80a06b8 <loop+0x2d0>)
 80a054c:	f003 fe96 	bl	80a427c <__aeabi_ddiv>
 80a0550:	4604      	mov	r4, r0
 80a0552:	460d      	mov	r5, r1
 80a0554:	4e59      	ldr	r6, [pc, #356]	; (80a06bc <loop+0x2d4>)

    if (waterValue != waterValueLast) {
 80a0556:	f8df 9188 	ldr.w	r9, [pc, #392]	; 80a06e0 <loop+0x2f8>

    runningAvgWet.addValue(howWet);

    // get the average, set the Spark variable, limit significant digits and convert to %
    avgWet = runningAvgWet.getAverage();
    waterValue = floor((avgWet*1000)+0.5)/10;
 80a055a:	e9c6 4500 	strd	r4, r5, [r6]

    if (waterValue != waterValueLast) {
 80a055e:	e9d9 2300 	ldrd	r2, r3, [r9]
 80a0562:	f003 ffc9 	bl	80a44f8 <__aeabi_dcmpeq>
 80a0566:	b920      	cbnz	r0, 80a0572 <loop+0x18a>
      newValue = TRUE;
      waterValueLast = waterValue;
 80a0568:	e9c9 4500 	strd	r4, r5, [r9]
    // get the average, set the Spark variable, limit significant digits and convert to %
    avgWet = runningAvgWet.getAverage();
    waterValue = floor((avgWet*1000)+0.5)/10;

    if (waterValue != waterValueLast) {
      newValue = TRUE;
 80a056c:	f04f 0901 	mov.w	r9, #1
 80a0570:	e001      	b.n	80a0576 <loop+0x18e>
    int temperature;
    int lightlevel;
    double howWet;
    double avgWet;
    double howHot;
    bool newValue = FALSE;
 80a0572:	f04f 0900 	mov.w	r9, #0
    if (stdTempVal) {               // flag based on existance of stdTempVal
      // simple interpolation based on 79degF = 318 and  1degC = 1 increment
      // NOTE: This depends on the particular probe!!
      // howHot = 79.0 + (temperature - VAL)*CtoF;
      // dmf 10.16.16 generalized this -
      howHot = stdTemp + (temperature - stdTempVal)*CtoF;
 80a0576:	f46f 7397 	mvn.w	r3, #302	; 0x12e
 80a057a:	eb0a 0003 	add.w	r0, sl, r3
 80a057e:	f003 fced 	bl	80a3f5c <__aeabi_i2d>
 80a0582:	a335      	add	r3, pc, #212	; (adr r3, 80a0658 <loop+0x270>)
 80a0584:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0588:	f003 fd4e 	bl	80a4028 <__aeabi_dmul>
 80a058c:	2200      	movs	r2, #0
 80a058e:	4b4c      	ldr	r3, [pc, #304]	; (80a06c0 <loop+0x2d8>)
 80a0590:	f003 fb98 	bl	80a3cc4 <__adddf3>
 80a0594:	460d      	mov	r5, r1
 80a0596:	4604      	mov	r4, r0
      // temperature value is direct read in 10ths of degree C
      howHot = stdTemp + (temperature/10)*CtoF;
    }

#ifdef DOTEST
    Serial.println(" ");
 80a0598:	f002 ff74 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a059c:	4933      	ldr	r1, [pc, #204]	; (80a066c <loop+0x284>)
 80a059e:	f002 f848 	bl	80a2632 <_ZN5Print7printlnEPKc>
    Serial.print("howHot ");
 80a05a2:	f002 ff6f 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a05a6:	4947      	ldr	r1, [pc, #284]	; (80a06c4 <loop+0x2dc>)
 80a05a8:	f002 f830 	bl	80a260c <_ZN5Print5printEPKc>
    Serial.println(howHot, 1);
 80a05ac:	f002 ff6a 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a05b0:	2301      	movs	r3, #1
 80a05b2:	4622      	mov	r2, r4
 80a05b4:	9300      	str	r3, [sp, #0]
 80a05b6:	462b      	mov	r3, r5
 80a05b8:	f002 f96f 	bl	80a289a <_ZN5Print7printlnEdi>
#endif

    // limit significant digits
    howHot = floor(howHot*10+0.5)/10;
 80a05bc:	2200      	movs	r2, #0
 80a05be:	4b3e      	ldr	r3, [pc, #248]	; (80a06b8 <loop+0x2d0>)
 80a05c0:	4620      	mov	r0, r4
 80a05c2:	4629      	mov	r1, r5
 80a05c4:	f003 fd30 	bl	80a4028 <__aeabi_dmul>
 80a05c8:	2200      	movs	r2, #0
 80a05ca:	4b3a      	ldr	r3, [pc, #232]	; (80a06b4 <loop+0x2cc>)
 80a05cc:	f003 fb7a 	bl	80a3cc4 <__adddf3>
 80a05d0:	f003 faea 	bl	80a3ba8 <floor>
 80a05d4:	2200      	movs	r2, #0
 80a05d6:	4b38      	ldr	r3, [pc, #224]	; (80a06b8 <loop+0x2d0>)
 80a05d8:	f003 fe50 	bl	80a427c <__aeabi_ddiv>

    // sanity check temperature value (disconnected sensor, etc)
    if ((howHot < lowHotLimit) || (howHot > highHotLimit)) {
 80a05dc:	4b3a      	ldr	r3, [pc, #232]	; (80a06c8 <loop+0x2e0>)
    Serial.print("howHot ");
    Serial.println(howHot, 1);
#endif

    // limit significant digits
    howHot = floor(howHot*10+0.5)/10;
 80a05de:	4604      	mov	r4, r0

    // sanity check temperature value (disconnected sensor, etc)
    if ((howHot < lowHotLimit) || (howHot > highHotLimit)) {
 80a05e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    Serial.print("howHot ");
    Serial.println(howHot, 1);
#endif

    // limit significant digits
    howHot = floor(howHot*10+0.5)/10;
 80a05e4:	460d      	mov	r5, r1

    // sanity check temperature value (disconnected sensor, etc)
    if ((howHot < lowHotLimit) || (howHot > highHotLimit)) {
 80a05e6:	f003 ff91 	bl	80a450c <__aeabi_dcmplt>
 80a05ea:	b938      	cbnz	r0, 80a05fc <loop+0x214>
 80a05ec:	4b37      	ldr	r3, [pc, #220]	; (80a06cc <loop+0x2e4>)
 80a05ee:	4620      	mov	r0, r4
 80a05f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a05f4:	4629      	mov	r1, r5
 80a05f6:	f003 ffa7 	bl	80a4548 <__aeabi_dcmpgt>
 80a05fa:	b110      	cbz	r0, 80a0602 <loop+0x21a>
      howHot = 98.6;         // dummy value
 80a05fc:	a518      	add	r5, pc, #96	; (adr r5, 80a0660 <loop+0x278>)
 80a05fe:	e9d5 4500 	ldrd	r4, r5, [r5]
    }

    // set the Spark variable
    tempValue = howHot;
 80a0602:	4b33      	ldr	r3, [pc, #204]	; (80a06d0 <loop+0x2e8>)

    if (tempValue != tempValueLast) {
 80a0604:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80a06e4 <loop+0x2fc>
    if ((howHot < lowHotLimit) || (howHot > highHotLimit)) {
      howHot = 98.6;         // dummy value
    }

    // set the Spark variable
    tempValue = howHot;
 80a0608:	e9c3 4500 	strd	r4, r5, [r3]

    if (tempValue != tempValueLast) {
 80a060c:	e9da 2300 	ldrd	r2, r3, [sl]
 80a0610:	4620      	mov	r0, r4
 80a0612:	4629      	mov	r1, r5
 80a0614:	f003 ff70 	bl	80a44f8 <__aeabi_dcmpeq>
 80a0618:	b910      	cbnz	r0, 80a0620 <loop+0x238>
      newValue = TRUE;
      tempValueLast = tempValue;
 80a061a:	e9ca 4500 	strd	r4, r5, [sl]
 80a061e:	e003      	b.n	80a0628 <loop+0x240>
    }

/* DISPLAY MEASUREMENTS */

    if (newValue) {   // update display with new values
 80a0620:	f1b9 0f00 	cmp.w	r9, #0
 80a0624:	f000 8094 	beq.w	80a0750 <loop+0x368>

      // clear the DOGM display
      lcd.clear();
 80a0628:	482a      	ldr	r0, [pc, #168]	; (80a06d4 <loop+0x2ec>)
 80a062a:	f000 ff76 	bl	80a151a <_ZN8DogLcdhw5clearEv>

      // report the capacitance humidity reading to the DOGM display
      lcd.setCursor(0,0);
 80a062e:	2200      	movs	r2, #0
 80a0630:	4611      	mov	r1, r2
 80a0632:	4828      	ldr	r0, [pc, #160]	; (80a06d4 <loop+0x2ec>)
 80a0634:	f001 f8ce 	bl	80a17d4 <_ZN8DogLcdhw9setCursorEii>
      lcd.print("howWet");
 80a0638:	4927      	ldr	r1, [pc, #156]	; (80a06d8 <loop+0x2f0>)
 80a063a:	4826      	ldr	r0, [pc, #152]	; (80a06d4 <loop+0x2ec>)
 80a063c:	f001 ffe6 	bl	80a260c <_ZN5Print5printEPKc>
      if (waterValue<10){
 80a0640:	e9d6 0100 	ldrd	r0, r1, [r6]
 80a0644:	2200      	movs	r2, #0
 80a0646:	4b1c      	ldr	r3, [pc, #112]	; (80a06b8 <loop+0x2d0>)
 80a0648:	f003 ff60 	bl	80a450c <__aeabi_dcmplt>
 80a064c:	4602      	mov	r2, r0
 80a064e:	2800      	cmp	r0, #0
 80a0650:	d04a      	beq.n	80a06e8 <loop+0x300>
          lcd.setCursor(9,0);
 80a0652:	2200      	movs	r2, #0
 80a0654:	2109      	movs	r1, #9
 80a0656:	e048      	b.n	80a06ea <loop+0x302>
 80a0658:	cccccccd 	.word	0xcccccccd
 80a065c:	3ffccccc 	.word	0x3ffccccc
 80a0660:	66666666 	.word	0x66666666
 80a0664:	4058a666 	.word	0x4058a666
 80a0668:	200005f0 	.word	0x200005f0
 80a066c:	080a5620 	.word	0x080a5620
 80a0670:	080a5248 	.word	0x080a5248
 80a0674:	080a5255 	.word	0x080a5255
 80a0678:	20000583 	.word	0x20000583
 80a067c:	200005b0 	.word	0x200005b0
 80a0680:	20000101 	.word	0x20000101
 80a0684:	20000150 	.word	0x20000150
 80a0688:	080a5262 	.word	0x080a5262
 80a068c:	080a5273 	.word	0x080a5273
 80a0690:	080a5284 	.word	0x080a5284
 80a0694:	080a528b 	.word	0x080a528b
 80a0698:	080a528f 	.word	0x080a528f
 80a069c:	434e0000 	.word	0x434e0000
 80a06a0:	43870000 	.word	0x43870000
 80a06a4:	080a5292 	.word	0x080a5292
 80a06a8:	3ff00000 	.word	0x3ff00000
 80a06ac:	20000598 	.word	0x20000598
 80a06b0:	408f4000 	.word	0x408f4000
 80a06b4:	3fe00000 	.word	0x3fe00000
 80a06b8:	40240000 	.word	0x40240000
 80a06bc:	20000588 	.word	0x20000588
 80a06c0:	40528000 	.word	0x40528000
 80a06c4:	080a529a 	.word	0x080a529a
 80a06c8:	20000000 	.word	0x20000000
 80a06cc:	20000008 	.word	0x20000008
 80a06d0:	20000578 	.word	0x20000578
 80a06d4:	200000ac 	.word	0x200000ac
 80a06d8:	080a52a2 	.word	0x080a52a2
 80a06dc:	200005b8 	.word	0x200005b8
 80a06e0:	200005d8 	.word	0x200005d8
 80a06e4:	200005e8 	.word	0x200005e8
      } else {
          lcd.setCursor(8,0);
 80a06e8:	2108      	movs	r1, #8
        }
      lcd.print(waterValue,1);
 80a06ea:	f04f 0901 	mov.w	r9, #1
      lcd.setCursor(0,0);
      lcd.print("howWet");
      if (waterValue<10){
          lcd.setCursor(9,0);
      } else {
          lcd.setCursor(8,0);
 80a06ee:	48bb      	ldr	r0, [pc, #748]	; (80a09dc <loop+0x5f4>)
 80a06f0:	f001 f870 	bl	80a17d4 <_ZN8DogLcdhw9setCursorEii>
        }
      lcd.print(waterValue,1);
 80a06f4:	f8cd 9000 	str.w	r9, [sp]
 80a06f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a06fc:	48b7      	ldr	r0, [pc, #732]	; (80a09dc <loop+0x5f4>)
 80a06fe:	f002 f8c7 	bl	80a2890 <_ZN5Print5printEdi>
      lcd.setCursor(12,0);
 80a0702:	2200      	movs	r2, #0
 80a0704:	210c      	movs	r1, #12
 80a0706:	48b5      	ldr	r0, [pc, #724]	; (80a09dc <loop+0x5f4>)
 80a0708:	f001 f864 	bl	80a17d4 <_ZN8DogLcdhw9setCursorEii>
      lcd.print("%");
 80a070c:	49b4      	ldr	r1, [pc, #720]	; (80a09e0 <loop+0x5f8>)
 80a070e:	48b3      	ldr	r0, [pc, #716]	; (80a09dc <loop+0x5f4>)
 80a0710:	f001 ff7c 	bl	80a260c <_ZN5Print5printEPKc>

      // report the temperature reading to the DOGM display
      lcd.setCursor(0,1);
 80a0714:	464a      	mov	r2, r9
 80a0716:	2100      	movs	r1, #0
 80a0718:	48b0      	ldr	r0, [pc, #704]	; (80a09dc <loop+0x5f4>)
 80a071a:	f001 f85b 	bl	80a17d4 <_ZN8DogLcdhw9setCursorEii>
      lcd.print("howHot");
 80a071e:	49b1      	ldr	r1, [pc, #708]	; (80a09e4 <loop+0x5fc>)
 80a0720:	48ae      	ldr	r0, [pc, #696]	; (80a09dc <loop+0x5f4>)
 80a0722:	f001 ff73 	bl	80a260c <_ZN5Print5printEPKc>
      lcd.setCursor(8,1);
 80a0726:	2108      	movs	r1, #8
 80a0728:	464a      	mov	r2, r9
 80a072a:	48ac      	ldr	r0, [pc, #688]	; (80a09dc <loop+0x5f4>)
 80a072c:	f001 f852 	bl	80a17d4 <_ZN8DogLcdhw9setCursorEii>
      lcd.print(howHot,1);
 80a0730:	4622      	mov	r2, r4
 80a0732:	462b      	mov	r3, r5
 80a0734:	f8cd 9000 	str.w	r9, [sp]
 80a0738:	48a8      	ldr	r0, [pc, #672]	; (80a09dc <loop+0x5f4>)
 80a073a:	f002 f8a9 	bl	80a2890 <_ZN5Print5printEdi>
      lcd.setCursor(12,1);
 80a073e:	210c      	movs	r1, #12
 80a0740:	48a6      	ldr	r0, [pc, #664]	; (80a09dc <loop+0x5f4>)
 80a0742:	464a      	mov	r2, r9
 80a0744:	f001 f846 	bl	80a17d4 <_ZN8DogLcdhw9setCursorEii>
      lcd.print(char(223));
 80a0748:	21df      	movs	r1, #223	; 0xdf
 80a074a:	48a4      	ldr	r0, [pc, #656]	; (80a09dc <loop+0x5f4>)
 80a074c:	f001 ff62 	bl	80a2614 <_ZN5Print5printEc>

    }

#ifdef DOTEST
    Serial.print("timeElapsed ");
 80a0750:	f002 fe98 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0754:	49a4      	ldr	r1, [pc, #656]	; (80a09e8 <loop+0x600>)
 80a0756:	f001 ff59 	bl	80a260c <_ZN5Print5printEPKc>
    Serial.println(timeElapsed);
 80a075a:	f002 fe93 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a075e:	4682      	mov	sl, r0
 80a0760:	f001 f866 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
 80a0764:	f8df 92e8 	ldr.w	r9, [pc, #744]	; 80a0a50 <loop+0x668>
 80a0768:	220a      	movs	r2, #10
 80a076a:	f8d9 1000 	ldr.w	r1, [r9]
 80a076e:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 80a0a54 <loop+0x66c>
 80a0772:	1a41      	subs	r1, r0, r1
 80a0774:	4650      	mov	r0, sl
    Serial.print("elapsedToSendA ");
    Serial.println(elapsedToSendA);
 80a0776:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 80a0a58 <loop+0x670>

    }

#ifdef DOTEST
    Serial.print("timeElapsed ");
    Serial.println(timeElapsed);
 80a077a:	f001 ffa4 	bl	80a26c6 <_ZN5Print7printlnEmi>
    Serial.print("elapsedToSendA ");
 80a077e:	f002 fe81 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0782:	499a      	ldr	r1, [pc, #616]	; (80a09ec <loop+0x604>)
 80a0784:	f001 ff42 	bl	80a260c <_ZN5Print5printEPKc>
    Serial.println(elapsedToSendA);
 80a0788:	f002 fe7c 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a078c:	f8da 1000 	ldr.w	r1, [sl]
 80a0790:	220a      	movs	r2, #10
 80a0792:	f001 ff8e 	bl	80a26b2 <_ZN5Print7printlnEji>
 80a0796:	f001 f84b 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>

/* UPLOAD MEASUREMENTS */

    // if time_elapsed and doHTTP then upload reading A
    // otherwise if less_time_elapsed and doHTTP then upload reading B
    if (timeElapsed > elapsedToSendA) {
 80a079a:	f8d9 3000 	ldr.w	r3, [r9]
 80a079e:	1ac0      	subs	r0, r0, r3
 80a07a0:	f8da 3000 	ldr.w	r3, [sl]
 80a07a4:	46ca      	mov	sl, r9
 80a07a6:	4283      	cmp	r3, r0
 80a07a8:	f080 80af 	bcs.w	80a090a <loop+0x522>
#ifdef DOTEST
        Serial.println("in http send A ");
#endif

        // Send the fractional 'wetness' to Ubidots...
        request.path = "/api/v1.6/variables/"VAR_WATERVALUE"/values";
 80a07ac:	4c90      	ldr	r4, [pc, #576]	; (80a09f0 <loop+0x608>)
    // if time_elapsed and doHTTP then upload reading A
    // otherwise if less_time_elapsed and doHTTP then upload reading B
    if (timeElapsed > elapsedToSendA) {

#ifdef DOTEST
        Serial.println("in http send A ");
 80a07ae:	f002 fe69 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a07b2:	4990      	ldr	r1, [pc, #576]	; (80a09f4 <loop+0x60c>)
 80a07b4:	f001 ff3d 	bl	80a2632 <_ZN5Print7printlnEPKc>
#endif

        // Send the fractional 'wetness' to Ubidots...
        request.path = "/api/v1.6/variables/"VAR_WATERVALUE"/values";
 80a07b8:	498f      	ldr	r1, [pc, #572]	; (80a09f8 <loop+0x610>)
 80a07ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a07be:	f002 f9f1 	bl	80a2ba4 <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a07c2:	498e      	ldr	r1, [pc, #568]	; (80a09fc <loop+0x614>)
 80a07c4:	a806      	add	r0, sp, #24
 80a07c6:	f002 f9c0 	bl	80a2b4a <_ZN6StringC1EPK19__FlashStringHelper>
        request.body = "{\"value\":" + String(waterValue) + "}";
 80a07ca:	2306      	movs	r3, #6
 80a07cc:	9300      	str	r3, [sp, #0]
 80a07ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a07d2:	a802      	add	r0, sp, #8
 80a07d4:	f002 f9f7 	bl	80a2bc6 <_ZN6StringC1Edi>
 80a07d8:	a902      	add	r1, sp, #8
 80a07da:	a806      	add	r0, sp, #24
 80a07dc:	f002 fa24 	bl	80a2c28 <_ZplRK15StringSumHelperRK6String>
 80a07e0:	4987      	ldr	r1, [pc, #540]	; (80a0a00 <loop+0x618>)
 80a07e2:	f002 fa2d 	bl	80a2c40 <_ZplRK15StringSumHelperPKc>
 80a07e6:	4601      	mov	r1, r0
 80a07e8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a07ec:	f002 f9c0 	bl	80a2b70 <_ZN6StringaSERKS_>
 80a07f0:	a802      	add	r0, sp, #8
 80a07f2:	f002 f963 	bl	80a2abc <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a07f6:	a806      	add	r0, sp, #24
 80a07f8:	f002 f960 	bl	80a2abc <_ZN6StringD1Ev>
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
 80a07fc:	4d81      	ldr	r5, [pc, #516]	; (80a0a04 <loop+0x61c>)
 80a07fe:	4b82      	ldr	r3, [pc, #520]	; (80a0a08 <loop+0x620>)
 80a0800:	462a      	mov	r2, r5
 80a0802:	4621      	mov	r1, r4
 80a0804:	9300      	str	r3, [sp, #0]
 80a0806:	4881      	ldr	r0, [pc, #516]	; (80a0a0c <loop+0x624>)
 80a0808:	4b81      	ldr	r3, [pc, #516]	; (80a0a10 <loop+0x628>)
 80a080a:	f000 fb13 	bl	80a0e34 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
        http.post(request, response, headers);

#ifdef DOTEST
        Serial.println(request.path);
 80a080e:	f002 fe39 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0812:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80a0814:	f001 ff0d 	bl	80a2632 <_ZN5Print7printlnEPKc>
        Serial.println(request.body);
 80a0818:	f002 fe34 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a081c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a081e:	f001 ff08 	bl	80a2632 <_ZN5Print7printlnEPKc>
        Serial.print("Application>\tResponse status: ");
 80a0822:	f002 fe2f 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0826:	497b      	ldr	r1, [pc, #492]	; (80a0a14 <loop+0x62c>)
 80a0828:	f001 fef0 	bl	80a260c <_ZN5Print5printEPKc>
        Serial.println(response.status);
 80a082c:	f002 fe2a 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0830:	220a      	movs	r2, #10
 80a0832:	6829      	ldr	r1, [r5, #0]
 80a0834:	f001 ff73 	bl	80a271e <_ZN5Print7printlnEii>
        Serial.print("Application>\tHTTP Response Body: ");
 80a0838:	f002 fe24 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a083c:	4976      	ldr	r1, [pc, #472]	; (80a0a18 <loop+0x630>)
 80a083e:	f001 fee5 	bl	80a260c <_ZN5Print5printEPKc>
        Serial.println(response.body);
 80a0842:	f002 fe1f 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0846:	6869      	ldr	r1, [r5, #4]
 80a0848:	f001 fef3 	bl	80a2632 <_ZN5Print7printlnEPKc>
#endif

        // dmf 7.17.18
        if (waterValue < 20.0 && sendLowAlert) {  // exploit previously configured Twilio webhook
 80a084c:	e9d6 0100 	ldrd	r0, r1, [r6]
 80a0850:	2200      	movs	r2, #0
 80a0852:	4b72      	ldr	r3, [pc, #456]	; (80a0a1c <loop+0x634>)
 80a0854:	f003 fe5a 	bl	80a450c <__aeabi_dcmplt>
 80a0858:	2800      	cmp	r0, #0
 80a085a:	d04e      	beq.n	80a08fa <loop+0x512>
 80a085c:	4d70      	ldr	r5, [pc, #448]	; (80a0a20 <loop+0x638>)
 80a085e:	782b      	ldrb	r3, [r5, #0]
 80a0860:	2b00      	cmp	r3, #0
 80a0862:	d04a      	beq.n	80a08fa <loop+0x512>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a0864:	4c6f      	ldr	r4, [pc, #444]	; (80a0a24 <loop+0x63c>)
 80a0866:	a806      	add	r0, sp, #24
 80a0868:	4621      	mov	r1, r4
 80a086a:	f002 f990 	bl	80a2b8e <_ZN6StringC1ERKS_>
            alertBody = alertBody + String::format("%.1f",waterValue) + "%!";
 80a086e:	4b6e      	ldr	r3, [pc, #440]	; (80a0a28 <loop+0x640>)
 80a0870:	496e      	ldr	r1, [pc, #440]	; (80a0a2c <loop+0x644>)
 80a0872:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0876:	a802      	add	r0, sp, #8
 80a0878:	f002 fa48 	bl	80a2d0c <_ZN6String6formatEPKcz>
 80a087c:	a902      	add	r1, sp, #8
 80a087e:	a806      	add	r0, sp, #24
 80a0880:	f002 f9d2 	bl	80a2c28 <_ZplRK15StringSumHelperRK6String>
 80a0884:	496a      	ldr	r1, [pc, #424]	; (80a0a30 <loop+0x648>)
 80a0886:	f002 f9db 	bl	80a2c40 <_ZplRK15StringSumHelperPKc>
 80a088a:	4601      	mov	r1, r0
 80a088c:	4620      	mov	r0, r4
 80a088e:	f002 f96f 	bl	80a2b70 <_ZN6StringaSERKS_>
 80a0892:	a802      	add	r0, sp, #8
 80a0894:	f002 f912 	bl	80a2abc <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0898:	a806      	add	r0, sp, #24
 80a089a:	f002 f90f 	bl	80a2abc <_ZN6StringD1Ev>
 80a089e:	4b65      	ldr	r3, [pc, #404]	; (80a0a34 <loop+0x64c>)
 80a08a0:	6822      	ldr	r2, [r4, #0]
 80a08a2:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a08a4:	4964      	ldr	r1, [pc, #400]	; (80a0a38 <loop+0x650>)
 80a08a6:	f88d 3000 	strb.w	r3, [sp]
 80a08aa:	a806      	add	r0, sp, #24
 80a08ac:	233c      	movs	r3, #60	; 0x3c
 80a08ae:	f001 fbc3 	bl	80a2038 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a08b2:	9c06      	ldr	r4, [sp, #24]
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
 80a08b4:	2100      	movs	r1, #0
 80a08b6:	4620      	mov	r0, r4
 80a08b8:	f7ff fd74 	bl	80a03a4 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>
 80a08bc:	7863      	ldrb	r3, [r4, #1]
 80a08be:	f3bf 8f5f 	dmb	sy
        if (this->acquireDone() && this->isSucceeded()) {
 80a08c2:	2b00      	cmp	r3, #0
 80a08c4:	f000 815a 	beq.w	80a0b7c <loop+0x794>
        }
        return false;
    }

    bool isSucceeded() const {
        wait();
 80a08c8:	2100      	movs	r1, #0
 80a08ca:	4620      	mov	r0, r4
 80a08cc:	f7ff fd6a 	bl	80a03a4 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a08d0:	7823      	ldrb	r3, [r4, #0]
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
 80a08d2:	2b01      	cmp	r3, #1
 80a08d4:	f040 8152 	bne.w	80a0b7c <loop+0x794>
            return result_;
 80a08d8:	7b24      	ldrb	r4, [r4, #12]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a08da:	9807      	ldr	r0, [sp, #28]
 80a08dc:	b128      	cbz	r0, 80a08ea <loop+0x502>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a08de:	6843      	ldr	r3, [r0, #4]
 80a08e0:	3b01      	subs	r3, #1
 80a08e2:	6043      	str	r3, [r0, #4]
 80a08e4:	b90b      	cbnz	r3, 80a08ea <loop+0x502>
 80a08e6:	f7ff fc08 	bl	80a00fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.12>
            bool success = Particle.publish("e2", alertBody);
            if (!success) {
 80a08ea:	b924      	cbnz	r4, 80a08f6 <loop+0x50e>
              #ifdef DOTEST
                Serial.println("Particle.publish with e2 message FAILED");
 80a08ec:	f002 fdca 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a08f0:	4952      	ldr	r1, [pc, #328]	; (80a0a3c <loop+0x654>)
 80a08f2:	f001 fe9e 	bl	80a2632 <_ZN5Print7printlnEPKc>
              #endif
            }
            sendLowAlert = FALSE;
 80a08f6:	2300      	movs	r3, #0
 80a08f8:	702b      	strb	r3, [r5, #0]
 80a08fa:	f000 ff99 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
        }

        // reset timeElapsed [tested at 30s, next event will be B at 5m30s]
        timeElapsed = 0;
        doBNext = TRUE;
 80a08fe:	2301      	movs	r3, #1
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
 80a0900:	f8ca 0000 	str.w	r0, [sl]
 80a0904:	f88b 3000 	strb.w	r3, [fp]
 80a0908:	e110      	b.n	80a0b2c <loop+0x744>

    } else if (doBNext && (timeElapsed > elapsedToSendB)) {
 80a090a:	f89b 3000 	ldrb.w	r3, [fp]
 80a090e:	4e4c      	ldr	r6, [pc, #304]	; (80a0a40 <loop+0x658>)
 80a0910:	2b00      	cmp	r3, #0
 80a0912:	f000 80a3 	beq.w	80a0a5c <loop+0x674>
 80a0916:	f000 ff8b 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
 80a091a:	f8d9 3000 	ldr.w	r3, [r9]
 80a091e:	1ac0      	subs	r0, r0, r3
 80a0920:	4b48      	ldr	r3, [pc, #288]	; (80a0a44 <loop+0x65c>)
 80a0922:	681b      	ldr	r3, [r3, #0]
 80a0924:	4283      	cmp	r3, r0
 80a0926:	f080 8099 	bcs.w	80a0a5c <loop+0x674>
#ifdef DOTEST
        Serial.println("in http send B ");
#endif

        // Send the sensor temperature to Ubidots...
        request.path = "/api/v1.6/variables/"VAR_TEMPVALUE"/values";
 80a092a:	4f31      	ldr	r7, [pc, #196]	; (80a09f0 <loop+0x608>)
        doBNext = TRUE;

    } else if (doBNext && (timeElapsed > elapsedToSendB)) {

#ifdef DOTEST
        Serial.println("in http send B ");
 80a092c:	f002 fdaa 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0930:	4945      	ldr	r1, [pc, #276]	; (80a0a48 <loop+0x660>)
 80a0932:	f001 fe7e 	bl	80a2632 <_ZN5Print7printlnEPKc>
#endif

        // Send the sensor temperature to Ubidots...
        request.path = "/api/v1.6/variables/"VAR_TEMPVALUE"/values";
 80a0936:	4945      	ldr	r1, [pc, #276]	; (80a0a4c <loop+0x664>)
 80a0938:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80a093c:	f002 f932 	bl	80a2ba4 <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0940:	492e      	ldr	r1, [pc, #184]	; (80a09fc <loop+0x614>)
 80a0942:	a806      	add	r0, sp, #24
 80a0944:	f002 f901 	bl	80a2b4a <_ZN6StringC1EPK19__FlashStringHelper>
        request.body = "{\"value\":" + String(howHot) + "}";
 80a0948:	2306      	movs	r3, #6
 80a094a:	4622      	mov	r2, r4
 80a094c:	9300      	str	r3, [sp, #0]
 80a094e:	a802      	add	r0, sp, #8
 80a0950:	462b      	mov	r3, r5
 80a0952:	f002 f938 	bl	80a2bc6 <_ZN6StringC1Edi>
 80a0956:	a902      	add	r1, sp, #8
 80a0958:	a806      	add	r0, sp, #24
 80a095a:	f002 f965 	bl	80a2c28 <_ZplRK15StringSumHelperRK6String>
 80a095e:	4928      	ldr	r1, [pc, #160]	; (80a0a00 <loop+0x618>)
 80a0960:	f002 f96e 	bl	80a2c40 <_ZplRK15StringSumHelperPKc>
 80a0964:	4601      	mov	r1, r0
 80a0966:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80a096a:	f002 f901 	bl	80a2b70 <_ZN6StringaSERKS_>
 80a096e:	a802      	add	r0, sp, #8
 80a0970:	f002 f8a4 	bl	80a2abc <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0974:	a806      	add	r0, sp, #24
 80a0976:	f002 f8a1 	bl	80a2abc <_ZN6StringD1Ev>
 80a097a:	4c22      	ldr	r4, [pc, #136]	; (80a0a04 <loop+0x61c>)
 80a097c:	4b22      	ldr	r3, [pc, #136]	; (80a0a08 <loop+0x620>)
 80a097e:	4622      	mov	r2, r4
 80a0980:	4639      	mov	r1, r7
 80a0982:	9300      	str	r3, [sp, #0]
 80a0984:	4821      	ldr	r0, [pc, #132]	; (80a0a0c <loop+0x624>)
 80a0986:	4b22      	ldr	r3, [pc, #136]	; (80a0a10 <loop+0x628>)
 80a0988:	f000 fa54 	bl	80a0e34 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
        http.post(request, response, headers);

#ifdef DOTEST
        Serial.println(request.path);
 80a098c:	f002 fd7a 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80a0992:	f001 fe4e 	bl	80a2632 <_ZN5Print7printlnEPKc>
        Serial.println(request.body);
 80a0996:	f002 fd75 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a099a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80a099c:	f001 fe49 	bl	80a2632 <_ZN5Print7printlnEPKc>
        Serial.print("Application>\tResponse status: ");
 80a09a0:	f002 fd70 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a09a4:	491b      	ldr	r1, [pc, #108]	; (80a0a14 <loop+0x62c>)
 80a09a6:	f001 fe31 	bl	80a260c <_ZN5Print5printEPKc>
        Serial.println(response.status);
 80a09aa:	f002 fd6b 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a09ae:	220a      	movs	r2, #10
 80a09b0:	6821      	ldr	r1, [r4, #0]
 80a09b2:	f001 feb4 	bl	80a271e <_ZN5Print7printlnEii>
        Serial.print("Application>\tHTTP Response Body: ");
 80a09b6:	f002 fd65 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a09ba:	4917      	ldr	r1, [pc, #92]	; (80a0a18 <loop+0x630>)
 80a09bc:	f001 fe26 	bl	80a260c <_ZN5Print5printEPKc>
        Serial.println(response.body);
 80a09c0:	f002 fd60 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a09c4:	6861      	ldr	r1, [r4, #4]
 80a09c6:	f001 fe34 	bl	80a2632 <_ZN5Print7printlnEPKc>
 80a09ca:	f000 ff31 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
#endif

        // reset timeElapsed
        timeElapsed = 0;
        doBNext = FALSE;
 80a09ce:	2300      	movs	r3, #0
 80a09d0:	f8c9 0000 	str.w	r0, [r9]
 80a09d4:	f88b 3000 	strb.w	r3, [fp]
 80a09d8:	e0a6      	b.n	80a0b28 <loop+0x740>
 80a09da:	bf00      	nop
 80a09dc:	200000ac 	.word	0x200000ac
 80a09e0:	080a52a9 	.word	0x080a52a9
 80a09e4:	080a52ab 	.word	0x080a52ab
 80a09e8:	080a52b2 	.word	0x080a52b2
 80a09ec:	080a52bf 	.word	0x080a52bf
 80a09f0:	20000104 	.word	0x20000104
 80a09f4:	080a52cf 	.word	0x080a52cf
 80a09f8:	080a52df 	.word	0x080a52df
 80a09fc:	080a5313 	.word	0x080a5313
 80a0a00:	080a531d 	.word	0x080a531d
 80a0a04:	200005f8 	.word	0x200005f8
 80a0a08:	080a531f 	.word	0x080a531f
 80a0a0c:	20000154 	.word	0x20000154
 80a0a10:	20000024 	.word	0x20000024
 80a0a14:	080a5324 	.word	0x080a5324
 80a0a18:	080a5343 	.word	0x080a5343
 80a0a1c:	40340000 	.word	0x40340000
 80a0a20:	20000100 	.word	0x20000100
 80a0a24:	200005c0 	.word	0x200005c0
 80a0a28:	20000588 	.word	0x20000588
 80a0a2c:	080a5365 	.word	0x080a5365
 80a0a30:	080a536a 	.word	0x080a536a
 80a0a34:	20000582 	.word	0x20000582
 80a0a38:	080a536d 	.word	0x080a536d
 80a0a3c:	080a5370 	.word	0x080a5370
 80a0a40:	20000151 	.word	0x20000151
 80a0a44:	20000010 	.word	0x20000010
 80a0a48:	080a5398 	.word	0x080a5398
 80a0a4c:	080a53a8 	.word	0x080a53a8
 80a0a50:	200005d0 	.word	0x200005d0
 80a0a54:	2000060c 	.word	0x2000060c
 80a0a58:	20000018 	.word	0x20000018
        doCNext = TRUE;

    } else if (doCNext && (timeElapsed > elapsedToSendB)) {
 80a0a5c:	7833      	ldrb	r3, [r6, #0]
 80a0a5e:	4e7c      	ldr	r6, [pc, #496]	; (80a0c50 <loop+0x868>)
 80a0a60:	2b00      	cmp	r3, #0
 80a0a62:	f000 808d 	beq.w	80a0b80 <loop+0x798>
 80a0a66:	f000 fee3 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
 80a0a6a:	f8da 3000 	ldr.w	r3, [sl]
 80a0a6e:	1ac0      	subs	r0, r0, r3
 80a0a70:	4b78      	ldr	r3, [pc, #480]	; (80a0c54 <loop+0x86c>)
 80a0a72:	681b      	ldr	r3, [r3, #0]
 80a0a74:	4283      	cmp	r3, r0
 80a0a76:	f080 8083 	bcs.w	80a0b80 <loop+0x798>
#ifdef DOTEST
        Serial.println("in http send C ");
#endif

        // Send the battery voltage to Ubidots...
        request.path = "/api/v1.6/variables/"VAR_VOLTAGE"/values";
 80a0a7a:	4c77      	ldr	r4, [pc, #476]	; (80a0c58 <loop+0x870>)
        doCNext = TRUE;

    } else if (doCNext && (timeElapsed > elapsedToSendB)) {

#ifdef DOTEST
        Serial.println("in http send C ");
 80a0a7c:	f002 fd02 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0a80:	4976      	ldr	r1, [pc, #472]	; (80a0c5c <loop+0x874>)
 80a0a82:	f001 fdd6 	bl	80a2632 <_ZN5Print7printlnEPKc>
#endif

        // Send the battery voltage to Ubidots...
        request.path = "/api/v1.6/variables/"VAR_VOLTAGE"/values";
 80a0a86:	4976      	ldr	r1, [pc, #472]	; (80a0c60 <loop+0x878>)
 80a0a88:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a0a8c:	f002 f88a 	bl	80a2ba4 <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0a90:	4974      	ldr	r1, [pc, #464]	; (80a0c64 <loop+0x87c>)
 80a0a92:	a806      	add	r0, sp, #24
 80a0a94:	f002 f859 	bl	80a2b4a <_ZN6StringC1EPK19__FlashStringHelper>
        request.body = "{\"value\":" + String(cellVoltage) + "}";
 80a0a98:	2306      	movs	r3, #6
 80a0a9a:	9300      	str	r3, [sp, #0]
 80a0a9c:	a802      	add	r0, sp, #8
 80a0a9e:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a0aa2:	f002 f890 	bl	80a2bc6 <_ZN6StringC1Edi>
 80a0aa6:	a902      	add	r1, sp, #8
 80a0aa8:	a806      	add	r0, sp, #24
 80a0aaa:	f002 f8bd 	bl	80a2c28 <_ZplRK15StringSumHelperRK6String>
 80a0aae:	496e      	ldr	r1, [pc, #440]	; (80a0c68 <loop+0x880>)
 80a0ab0:	f002 f8c6 	bl	80a2c40 <_ZplRK15StringSumHelperPKc>
 80a0ab4:	4601      	mov	r1, r0
 80a0ab6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a0aba:	f002 f859 	bl	80a2b70 <_ZN6StringaSERKS_>
 80a0abe:	a802      	add	r0, sp, #8
 80a0ac0:	f001 fffc 	bl	80a2abc <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0ac4:	a806      	add	r0, sp, #24
 80a0ac6:	f001 fff9 	bl	80a2abc <_ZN6StringD1Ev>
 80a0aca:	4d68      	ldr	r5, [pc, #416]	; (80a0c6c <loop+0x884>)
 80a0acc:	4b68      	ldr	r3, [pc, #416]	; (80a0c70 <loop+0x888>)
 80a0ace:	462a      	mov	r2, r5
 80a0ad0:	4621      	mov	r1, r4
 80a0ad2:	9300      	str	r3, [sp, #0]
 80a0ad4:	4867      	ldr	r0, [pc, #412]	; (80a0c74 <loop+0x88c>)
 80a0ad6:	4b68      	ldr	r3, [pc, #416]	; (80a0c78 <loop+0x890>)
 80a0ad8:	f000 f9ac 	bl	80a0e34 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
        http.post(request, response, headers);

#ifdef DOTEST
        Serial.println(request.path);
 80a0adc:	f002 fcd2 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0ae0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80a0ae2:	f001 fda6 	bl	80a2632 <_ZN5Print7printlnEPKc>
        Serial.println(request.body);
 80a0ae6:	f002 fccd 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0aea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a0aec:	f001 fda1 	bl	80a2632 <_ZN5Print7printlnEPKc>
        Serial.print("Application>\tResponse status: ");
 80a0af0:	f002 fcc8 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0af4:	4961      	ldr	r1, [pc, #388]	; (80a0c7c <loop+0x894>)
 80a0af6:	f001 fd89 	bl	80a260c <_ZN5Print5printEPKc>
        Serial.println(response.status);
 80a0afa:	f002 fcc3 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0afe:	220a      	movs	r2, #10
 80a0b00:	6829      	ldr	r1, [r5, #0]
 80a0b02:	f001 fe0c 	bl	80a271e <_ZN5Print7printlnEii>
        Serial.print("Application>\tHTTP Response Body: ");
 80a0b06:	f002 fcbd 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0b0a:	495d      	ldr	r1, [pc, #372]	; (80a0c80 <loop+0x898>)
 80a0b0c:	f001 fd7e 	bl	80a260c <_ZN5Print5printEPKc>
        Serial.println(response.body);
 80a0b10:	f002 fcb8 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0b14:	6869      	ldr	r1, [r5, #4]
 80a0b16:	f001 fd8c 	bl	80a2632 <_ZN5Print7printlnEPKc>
 80a0b1a:	f000 fe89 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
 80a0b1e:	4b59      	ldr	r3, [pc, #356]	; (80a0c84 <loop+0x89c>)
#endif

        // reset timeElapsed
        timeElapsed = 0;
        doCNext = FALSE;
 80a0b20:	2200      	movs	r2, #0
 80a0b22:	6018      	str	r0, [r3, #0]
 80a0b24:	4b58      	ldr	r3, [pc, #352]	; (80a0c88 <loop+0x8a0>)
 80a0b26:	701a      	strb	r2, [r3, #0]
        doDNext = TRUE;
 80a0b28:	2301      	movs	r3, #1
 80a0b2a:	7033      	strb	r3, [r6, #0]
    }

/* PAUSE */

    // Flash the LED to say that we've done something
    digitalWrite(D7, HIGH);
 80a0b2c:	2101      	movs	r1, #1
 80a0b2e:	2007      	movs	r0, #7
 80a0b30:	f002 fe75 	bl	80a381e <digitalWrite>
    delay(1000);
 80a0b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0b38:	f001 f8f0 	bl	80a1d1c <delay>
    digitalWrite(D7, LOW);
 80a0b3c:	2100      	movs	r1, #0
 80a0b3e:	2007      	movs	r0, #7
 80a0b40:	f002 fe6d 	bl	80a381e <digitalWrite>
    delay(2000);
 80a0b44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a0b48:	f001 f8e8 	bl	80a1d1c <delay>
 80a0b4c:	f000 fe70 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
 80a0b50:	4c4e      	ldr	r4, [pc, #312]	; (80a0c8c <loop+0x8a4>)

/* AND SLEEP */

    // make the decision to goto sleep
    if (timeForSleep > elapsedToSleep) {
 80a0b52:	6823      	ldr	r3, [r4, #0]
 80a0b54:	1ac0      	subs	r0, r0, r3
 80a0b56:	4b4e      	ldr	r3, [pc, #312]	; (80a0c90 <loop+0x8a8>)
 80a0b58:	681b      	ldr	r3, [r3, #0]
 80a0b5a:	4283      	cmp	r3, r0
 80a0b5c:	d274      	bcs.n	80a0c48 <loop+0x860>
      lcd.clear();              // clear the DOGM display
 80a0b5e:	484d      	ldr	r0, [pc, #308]	; (80a0c94 <loop+0x8ac>)
 80a0b60:	f000 fcdb 	bl	80a151a <_ZN8DogLcdhw5clearEv>
//    batteryMonitor.sleep();   // put the fuel gauge to sleep (will reset() at start)
      System.sleep(SLEEP_MODE_DEEP,howLongToSleep);
 80a0b64:	4b4c      	ldr	r3, [pc, #304]	; (80a0c98 <loop+0x8b0>)
 80a0b66:	4a4d      	ldr	r2, [pc, #308]	; (80a0c9c <loop+0x8b4>)
 80a0b68:	681b      	ldr	r3, [r3, #0]
 80a0b6a:	6812      	ldr	r2, [r2, #0]
 80a0b6c:	2101      	movs	r1, #1
 80a0b6e:	a806      	add	r0, sp, #24
 80a0b70:	f002 f8f4 	bl	80a2d5c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
 80a0b74:	f000 fe5c 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
 80a0b78:	6020      	str	r0, [r4, #0]
      timeForSleep = 0;         // Actually, don't need this, since Wake will restart
    }

}
 80a0b7a:	e065      	b.n	80a0c48 <loop+0x860>
        }
        return std::move(defaultValue);
 80a0b7c:	2400      	movs	r4, #0
 80a0b7e:	e6ac      	b.n	80a08da <loop+0x4f2>
        // reset timeElapsed
        timeElapsed = 0;
        doCNext = FALSE;
        doDNext = TRUE;

    } else if (doDNext && (timeElapsed > elapsedToSendB)) {
 80a0b80:	7833      	ldrb	r3, [r6, #0]
 80a0b82:	2b00      	cmp	r3, #0
 80a0b84:	d0d2      	beq.n	80a0b2c <loop+0x744>
 80a0b86:	f000 fe53 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
 80a0b8a:	f8da 3000 	ldr.w	r3, [sl]
 80a0b8e:	1ac0      	subs	r0, r0, r3
 80a0b90:	4b30      	ldr	r3, [pc, #192]	; (80a0c54 <loop+0x86c>)
 80a0b92:	681b      	ldr	r3, [r3, #0]
 80a0b94:	4283      	cmp	r3, r0
 80a0b96:	d2c9      	bcs.n	80a0b2c <loop+0x744>
#ifdef DOTEST
        Serial.println("in http send D ");
#endif

        // Send the battery state of charge to Ubidots...
        request.path = "/api/v1.6/variables/"VAR_BATTSOC"/values";
 80a0b98:	4c2f      	ldr	r4, [pc, #188]	; (80a0c58 <loop+0x870>)
        doDNext = TRUE;

    } else if (doDNext && (timeElapsed > elapsedToSendB)) {

#ifdef DOTEST
        Serial.println("in http send D ");
 80a0b9a:	f002 fc73 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0b9e:	4940      	ldr	r1, [pc, #256]	; (80a0ca0 <loop+0x8b8>)
 80a0ba0:	f001 fd47 	bl	80a2632 <_ZN5Print7printlnEPKc>
#endif

        // Send the battery state of charge to Ubidots...
        request.path = "/api/v1.6/variables/"VAR_BATTSOC"/values";
 80a0ba4:	493f      	ldr	r1, [pc, #252]	; (80a0ca4 <loop+0x8bc>)
 80a0ba6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a0baa:	f001 fffb 	bl	80a2ba4 <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0bae:	492d      	ldr	r1, [pc, #180]	; (80a0c64 <loop+0x87c>)
 80a0bb0:	a806      	add	r0, sp, #24
 80a0bb2:	f001 ffca 	bl	80a2b4a <_ZN6StringC1EPK19__FlashStringHelper>
        request.body = "{\"value\":" + String(stateOfCharge) + "}";
 80a0bb6:	2306      	movs	r3, #6
 80a0bb8:	9300      	str	r3, [sp, #0]
 80a0bba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a0bbe:	a802      	add	r0, sp, #8
 80a0bc0:	f002 f801 	bl	80a2bc6 <_ZN6StringC1Edi>
 80a0bc4:	a902      	add	r1, sp, #8
 80a0bc6:	a806      	add	r0, sp, #24
 80a0bc8:	f002 f82e 	bl	80a2c28 <_ZplRK15StringSumHelperRK6String>
 80a0bcc:	4926      	ldr	r1, [pc, #152]	; (80a0c68 <loop+0x880>)
 80a0bce:	f002 f837 	bl	80a2c40 <_ZplRK15StringSumHelperPKc>
 80a0bd2:	4601      	mov	r1, r0
 80a0bd4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a0bd8:	f001 ffca 	bl	80a2b70 <_ZN6StringaSERKS_>
 80a0bdc:	a802      	add	r0, sp, #8
 80a0bde:	f001 ff6d 	bl	80a2abc <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0be2:	a806      	add	r0, sp, #24
 80a0be4:	f001 ff6a 	bl	80a2abc <_ZN6StringD1Ev>
 80a0be8:	4d20      	ldr	r5, [pc, #128]	; (80a0c6c <loop+0x884>)
 80a0bea:	4b21      	ldr	r3, [pc, #132]	; (80a0c70 <loop+0x888>)
 80a0bec:	462a      	mov	r2, r5
 80a0bee:	4621      	mov	r1, r4
 80a0bf0:	9300      	str	r3, [sp, #0]
 80a0bf2:	4820      	ldr	r0, [pc, #128]	; (80a0c74 <loop+0x88c>)
 80a0bf4:	4b20      	ldr	r3, [pc, #128]	; (80a0c78 <loop+0x890>)
 80a0bf6:	f000 f91d 	bl	80a0e34 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
        http.post(request, response, headers);

#ifdef DOTEST
        Serial.println(request.path);
 80a0bfa:	f002 fc43 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0bfe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80a0c00:	f001 fd17 	bl	80a2632 <_ZN5Print7printlnEPKc>
        Serial.println(request.body);
 80a0c04:	f002 fc3e 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0c08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a0c0a:	f001 fd12 	bl	80a2632 <_ZN5Print7printlnEPKc>
        Serial.print("Application>\tResponse status: ");
 80a0c0e:	f002 fc39 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0c12:	491a      	ldr	r1, [pc, #104]	; (80a0c7c <loop+0x894>)
 80a0c14:	f001 fcfa 	bl	80a260c <_ZN5Print5printEPKc>
        Serial.println(response.status);
 80a0c18:	f002 fc34 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0c1c:	220a      	movs	r2, #10
 80a0c1e:	6829      	ldr	r1, [r5, #0]
 80a0c20:	f001 fd7d 	bl	80a271e <_ZN5Print7printlnEii>
        Serial.print("Application>\tHTTP Response Body: ");
 80a0c24:	f002 fc2e 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0c28:	4915      	ldr	r1, [pc, #84]	; (80a0c80 <loop+0x898>)
 80a0c2a:	f001 fcef 	bl	80a260c <_ZN5Print5printEPKc>
        Serial.println(response.body);
 80a0c2e:	f002 fc29 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a0c32:	6869      	ldr	r1, [r5, #4]
 80a0c34:	f001 fcfd 	bl	80a2632 <_ZN5Print7printlnEPKc>
 80a0c38:	f000 fdfa 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
 80a0c3c:	4b11      	ldr	r3, [pc, #68]	; (80a0c84 <loop+0x89c>)
#endif

        // reset timeElapsed
        timeElapsed = 0;
        doDNext = FALSE;
 80a0c3e:	2200      	movs	r2, #0
 80a0c40:	6018      	str	r0, [r3, #0]
 80a0c42:	4b03      	ldr	r3, [pc, #12]	; (80a0c50 <loop+0x868>)
 80a0c44:	701a      	strb	r2, [r3, #0]
 80a0c46:	e771      	b.n	80a0b2c <loop+0x744>
//    batteryMonitor.sleep();   // put the fuel gauge to sleep (will reset() at start)
      System.sleep(SLEEP_MODE_DEEP,howLongToSleep);
      timeForSleep = 0;         // Actually, don't need this, since Wake will restart
    }

}
 80a0c48:	b00b      	add	sp, #44	; 0x2c
 80a0c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0c4e:	bf00      	nop
 80a0c50:	20000580 	.word	0x20000580
 80a0c54:	20000010 	.word	0x20000010
 80a0c58:	20000104 	.word	0x20000104
 80a0c5c:	080a53dc 	.word	0x080a53dc
 80a0c60:	080a53ec 	.word	0x080a53ec
 80a0c64:	080a5313 	.word	0x080a5313
 80a0c68:	080a531d 	.word	0x080a531d
 80a0c6c:	200005f8 	.word	0x200005f8
 80a0c70:	080a531f 	.word	0x080a531f
 80a0c74:	20000154 	.word	0x20000154
 80a0c78:	20000024 	.word	0x20000024
 80a0c7c:	080a5324 	.word	0x080a5324
 80a0c80:	080a5343 	.word	0x080a5343
 80a0c84:	200005d0 	.word	0x200005d0
 80a0c88:	20000151 	.word	0x20000151
 80a0c8c:	200005f4 	.word	0x200005f4
 80a0c90:	20000020 	.word	0x20000020
 80a0c94:	200000ac 	.word	0x200000ac
 80a0c98:	20000590 	.word	0x20000590
 80a0c9c:	2000001c 	.word	0x2000001c
 80a0ca0:	080a5420 	.word	0x080a5420
 80a0ca4:	080a5430 	.word	0x080a5430

080a0ca8 <_GLOBAL__sub_I_chirp>:
 80a0ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0caa:	4b37      	ldr	r3, [pc, #220]	; (80a0d88 <_GLOBAL__sub_I_chirp+0xe0>)
 80a0cac:	2500      	movs	r5, #0
 80a0cae:	601d      	str	r5, [r3, #0]
 80a0cb0:	4b36      	ldr	r3, [pc, #216]	; (80a0d8c <_GLOBAL__sub_I_chirp+0xe4>)
 80a0cb2:	b085      	sub	sp, #20
 80a0cb4:	701d      	strb	r5, [r3, #0]
// Define the Chirp
I2CSoilMoistureSensor chirp;
// Define the fuel gauge
MAX17043 batteryMonitor;
// Define the http connection
HttpClient http;
 80a0cb6:	4e36      	ldr	r6, [pc, #216]	; (80a0d90 <_GLOBAL__sub_I_chirp+0xe8>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0cb8:	f000 fdc2 	bl	80a1840 <HAL_Pin_Map>

// Note that the default I2C address for the Chirp is 0x20 (software adjustable)
// and the default address for the MAX17043 chip is 0x36 (fixed)

// Define the Chirp
I2CSoilMoistureSensor chirp;
 80a0cbc:	2120      	movs	r1, #32
 80a0cbe:	4835      	ldr	r0, [pc, #212]	; (80a0d94 <_GLOBAL__sub_I_chirp+0xec>)
 80a0cc0:	f000 f9d8 	bl	80a1074 <_ZN21I2CSoilMoistureSensorC1Eh>
// Define the fuel gauge
MAX17043 batteryMonitor;
// Define the http connection
HttpClient http;
 80a0cc4:	4c34      	ldr	r4, [pc, #208]	; (80a0d98 <_GLOBAL__sub_I_chirp+0xf0>)
// and the default address for the MAX17043 chip is 0x36 (fixed)

// Define the Chirp
I2CSoilMoistureSensor chirp;
// Define the fuel gauge
MAX17043 batteryMonitor;
 80a0cc6:	4835      	ldr	r0, [pc, #212]	; (80a0d9c <_GLOBAL__sub_I_chirp+0xf4>)
 80a0cc8:	f000 faf5 	bl	80a12b6 <_ZN8MAX17043C1Ev>
// Define the http connection
HttpClient http;
 80a0ccc:	4630      	mov	r0, r6
 80a0cce:	f000 f885 	bl	80a0ddc <_ZN10HttpClientC1Ev>
 80a0cd2:	4622      	mov	r2, r4
 80a0cd4:	4932      	ldr	r1, [pc, #200]	; (80a0da0 <_GLOBAL__sub_I_chirp+0xf8>)
 80a0cd6:	4630      	mov	r0, r6
 80a0cd8:	f002 fe14 	bl	80a3904 <__aeabi_atexit>
 80a0cdc:	f000 fda8 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
 80a0ce0:	4b30      	ldr	r3, [pc, #192]	; (80a0da4 <_GLOBAL__sub_I_chirp+0xfc>)
// Define the elapsed timers
elapsedMillis timeElapsed;
elapsedMillis timeForSleep;
// Define the DOGM display
DogLcdhw lcd(0, 0, 12, 11, 10, -1); // SPARK test configuration
 80a0ce2:	4f31      	ldr	r7, [pc, #196]	; (80a0da8 <_GLOBAL__sub_I_chirp+0x100>)
 80a0ce4:	6018      	str	r0, [r3, #0]
 80a0ce6:	f000 fda3 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
 80a0cea:	4b30      	ldr	r3, [pc, #192]	; (80a0dac <_GLOBAL__sub_I_chirp+0x104>)
 80a0cec:	260a      	movs	r6, #10
 80a0cee:	6018      	str	r0, [r3, #0]
 80a0cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0cf4:	9302      	str	r3, [sp, #8]
 80a0cf6:	230b      	movs	r3, #11
 80a0cf8:	e88d 0048 	stmia.w	sp, {r3, r6}
 80a0cfc:	462a      	mov	r2, r5
 80a0cfe:	230c      	movs	r3, #12
 80a0d00:	4629      	mov	r1, r5
 80a0d02:	4638      	mov	r0, r7
// Define a running average of the capacitance measurements (10 measurements)
RunningAverage runningAvgWet(10);
 80a0d04:	4d2a      	ldr	r5, [pc, #168]	; (80a0db0 <_GLOBAL__sub_I_chirp+0x108>)
HttpClient http;
// Define the elapsed timers
elapsedMillis timeElapsed;
elapsedMillis timeForSleep;
// Define the DOGM display
DogLcdhw lcd(0, 0, 12, 11, 10, -1); // SPARK test configuration
 80a0d06:	f000 fb93 	bl	80a1430 <_ZN8DogLcdhwC1Eiiiiii>
 80a0d0a:	4622      	mov	r2, r4
 80a0d0c:	4929      	ldr	r1, [pc, #164]	; (80a0db4 <_GLOBAL__sub_I_chirp+0x10c>)
 80a0d0e:	4638      	mov	r0, r7
 80a0d10:	f002 fdf8 	bl	80a3904 <__aeabi_atexit>
// Define a running average of the capacitance measurements (10 measurements)
RunningAverage runningAvgWet(10);
 80a0d14:	4631      	mov	r1, r6
 80a0d16:	4628      	mov	r0, r5
 80a0d18:	f000 fa7d 	bl	80a1216 <_ZN14RunningAverageC1Eh>
 * path	 request path
 * port     request port
 * body	 request body
 */
typedef struct
{
 80a0d1c:	4e26      	ldr	r6, [pc, #152]	; (80a0db8 <_GLOBAL__sub_I_chirp+0x110>)
 80a0d1e:	4628      	mov	r0, r5
 80a0d20:	4d26      	ldr	r5, [pc, #152]	; (80a0dbc <_GLOBAL__sub_I_chirp+0x114>)
 80a0d22:	4622      	mov	r2, r4
 80a0d24:	4926      	ldr	r1, [pc, #152]	; (80a0dc0 <_GLOBAL__sub_I_chirp+0x118>)
 80a0d26:	f002 fded 	bl	80a3904 <__aeabi_atexit>
 80a0d2a:	4631      	mov	r1, r6
 80a0d2c:	4628      	mov	r0, r5
 80a0d2e:	f001 ff0c 	bl	80a2b4a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0d32:	f105 0010 	add.w	r0, r5, #16
 80a0d36:	f001 fb87 	bl	80a2448 <_ZN9IPAddressC1Ev>
 80a0d3a:	4631      	mov	r1, r6
 80a0d3c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80a0d40:	f001 ff03 	bl	80a2b4a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0d44:	4631      	mov	r1, r6
 80a0d46:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 80a0d4a:	f001 fefe 	bl	80a2b4a <_ZN6StringC1EPK19__FlashStringHelper>
http_header_t headers[] = {
    { "Content-Type", "application/json" },
    { "X-Auth-Token" , TOKEN },
    { NULL, NULL } // NOTE: Always terminate headers will NULL
};
http_request_t request;
 80a0d4e:	4628      	mov	r0, r5
 * HTTP Response struct.
 * status  response status code.
 * body	response body
 */
typedef struct
{
 80a0d50:	4d1c      	ldr	r5, [pc, #112]	; (80a0dc4 <_GLOBAL__sub_I_chirp+0x11c>)
 80a0d52:	4622      	mov	r2, r4
 80a0d54:	491c      	ldr	r1, [pc, #112]	; (80a0dc8 <_GLOBAL__sub_I_chirp+0x120>)
 80a0d56:	f002 fdd5 	bl	80a3904 <__aeabi_atexit>
 80a0d5a:	4631      	mov	r1, r6
 80a0d5c:	1d28      	adds	r0, r5, #4
 80a0d5e:	f001 fef4 	bl	80a2b4a <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
 80a0d62:	4628      	mov	r0, r5
double cellVoltage = 0;
double stateOfCharge = 0;
bool inAlert = FALSE;

// dmf 7.17.18
String alertBody = "The plants need water! WaterValue is ";
 80a0d64:	4d19      	ldr	r5, [pc, #100]	; (80a0dcc <_GLOBAL__sub_I_chirp+0x124>)
    { "Content-Type", "application/json" },
    { "X-Auth-Token" , TOKEN },
    { NULL, NULL } // NOTE: Always terminate headers will NULL
};
http_request_t request;
http_response_t response;
 80a0d66:	4622      	mov	r2, r4
 80a0d68:	4919      	ldr	r1, [pc, #100]	; (80a0dd0 <_GLOBAL__sub_I_chirp+0x128>)
 80a0d6a:	f002 fdcb 	bl	80a3904 <__aeabi_atexit>
double cellVoltage = 0;
double stateOfCharge = 0;
bool inAlert = FALSE;

// dmf 7.17.18
String alertBody = "The plants need water! WaterValue is ";
 80a0d6e:	4919      	ldr	r1, [pc, #100]	; (80a0dd4 <_GLOBAL__sub_I_chirp+0x12c>)
 80a0d70:	4628      	mov	r0, r5
 80a0d72:	f001 feea 	bl	80a2b4a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0d76:	4622      	mov	r2, r4
 80a0d78:	4628      	mov	r0, r5
 80a0d7a:	4917      	ldr	r1, [pc, #92]	; (80a0dd8 <_GLOBAL__sub_I_chirp+0x130>)
//    batteryMonitor.sleep();   // put the fuel gauge to sleep (will reset() at start)
      System.sleep(SLEEP_MODE_DEEP,howLongToSleep);
      timeForSleep = 0;         // Actually, don't need this, since Wake will restart
    }

}
 80a0d7c:	b005      	add	sp, #20
 80a0d7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
double cellVoltage = 0;
double stateOfCharge = 0;
bool inAlert = FALSE;

// dmf 7.17.18
String alertBody = "The plants need water! WaterValue is ";
 80a0d82:	f002 bdbf 	b.w	80a3904 <__aeabi_atexit>
 80a0d86:	bf00      	nop
 80a0d88:	20000590 	.word	0x20000590
 80a0d8c:	20000582 	.word	0x20000582
 80a0d90:	20000154 	.word	0x20000154
 80a0d94:	200005f0 	.word	0x200005f0
 80a0d98:	200000a8 	.word	0x200000a8
 80a0d9c:	20000150 	.word	0x20000150
 80a0da0:	080a013d 	.word	0x080a013d
 80a0da4:	200005d0 	.word	0x200005d0
 80a0da8:	200000ac 	.word	0x200000ac
 80a0dac:	200005f4 	.word	0x200005f4
 80a0db0:	20000598 	.word	0x20000598
 80a0db4:	080a00b7 	.word	0x080a00b7
 80a0db8:	080a5527 	.word	0x080a5527
 80a0dbc:	20000104 	.word	0x20000104
 80a0dc0:	080a11dd 	.word	0x080a11dd
 80a0dc4:	200005f8 	.word	0x200005f8
 80a0dc8:	080a00c7 	.word	0x080a00c7
 80a0dcc:	200005c0 	.word	0x200005c0
 80a0dd0:	080a00b9 	.word	0x080a00b9
 80a0dd4:	080a5464 	.word	0x080a5464
 80a0dd8:	080a2abd 	.word	0x080a2abd

080a0ddc <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
 80a0ddc:	b510      	push	{r4, lr}
 80a0dde:	4604      	mov	r4, r0
 80a0de0:	f002 f9fc 	bl	80a31dc <_ZN9TCPClientC1Ev>
{

}
 80a0de4:	4620      	mov	r0, r4
 80a0de6:	bd10      	pop	{r4, pc}

080a0de8 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
 80a0de8:	b538      	push	{r3, r4, r5, lr}
 80a0dea:	4604      	mov	r4, r0
 80a0dec:	4615      	mov	r5, r2
    client.print(aHeaderName);
 80a0dee:	f001 fc0d 	bl	80a260c <_ZN5Print5printEPKc>
    client.print(": ");
 80a0df2:	4905      	ldr	r1, [pc, #20]	; (80a0e08 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
 80a0df4:	4620      	mov	r0, r4
 80a0df6:	f001 fc09 	bl	80a260c <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
 80a0dfa:	4629      	mov	r1, r5
 80a0dfc:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
 80a0dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
 80a0e02:	f001 bc16 	b.w	80a2632 <_ZN5Print7printlnEPKc>
 80a0e06:	bf00      	nop
 80a0e08:	080a5624 	.word	0x080a5624

080a0e0c <_ZN10HttpClient10sendHeaderEPKci>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
 80a0e0c:	b538      	push	{r3, r4, r5, lr}
 80a0e0e:	4604      	mov	r4, r0
 80a0e10:	4615      	mov	r5, r2
    client.print(aHeaderName);
 80a0e12:	f001 fbfb 	bl	80a260c <_ZN5Print5printEPKc>
    client.print(": ");
 80a0e16:	4905      	ldr	r1, [pc, #20]	; (80a0e2c <_ZN10HttpClient10sendHeaderEPKci+0x20>)
 80a0e18:	4620      	mov	r0, r4
 80a0e1a:	f001 fbf7 	bl	80a260c <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
 80a0e1e:	4629      	mov	r1, r5
 80a0e20:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
 80a0e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
 80a0e26:	220a      	movs	r2, #10
 80a0e28:	f001 bc79 	b.w	80a271e <_ZN5Print7printlnEii>
 80a0e2c:	080a5624 	.word	0x080a5624

080a0e30 <_GLOBAL__sub_I__ZN10HttpClientC2Ev>:
 80a0e30:	f000 bd06 	b.w	80a1840 <HAL_Pin_Map>

080a0e34 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
 80a0e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e38:	460d      	mov	r5, r1
 80a0e3a:	461e      	mov	r6, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
 80a0e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
 80a0e40:	b08f      	sub	sp, #60	; 0x3c
 80a0e42:	4604      	mov	r4, r0
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
 80a0e44:	6013      	str	r3, [r2, #0]
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a0e46:	2100      	movs	r1, #0
 80a0e48:	4628      	mov	r0, r5
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
 80a0e4a:	4617      	mov	r7, r2
 80a0e4c:	f001 ff0a 	bl	80a2c64 <_ZNK6String6equalsEPKc>
 80a0e50:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
 80a0e54:	b960      	cbnz	r0, 80a0e70 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
 80a0e56:	6829      	ldr	r1, [r5, #0]
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
 80a0e58:	f1b8 0f00 	cmp.w	r8, #0
 80a0e5c:	d002      	beq.n	80a0e64 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x30>
 80a0e5e:	fa1f f288 	uxth.w	r2, r8
 80a0e62:	e000      	b.n	80a0e66 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32>
 80a0e64:	2250      	movs	r2, #80	; 0x50
 80a0e66:	2300      	movs	r3, #0
 80a0e68:	4620      	mov	r0, r4
 80a0e6a:	f002 f9d9 	bl	80a3220 <_ZN9TCPClient7connectEPKctm>
 80a0e6e:	e014      	b.n	80a0e9a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x66>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0e70:	4b74      	ldr	r3, [pc, #464]	; (80a1044 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>)
 80a0e72:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 80a0e76:	f105 0c14 	add.w	ip, r5, #20
 80a0e7a:	9308      	str	r3, [sp, #32]
 80a0e7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80a0e80:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80a0e84:	f8dc 3000 	ldr.w	r3, [ip]
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
 80a0e88:	fa1f f288 	uxth.w	r2, r8
 80a0e8c:	f88e 3000 	strb.w	r3, [lr]
 80a0e90:	a908      	add	r1, sp, #32
 80a0e92:	2300      	movs	r3, #0
 80a0e94:	4620      	mov	r0, r4
 80a0e96:	f002 f88b 	bl	80a2fb0 <_ZN9TCPClient7connectE9IPAddresstm>
 80a0e9a:	3000      	adds	r0, #0
 80a0e9c:	bf18      	it	ne
 80a0e9e:	2001      	movne	r0, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
 80a0ea0:	b918      	cbnz	r0, 80a0eaa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
 80a0ea2:	4620      	mov	r0, r4
 80a0ea4:	f002 f86a 	bl	80a2f7c <_ZN9TCPClient4stopEv>
        // If TCP Client can't connect to host, exit here.
        return;
 80a0ea8:	e0c8      	b.n	80a103c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x208>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
 80a0eaa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a0eac:	4620      	mov	r0, r4
 80a0eae:	f001 fbad 	bl	80a260c <_ZN5Print5printEPKc>
    client.print(" ");
 80a0eb2:	4965      	ldr	r1, [pc, #404]	; (80a1048 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x214>)
 80a0eb4:	4620      	mov	r0, r4
 80a0eb6:	f001 fba9 	bl	80a260c <_ZN5Print5printEPKc>
    client.print(aRequest.path);
 80a0eba:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80a0ebc:	4620      	mov	r0, r4
 80a0ebe:	f001 fba5 	bl	80a260c <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
 80a0ec2:	4962      	ldr	r1, [pc, #392]	; (80a104c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x218>)
 80a0ec4:	4620      	mov	r0, r4
 80a0ec6:	f001 fba1 	bl	80a260c <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
    Serial.print(" HTTP/1.0\r\n");
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
 80a0eca:	4961      	ldr	r1, [pc, #388]	; (80a1050 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x21c>)
 80a0ecc:	4620      	mov	r0, r4
 80a0ece:	4a61      	ldr	r2, [pc, #388]	; (80a1054 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x220>)
 80a0ed0:	f7ff ff8a 	bl	80a0de8 <_ZN10HttpClient10sendHeaderEPKcS1_>
 80a0ed4:	2100      	movs	r1, #0
 80a0ed6:	4628      	mov	r0, r5
 80a0ed8:	f001 fec4 	bl	80a2c64 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
 80a0edc:	b920      	cbnz	r0, 80a0ee8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
 80a0ede:	682a      	ldr	r2, [r5, #0]
 80a0ee0:	495d      	ldr	r1, [pc, #372]	; (80a1058 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x224>)
 80a0ee2:	4620      	mov	r0, r4
 80a0ee4:	f7ff ff80 	bl	80a0de8 <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
 80a0ee8:	f105 083c 	add.w	r8, r5, #60	; 0x3c
 80a0eec:	2100      	movs	r1, #0
 80a0eee:	4640      	mov	r0, r8
 80a0ef0:	f001 feb8 	bl	80a2c64 <_ZNK6String6equalsEPKc>
 80a0ef4:	b908      	cbnz	r0, 80a0efa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc6>
        sendHeader("Content-Length", (aRequest.body).length());
 80a0ef6:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80a0ef8:	e005      	b.n	80a0f06 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xd2>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
 80a0efa:	4958      	ldr	r1, [pc, #352]	; (80a105c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
 80a0efc:	9818      	ldr	r0, [sp, #96]	; 0x60
 80a0efe:	f004 f83b 	bl	80a4f78 <strcmp>
 80a0f02:	4602      	mov	r2, r0
 80a0f04:	b918      	cbnz	r0, 80a0f0e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xda>
        sendHeader("Content-Length", 0);
 80a0f06:	4956      	ldr	r1, [pc, #344]	; (80a1060 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
 80a0f08:	4620      	mov	r0, r4
 80a0f0a:	f7ff ff7f 	bl	80a0e0c <_ZN10HttpClient10sendHeaderEPKci>
    }

    if (headers != NULL)
 80a0f0e:	b15e      	cbz	r6, 80a0f28 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    {
        int i = 0;
        while (headers[i].header != NULL)
 80a0f10:	6831      	ldr	r1, [r6, #0]
 80a0f12:	b149      	cbz	r1, 80a0f28 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
        {
            if (headers[i].value != NULL) {
 80a0f14:	6872      	ldr	r2, [r6, #4]
                sendHeader(headers[i].header, headers[i].value);
 80a0f16:	4620      	mov	r0, r4
    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
        {
            if (headers[i].value != NULL) {
 80a0f18:	b112      	cbz	r2, 80a0f20 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xec>
                sendHeader(headers[i].header, headers[i].value);
 80a0f1a:	f7ff ff65 	bl	80a0de8 <_ZN10HttpClient10sendHeaderEPKcS1_>
 80a0f1e:	e001      	b.n	80a0f24 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf0>
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
    client.println(aHeaderName);
 80a0f20:	f001 fb87 	bl	80a2632 <_ZN5Print7printlnEPKc>
 80a0f24:	3608      	adds	r6, #8
    }

    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
 80a0f26:	e7f3      	b.n	80a0f10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
            i++;
        }
    }

    // Empty line to finish headers
    client.println();
 80a0f28:	4620      	mov	r0, r4
 80a0f2a:	f001 fb76 	bl	80a261a <_ZN5Print7printlnEv>
    client.flush();
 80a0f2e:	4620      	mov	r0, r4
 80a0f30:	f001 ff59 	bl	80a2de6 <_ZN9TCPClient5flushEv>
 80a0f34:	2100      	movs	r1, #0
 80a0f36:	4640      	mov	r0, r8
 80a0f38:	f001 fe94 	bl	80a2c64 <_ZNK6String6equalsEPKc>

    //
    // Send HTTP Request Body
    //

    if (aRequest.body != NULL) {
 80a0f3c:	b918      	cbnz	r0, 80a0f46 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x112>
        client.println(aRequest.body);
 80a0f3e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80a0f40:	4620      	mov	r0, r4
 80a0f42:	f001 fb76 	bl	80a2632 <_ZN5Print7printlnEPKc>
    #ifdef LOGGING
    Serial.println("HttpClient>\tEnd of HTTP Request.");
    #endif

    // clear response buffer
    memset(&buffer[0], 0, sizeof(buffer));
 80a0f46:	f104 081c 	add.w	r8, r4, #28
 80a0f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a0f4e:	2100      	movs	r1, #0
 80a0f50:	4640      	mov	r0, r8
 80a0f52:	f003 ffe0 	bl	80a4f16 <memset>
 80a0f56:	f000 fc6b 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
    // timeout or an error.

    unsigned int bufferPosition = 0;
    unsigned long lastRead = millis();
    unsigned long firstRead = millis();
    bool error = false;
 80a0f5a:	2600      	movs	r6, #0
 80a0f5c:	4681      	mov	r9, r0
    // of terminating the connection there is a delay and another attempt
    // to read data.
    // The loop exits when the connection is closed, or if there is a
    // timeout or an error.

    unsigned int bufferPosition = 0;
 80a0f5e:	4635      	mov	r5, r6
 80a0f60:	f000 fc66 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
            delay(200);
        }
    } while (client.connected() && !timeout && !error);
 80a0f64:	f241 3a88 	movw	sl, #5000	; 0x1388
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
 80a0f68:	4620      	mov	r0, r4
 80a0f6a:	f001 ffcb 	bl	80a2f04 <_ZN9TCPClient9availableEv>
 80a0f6e:	b1d8      	cbz	r0, 80a0fa8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x174>
            char c = client.read();
 80a0f70:	4620      	mov	r0, r4
 80a0f72:	f001 ff7c 	bl	80a2e6e <_ZN9TCPClient4readEv>
 80a0f76:	4683      	mov	fp, r0
 80a0f78:	f000 fc5a 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>

                break;
            }

            // Check that received character fits in buffer before storing.
            if (bufferPosition < sizeof(buffer)-1) {
 80a0f7c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80a0f80:	429d      	cmp	r5, r3
 80a0f82:	4681      	mov	r9, r0
 80a0f84:	d803      	bhi.n	80a0f8e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x15a>
                buffer[bufferPosition] = c;
 80a0f86:	1963      	adds	r3, r4, r5
 80a0f88:	f883 b01c 	strb.w	fp, [r3, #28]
 80a0f8c:	e00a      	b.n	80a0fa4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
 80a0f8e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80a0f92:	429d      	cmp	r5, r3
 80a0f94:	d106      	bne.n	80a0fa4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a0f96:	2300      	movs	r3, #0
 80a0f98:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
 80a0f9c:	4620      	mov	r0, r4
 80a0f9e:	f001 ffed 	bl	80a2f7c <_ZN9TCPClient4stopEv>
                error = true;
 80a0fa2:	2601      	movs	r6, #1

                #ifdef LOGGING
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
                #endif
            }
            bufferPosition++;
 80a0fa4:	3501      	adds	r5, #1
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
 80a0fa6:	e7df      	b.n	80a0f68 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x134>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
                #endif
            }
            bufferPosition++;
        }
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a0fa8:	1963      	adds	r3, r4, r5
 80a0faa:	7718      	strb	r0, [r3, #28]
 80a0fac:	f000 fc40 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
        }
        #endif

        // Check that there hasn't been more than 5s since last read.
        timeout = millis() - lastRead > TIMEOUT;
 80a0fb0:	ebc9 0b00 	rsb	fp, r9, r0

        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
 80a0fb4:	b926      	cbnz	r6, 80a0fc0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
 80a0fb6:	45d3      	cmp	fp, sl
 80a0fb8:	d802      	bhi.n	80a0fc0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
            delay(200);
 80a0fba:	20c8      	movs	r0, #200	; 0xc8
 80a0fbc:	f000 feae 	bl	80a1d1c <delay>
        }
    } while (client.connected() && !timeout && !error);
 80a0fc0:	4620      	mov	r0, r4
 80a0fc2:	f002 f89c 	bl	80a30fe <_ZN9TCPClient9connectedEv>
 80a0fc6:	b118      	cbz	r0, 80a0fd0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19c>
 80a0fc8:	45d3      	cmp	fp, sl
 80a0fca:	d801      	bhi.n	80a0fd0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19c>
 80a0fcc:	2e00      	cmp	r6, #0
 80a0fce:	d0cb      	beq.n	80a0f68 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x134>
    }
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
    Serial.print(millis() - firstRead);
    Serial.println("ms).");
    #endif
    client.stop();
 80a0fd0:	4620      	mov	r0, r4
 80a0fd2:	f001 ffd3 	bl	80a2f7c <_ZN9TCPClient4stopEv>

    String raw_response(buffer);
 80a0fd6:	4641      	mov	r1, r8
 80a0fd8:	4668      	mov	r0, sp
 80a0fda:	f001 fdb6 	bl	80a2b4a <_ZN6StringC1EPK19__FlashStringHelper>

    // Not super elegant way of finding the status code, but it works.
    String statusCode = raw_response.substring(9,12);
 80a0fde:	230c      	movs	r3, #12
 80a0fe0:	2209      	movs	r2, #9
 80a0fe2:	4669      	mov	r1, sp
 80a0fe4:	a804      	add	r0, sp, #16
 80a0fe6:	f001 fe61 	bl	80a2cac <_ZNK6String9substringEjj>
    #ifdef LOGGING
    Serial.print("HttpClient>\tStatus Code: ");
    Serial.println(statusCode);
    #endif

    int bodyPos = raw_response.indexOf("\r\n\r\n");
 80a0fea:	491e      	ldr	r1, [pc, #120]	; (80a1064 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
 80a0fec:	a808      	add	r0, sp, #32
 80a0fee:	f001 fdac 	bl	80a2b4a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0ff2:	a908      	add	r1, sp, #32
 80a0ff4:	4668      	mov	r0, sp
 80a0ff6:	f001 fe56 	bl	80a2ca6 <_ZNK6String7indexOfERKS_>
 80a0ffa:	4604      	mov	r4, r0
 80a0ffc:	a808      	add	r0, sp, #32
 80a0ffe:	f001 fd5d 	bl	80a2abc <_ZN6StringD1Ev>
    if (bodyPos == -1) {
 80a1002:	1c63      	adds	r3, r4, #1
 80a1004:	d014      	beq.n	80a1030 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fc>
        #endif

        return;
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
 80a1006:	1d3d      	adds	r5, r7, #4
 80a1008:	4917      	ldr	r1, [pc, #92]	; (80a1068 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
 80a100a:	4628      	mov	r0, r5
 80a100c:	f001 fdca 	bl	80a2ba4 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
 80a1010:	1d22      	adds	r2, r4, #4
 80a1012:	4669      	mov	r1, sp
 80a1014:	a808      	add	r0, sp, #32
 80a1016:	f001 fe71 	bl	80a2cfc <_ZNK6String9substringEj>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a101a:	a908      	add	r1, sp, #32
 80a101c:	4628      	mov	r0, r5
 80a101e:	f001 fdff 	bl	80a2c20 <_ZN6String6concatERKS_>
 80a1022:	a808      	add	r0, sp, #32
 80a1024:	f001 fd4a 	bl	80a2abc <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
 80a1028:	9804      	ldr	r0, [sp, #16]
 80a102a:	f003 ff57 	bl	80a4edc <atoi>
 80a102e:	6038      	str	r0, [r7, #0]
    if (bodyPos == -1) {
        #ifdef LOGGING
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
        #endif

        return;
 80a1030:	a804      	add	r0, sp, #16
 80a1032:	f001 fd43 	bl	80a2abc <_ZN6StringD1Ev>
 80a1036:	4668      	mov	r0, sp
 80a1038:	f001 fd40 	bl	80a2abc <_ZN6StringD1Ev>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
 80a103c:	b00f      	add	sp, #60	; 0x3c
 80a103e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1042:	bf00      	nop
 80a1044:	080a558c 	.word	0x080a558c
 80a1048:	080a5620 	.word	0x080a5620
 80a104c:	080a54f2 	.word	0x080a54f2
 80a1050:	080a5504 	.word	0x080a5504
 80a1054:	080a54fe 	.word	0x080a54fe
 80a1058:	080a550f 	.word	0x080a550f
 80a105c:	080a531f 	.word	0x080a531f
 80a1060:	080a5514 	.word	0x080a5514
 80a1064:	080a5523 	.word	0x080a5523
 80a1068:	080a5527 	.word	0x080a5527

080a106c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a106c:	6803      	ldr	r3, [r0, #0]
 80a106e:	b2c9      	uxtb	r1, r1
 80a1070:	689b      	ldr	r3, [r3, #8]
 80a1072:	4718      	bx	r3

080a1074 <_ZN21I2CSoilMoistureSensorC1Eh>:

/*----------------------------------------------------------------------*
 * Constructor.                                                         *
 * Optionally set sensor I2C address if different from default          *
 *----------------------------------------------------------------------*/
I2CSoilMoistureSensor::I2CSoilMoistureSensor(uint8_t addr) : sensorAddress(addr) {
 80a1074:	6001      	str	r1, [r0, #0]
  // nothing to do ... Wire.begin needs to be put outside of class
}
 80a1076:	4770      	bx	lr

080a1078 <_ZN21I2CSoilMoistureSensor10getAddressEv>:
/*----------------------------------------------------------------------*
 * Return current Address of the Sensor                                 *
 *----------------------------------------------------------------------*/
uint8_t I2CSoilMoistureSensor::getAddress() {
  return sensorAddress;
}
 80a1078:	7800      	ldrb	r0, [r0, #0]
 80a107a:	4770      	bx	lr

080a107c <_ZN21I2CSoilMoistureSensor20writeI2CRegister8bitEii>:
// debugging statements in these functions completely screw up i2C.

/*----------------------------------------------------------------------*
 * Helper method to write an 8 bit value to the sensor via I2C          *
 *----------------------------------------------------------------------*/
void I2CSoilMoistureSensor::writeI2CRegister8bit(int addr, int value) {
 80a107c:	b538      	push	{r3, r4, r5, lr}
 80a107e:	460d      	mov	r5, r1
 80a1080:	4614      	mov	r4, r2
  i2cBeginTransmission(addr);
 80a1082:	f002 fbe5 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a1086:	4629      	mov	r1, r5
 80a1088:	f001 f9ae 	bl	80a23e8 <_ZN7TwoWire17beginTransmissionEi>
  i2cWrite(value);
 80a108c:	f002 fbe0 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a1090:	4621      	mov	r1, r4
 80a1092:	f7ff ffeb 	bl	80a106c <_ZN7TwoWire5writeEi>
  isSensorReturn = i2cEndTransmission();
 80a1096:	f002 fbdb 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a109a:	f001 f9ac 	bl	80a23f6 <_ZN7TwoWire15endTransmissionEv>
 80a109e:	4b01      	ldr	r3, [pc, #4]	; (80a10a4 <_ZN21I2CSoilMoistureSensor20writeI2CRegister8bitEii+0x28>)
 80a10a0:	6018      	str	r0, [r3, #0]
 80a10a2:	bd38      	pop	{r3, r4, r5, pc}
 80a10a4:	20000610 	.word	0x20000610

080a10a8 <_ZN21I2CSoilMoistureSensor11resetSensorEv>:
/*----------------------------------------------------------------------*
 * Resets sensor. Give the sensor 0.5-1 second time to boot up after    *
 * reset.                                                               *
 *----------------------------------------------------------------------*/
void I2CSoilMoistureSensor::resetSensor() {
  writeI2CRegister8bit(sensorAddress, SOILMOISTURESENSOR_RESET);
 80a10a8:	2206      	movs	r2, #6
 80a10aa:	6801      	ldr	r1, [r0, #0]
 80a10ac:	f7ff bfe6 	b.w	80a107c <_ZN21I2CSoilMoistureSensor20writeI2CRegister8bitEii>

080a10b0 <_ZN21I2CSoilMoistureSensor5beginEv>:
}

/*----------------------------------------------------------------------*
 * Initializes anything ... it does a reset only at the moment          *
 *----------------------------------------------------------------------*/
void I2CSoilMoistureSensor::begin() {
 80a10b0:	b508      	push	{r3, lr}
  resetSensor();
 80a10b2:	f7ff fff9 	bl	80a10a8 <_ZN21I2CSoilMoistureSensor11resetSensorEv>
  // dmf 3.27.19 force this delay
  delay(1000);
}
 80a10b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 * Initializes anything ... it does a reset only at the moment          *
 *----------------------------------------------------------------------*/
void I2CSoilMoistureSensor::begin() {
  resetSensor();
  // dmf 3.27.19 force this delay
  delay(1000);
 80a10ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a10be:	f000 be2d 	b.w	80a1d1c <delay>
	...

080a10c4 <_ZN21I2CSoilMoistureSensor28readI2CRegister16bitUnsignedEii>:
}

/*----------------------------------------------------------------------*
 * Helper method to read a 16 bit unsigned value from the given register*
 *----------------------------------------------------------------------*/
unsigned int I2CSoilMoistureSensor::readI2CRegister16bitUnsigned(int addr, int reg) {
 80a10c4:	b538      	push	{r3, r4, r5, lr}
 80a10c6:	460c      	mov	r4, r1
 80a10c8:	4615      	mov	r5, r2
  i2cBeginTransmission(addr);
 80a10ca:	f002 fbc1 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a10ce:	4621      	mov	r1, r4
 80a10d0:	f001 f98a 	bl	80a23e8 <_ZN7TwoWire17beginTransmissionEi>
  i2cWrite(reg);
 80a10d4:	f002 fbbc 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a10d8:	4629      	mov	r1, r5
 80a10da:	f7ff ffc7 	bl	80a106c <_ZN7TwoWire5writeEi>
  isSensorReturn = i2cEndTransmission();
 80a10de:	f002 fbb7 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a10e2:	f001 f988 	bl	80a23f6 <_ZN7TwoWire15endTransmissionEv>
 80a10e6:	4b0c      	ldr	r3, [pc, #48]	; (80a1118 <_ZN21I2CSoilMoistureSensor28readI2CRegister16bitUnsignedEii+0x54>)
 80a10e8:	6018      	str	r0, [r3, #0]
  delay(20);
 80a10ea:	2014      	movs	r0, #20
 80a10ec:	f000 fe16 	bl	80a1d1c <delay>
  i2cRequestFrom(addr, 2);
 80a10f0:	f002 fbae 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a10f4:	4621      	mov	r1, r4
 80a10f6:	2202      	movs	r2, #2
 80a10f8:	f001 f96d 	bl	80a23d6 <_ZN7TwoWire11requestFromEii>
  unsigned int t = i2cRead() << 8;
 80a10fc:	f002 fba8 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a1100:	6803      	ldr	r3, [r0, #0]
 80a1102:	695b      	ldr	r3, [r3, #20]
 80a1104:	4798      	blx	r3
 80a1106:	0204      	lsls	r4, r0, #8
  t = t | i2cRead();
 80a1108:	f002 fba2 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a110c:	6803      	ldr	r3, [r0, #0]
 80a110e:	695b      	ldr	r3, [r3, #20]
 80a1110:	4798      	blx	r3
  return t;
}
 80a1112:	4320      	orrs	r0, r4
 80a1114:	bd38      	pop	{r3, r4, r5, pc}
 80a1116:	bf00      	nop
 80a1118:	20000610 	.word	0x20000610

080a111c <_ZN21I2CSoilMoistureSensor14getCapacitanceEv>:
 * Moisture is somewhat linear. More moisture will give you higher      *
 * reading. Normally all sensors give about 290 - 310 as value in free  *
 * air at 5V supply.                                                    *
 *----------------------------------------------------------------------*/
unsigned int I2CSoilMoistureSensor::getCapacitance() {
  return readI2CRegister16bitUnsigned(sensorAddress, SOILMOISTURESENSOR_GET_CAPACITANCE);
 80a111c:	2200      	movs	r2, #0
 80a111e:	6801      	ldr	r1, [r0, #0]
 80a1120:	f7ff bfd0 	b.w	80a10c4 <_ZN21I2CSoilMoistureSensor28readI2CRegister16bitUnsignedEii>

080a1124 <_ZN21I2CSoilMoistureSensor26readI2CRegister16bitSignedEii>:
}

/*----------------------------------------------------------------------*
 * Helper method to read a 16 bit signed value from the given register*
 *----------------------------------------------------------------------*/
int I2CSoilMoistureSensor::readI2CRegister16bitSigned(int addr, int reg) {
 80a1124:	b538      	push	{r3, r4, r5, lr}
 80a1126:	460c      	mov	r4, r1
 80a1128:	4615      	mov	r5, r2
  i2cBeginTransmission(addr);
 80a112a:	f002 fb91 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a112e:	4621      	mov	r1, r4
 80a1130:	f001 f95a 	bl	80a23e8 <_ZN7TwoWire17beginTransmissionEi>
  i2cWrite(reg);
 80a1134:	f002 fb8c 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a1138:	4629      	mov	r1, r5
 80a113a:	f7ff ff97 	bl	80a106c <_ZN7TwoWire5writeEi>
  isSensorReturn = i2cEndTransmission();
 80a113e:	f002 fb87 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a1142:	f001 f958 	bl	80a23f6 <_ZN7TwoWire15endTransmissionEv>
 80a1146:	4b0c      	ldr	r3, [pc, #48]	; (80a1178 <_ZN21I2CSoilMoistureSensor26readI2CRegister16bitSignedEii+0x54>)
 80a1148:	6018      	str	r0, [r3, #0]
  delay(20);
 80a114a:	2014      	movs	r0, #20
 80a114c:	f000 fde6 	bl	80a1d1c <delay>
  i2cRequestFrom(addr, 2);
 80a1150:	f002 fb7e 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a1154:	4621      	mov	r1, r4
 80a1156:	2202      	movs	r2, #2
 80a1158:	f001 f93d 	bl	80a23d6 <_ZN7TwoWire11requestFromEii>
  int t = i2cRead() << 8;
 80a115c:	f002 fb78 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a1160:	6803      	ldr	r3, [r0, #0]
 80a1162:	695b      	ldr	r3, [r3, #20]
 80a1164:	4798      	blx	r3
 80a1166:	0204      	lsls	r4, r0, #8
  t = t | i2cRead();
 80a1168:	f002 fb72 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a116c:	6803      	ldr	r3, [r0, #0]
 80a116e:	695b      	ldr	r3, [r3, #20]
 80a1170:	4798      	blx	r3
  return t;
}
 80a1172:	4320      	orrs	r0, r4
 80a1174:	bd38      	pop	{r3, r4, r5, pc}
 80a1176:	bf00      	nop
 80a1178:	20000610 	.word	0x20000610

080a117c <_ZN21I2CSoilMoistureSensor14getTemperatureEv>:
 * thermistor on the tip of the sensor. Calculated absolute measurement *
 * accuracy is better than 2%. The returned value is in degrees Celsius *
 * with factor 10, so need to divide by 10 to get real value            *
 *----------------------------------------------------------------------*/
int I2CSoilMoistureSensor::getTemperature() {
  return readI2CRegister16bitSigned(sensorAddress, SOILMOISTURESENSOR_GET_TEMPERATURE);
 80a117c:	2205      	movs	r2, #5
 80a117e:	6801      	ldr	r1, [r0, #0]
 80a1180:	f7ff bfd0 	b.w	80a1124 <_ZN21I2CSoilMoistureSensor26readI2CRegister16bitSignedEii>

080a1184 <_ZN21I2CSoilMoistureSensor19readI2CRegister8bitEii>:
}

/*----------------------------------------------------------------------*
 * Helper method to read a 8 bit value from the given register          *
 *----------------------------------------------------------------------*/
uint8_t I2CSoilMoistureSensor::readI2CRegister8bit(int addr, int reg) {
 80a1184:	b538      	push	{r3, r4, r5, lr}
 80a1186:	460c      	mov	r4, r1
 80a1188:	4615      	mov	r5, r2
  i2cBeginTransmission(addr);
 80a118a:	f002 fb61 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a118e:	4621      	mov	r1, r4
 80a1190:	f001 f92a 	bl	80a23e8 <_ZN7TwoWire17beginTransmissionEi>
  i2cWrite(reg);
 80a1194:	f002 fb5c 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a1198:	4629      	mov	r1, r5
 80a119a:	f7ff ff67 	bl	80a106c <_ZN7TwoWire5writeEi>
  isSensorReturn = i2cEndTransmission();
 80a119e:	f002 fb57 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a11a2:	f001 f928 	bl	80a23f6 <_ZN7TwoWire15endTransmissionEv>
 80a11a6:	4b09      	ldr	r3, [pc, #36]	; (80a11cc <_ZN21I2CSoilMoistureSensor19readI2CRegister8bitEii+0x48>)
 80a11a8:	6018      	str	r0, [r3, #0]
  delay(20);
 80a11aa:	2014      	movs	r0, #20
 80a11ac:	f000 fdb6 	bl	80a1d1c <delay>
  i2cRequestFrom(addr, 1);
 80a11b0:	f002 fb4e 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a11b4:	2201      	movs	r2, #1
 80a11b6:	4621      	mov	r1, r4
 80a11b8:	f001 f90d 	bl	80a23d6 <_ZN7TwoWire11requestFromEii>
  return i2cRead();
 80a11bc:	f002 fb48 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a11c0:	6803      	ldr	r3, [r0, #0]
 80a11c2:	695b      	ldr	r3, [r3, #20]
 80a11c4:	4798      	blx	r3
}
 80a11c6:	b2c0      	uxtb	r0, r0
 80a11c8:	bd38      	pop	{r3, r4, r5, pc}
 80a11ca:	bf00      	nop
 80a11cc:	20000610 	.word	0x20000610

080a11d0 <_ZN21I2CSoilMoistureSensor10getVersionEv>:

/*----------------------------------------------------------------------*
 * Get Firmware Version. 0x22 means 2.2                                  *
 *----------------------------------------------------------------------*/
uint8_t I2CSoilMoistureSensor::getVersion() {
  return readI2CRegister8bit(sensorAddress, SOILMOISTURESENSOR_GET_VERSION);
 80a11d0:	2207      	movs	r2, #7
 80a11d2:	6801      	ldr	r1, [r0, #0]
 80a11d4:	f7ff bfd6 	b.w	80a1184 <_ZN21I2CSoilMoistureSensor19readI2CRegister8bitEii>

080a11d8 <_GLOBAL__sub_I_isSensorReturn>:
 80a11d8:	f000 bb32 	b.w	80a1840 <HAL_Pin_Map>

080a11dc <_ZN14RunningAverageD1Ev>:
    _ar = (double*) malloc(_size * sizeof(double));
    if (_ar == NULL) _size = 0;
    clear();
}

RunningAverage::~RunningAverage()
 80a11dc:	b510      	push	{r4, lr}
 80a11de:	4604      	mov	r4, r0
{
    if (_ar != NULL) free(_ar);
 80a11e0:	6900      	ldr	r0, [r0, #16]
 80a11e2:	b108      	cbz	r0, 80a11e8 <_ZN14RunningAverageD1Ev+0xc>
 80a11e4:	f000 fd72 	bl	80a1ccc <free>
}
 80a11e8:	4620      	mov	r0, r4
 80a11ea:	bd10      	pop	{r4, pc}

080a11ec <_ZN14RunningAverage5clearEv>:

// resets all counters
void RunningAverage::clear()
{
 80a11ec:	b530      	push	{r4, r5, lr}
    _cnt = 0;
    _idx = 0;
    _sum = 0.0;
 80a11ee:	2400      	movs	r4, #0
 80a11f0:	2500      	movs	r5, #0
 80a11f2:	e9c0 4502 	strd	r4, r5, [r0, #8]
}

// resets all counters
void RunningAverage::clear()
{
    _cnt = 0;
 80a11f6:	2300      	movs	r3, #0
 80a11f8:	7043      	strb	r3, [r0, #1]
    _idx = 0;
 80a11fa:	7083      	strb	r3, [r0, #2]
    _sum = 0.0;
    for (uint8_t i = 0; i< _size; i++)
 80a11fc:	7802      	ldrb	r2, [r0, #0]
 80a11fe:	1c59      	adds	r1, r3, #1
 80a1200:	b2db      	uxtb	r3, r3
 80a1202:	429a      	cmp	r2, r3
 80a1204:	d906      	bls.n	80a1214 <_ZN14RunningAverage5clearEv+0x28>
    {
        _ar[i] = 0.0; // keeps addValue simple
 80a1206:	6902      	ldr	r2, [r0, #16]
 80a1208:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80a120c:	e9c3 4500 	strd	r4, r5, [r3]
void RunningAverage::clear()
{
    _cnt = 0;
    _idx = 0;
    _sum = 0.0;
    for (uint8_t i = 0; i< _size; i++)
 80a1210:	460b      	mov	r3, r1
 80a1212:	e7f3      	b.n	80a11fc <_ZN14RunningAverage5clearEv+0x10>
 80a1214:	bd30      	pop	{r4, r5, pc}

080a1216 <_ZN14RunningAverageC1Eh>:
//

#include "RunningAverage.h"
#include <stdlib.h>

RunningAverage::RunningAverage(uint8_t size)
 80a1216:	b510      	push	{r4, lr}
 80a1218:	4604      	mov	r4, r0
{
    _size = size;
 80a121a:	7001      	strb	r1, [r0, #0]
    _ar = (double*) malloc(_size * sizeof(double));
 80a121c:	00c8      	lsls	r0, r1, #3
 80a121e:	f000 fd4d 	bl	80a1cbc <malloc>
 80a1222:	6120      	str	r0, [r4, #16]
    if (_ar == NULL) _size = 0;
 80a1224:	b900      	cbnz	r0, 80a1228 <_ZN14RunningAverageC1Eh+0x12>
 80a1226:	7020      	strb	r0, [r4, #0]
    clear();
 80a1228:	4620      	mov	r0, r4
 80a122a:	f7ff ffdf 	bl	80a11ec <_ZN14RunningAverage5clearEv>
}
 80a122e:	4620      	mov	r0, r4
 80a1230:	bd10      	pop	{r4, pc}

080a1232 <_ZN14RunningAverage8addValueEd>:
    }
}

// adds a new value to the data-set
void RunningAverage::addValue(double value)
{
 80a1232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1234:	461f      	mov	r7, r3
    if (_ar == NULL) return;
 80a1236:	6903      	ldr	r3, [r0, #16]
    }
}

// adds a new value to the data-set
void RunningAverage::addValue(double value)
{
 80a1238:	4604      	mov	r4, r0
 80a123a:	4616      	mov	r6, r2
    if (_ar == NULL) return;
 80a123c:	b343      	cbz	r3, 80a1290 <_ZN14RunningAverage8addValueEd+0x5e>
    _sum -= _ar[_idx];
 80a123e:	7885      	ldrb	r5, [r0, #2]
 80a1240:	f100 0108 	add.w	r1, r0, #8
 80a1244:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a1248:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80a124c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a1250:	f002 fd36 	bl	80a3cc0 <__aeabi_dsub>
 80a1254:	e9c4 0102 	strd	r0, r1, [r4, #8]
    _ar[_idx] = value;
 80a1258:	e9c5 6700 	strd	r6, r7, [r5]
    _sum += _ar[_idx];
 80a125c:	78a5      	ldrb	r5, [r4, #2]
 80a125e:	6923      	ldr	r3, [r4, #16]
 80a1260:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80a1264:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80a1268:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a126c:	f002 fd2a 	bl	80a3cc4 <__adddf3>
    _idx++;
 80a1270:	3501      	adds	r5, #1
    if (_idx == _size) _idx = 0;  // faster than %
 80a1272:	7822      	ldrb	r2, [r4, #0]
{
    if (_ar == NULL) return;
    _sum -= _ar[_idx];
    _ar[_idx] = value;
    _sum += _ar[_idx];
    _idx++;
 80a1274:	b2ed      	uxtb	r5, r5
    if (_idx == _size) _idx = 0;  // faster than %
 80a1276:	4295      	cmp	r5, r2
 80a1278:	bf08      	it	eq
 80a127a:	2300      	moveq	r3, #0
{
    if (_ar == NULL) return;
    _sum -= _ar[_idx];
    _ar[_idx] = value;
    _sum += _ar[_idx];
    _idx++;
 80a127c:	70a5      	strb	r5, [r4, #2]
    if (_idx == _size) _idx = 0;  // faster than %
 80a127e:	bf08      	it	eq
 80a1280:	70a3      	strbeq	r3, [r4, #2]
    if (_cnt < _size) _cnt++;
 80a1282:	7863      	ldrb	r3, [r4, #1]
void RunningAverage::addValue(double value)
{
    if (_ar == NULL) return;
    _sum -= _ar[_idx];
    _ar[_idx] = value;
    _sum += _ar[_idx];
 80a1284:	e9c4 0102 	strd	r0, r1, [r4, #8]
    _idx++;
    if (_idx == _size) _idx = 0;  // faster than %
    if (_cnt < _size) _cnt++;
 80a1288:	429a      	cmp	r2, r3
 80a128a:	bf84      	itt	hi
 80a128c:	3301      	addhi	r3, #1
 80a128e:	7063      	strbhi	r3, [r4, #1]
 80a1290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1292 <_ZN14RunningAverage10getAverageEv>:
}

// returns the average of the data-set added sofar
double RunningAverage::getAverage()
{
 80a1292:	b510      	push	{r4, lr}
 80a1294:	4604      	mov	r4, r0
    if (_cnt == 0) return 0;
 80a1296:	7840      	ldrb	r0, [r0, #1]
 80a1298:	b140      	cbz	r0, 80a12ac <_ZN14RunningAverage10getAverageEv+0x1a>
    return _sum / _cnt;
 80a129a:	f002 fe5f 	bl	80a3f5c <__aeabi_i2d>
 80a129e:	4602      	mov	r2, r0
 80a12a0:	460b      	mov	r3, r1
 80a12a2:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80a12a6:	f002 ffe9 	bl	80a427c <__aeabi_ddiv>
 80a12aa:	bd10      	pop	{r4, pc}
}

// returns the average of the data-set added sofar
double RunningAverage::getAverage()
{
    if (_cnt == 0) return 0;
 80a12ac:	2000      	movs	r0, #0
 80a12ae:	2100      	movs	r1, #0
    return _sum / _cnt;
}
 80a12b0:	bd10      	pop	{r4, pc}

080a12b2 <_GLOBAL__sub_I__ZN14RunningAverageC2Eh>:
 80a12b2:	f000 bac5 	b.w	80a1840 <HAL_Pin_Map>

080a12b6 <_ZN8MAX17043C1Ev>:
#define MAX17043_ADDRESS  0x36

MAX17043::MAX17043()
{

}
 80a12b6:	4770      	bx	lr

080a12b8 <_ZN8MAX170437write16Eth>:
  configReg |= ((uint16_t)newCompensation << 8) | configReg;
  return write16(configReg, MAX17043_CONFIG);
}

uint8_t MAX17043::write16(uint16_t data, uint8_t address)
{
 80a12b8:	b538      	push	{r3, r4, r5, lr}
 80a12ba:	4615      	mov	r5, r2
 80a12bc:	460c      	mov	r4, r1
  uint8_t msb, lsb;
  msb = (data & 0xFF00) >> 8;
  lsb = (data & 0x00FF);
  Wire.beginTransmission(MAX17043_ADDRESS);
 80a12be:	f002 fac7 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a12c2:	2136      	movs	r1, #54	; 0x36
 80a12c4:	f001 f890 	bl	80a23e8 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);
 80a12c8:	f002 fac2 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a12cc:	6803      	ldr	r3, [r0, #0]
 80a12ce:	4629      	mov	r1, r5
 80a12d0:	689b      	ldr	r3, [r3, #8]
 80a12d2:	4798      	blx	r3
  Wire.write(msb);
 80a12d4:	f002 fabc 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a12d8:	6803      	ldr	r3, [r0, #0]
 80a12da:	0a21      	lsrs	r1, r4, #8
 80a12dc:	689b      	ldr	r3, [r3, #8]
 80a12de:	4798      	blx	r3
  Wire.write(lsb);
 80a12e0:	f002 fab6 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a12e4:	6803      	ldr	r3, [r0, #0]
 80a12e6:	b2e1      	uxtb	r1, r4
 80a12e8:	689b      	ldr	r3, [r3, #8]
 80a12ea:	4798      	blx	r3
  return (Wire.endTransmission());
 80a12ec:	f002 fab0 	bl	80a3850 <_Z19__fetch_global_Wirev>
}
 80a12f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  lsb = (data & 0x00FF);
  Wire.beginTransmission(MAX17043_ADDRESS);
  Wire.write(address);
  Wire.write(msb);
  Wire.write(lsb);
  return (Wire.endTransmission());
 80a12f4:	f001 b87f 	b.w	80a23f6 <_ZN7TwoWire15endTransmissionEv>

080a12f8 <_ZN8MAX1704310quickStartEv>:
  // same manner as initial power-up of the IC. If an application’s power-up
  // sequence is exceedingly noisy such that excess error is introduced into the
  // IC’s “first guess” of SOC, the host can issue a quick-start to reduce the
  // error. A quick-start is initiated by a rising edge on the QSTRT pin, or
  // through software by writing 4000h to MODE register.
  return write16(MAX17043_MODE_QUICKSTART, MAX17043_MODE);
 80a12f8:	2206      	movs	r2, #6
 80a12fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80a12fe:	f7ff bfdb 	b.w	80a12b8 <_ZN8MAX170437write16Eth>

080a1302 <_ZN8MAX170435resetEv>:
  return write16(configReg, MAX17043_CONFIG);
}

uint8_t MAX17043::reset()
{
  return write16(MAX17043_COMMAND_POR, MAX17043_COMMAND);
 80a1302:	22fe      	movs	r2, #254	; 0xfe
 80a1304:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 80a1308:	f7ff bfd6 	b.w	80a12b8 <_ZN8MAX170437write16Eth>

080a130c <_ZN8MAX170436read16Eh>:
  Wire.write(lsb);
  return (Wire.endTransmission());
}

uint16_t MAX17043::read16(uint8_t address)
{
 80a130c:	b510      	push	{r4, lr}
 80a130e:	460c      	mov	r4, r1
  uint8_t msb, lsb;
  int16_t timeout = 1000;

  Wire.beginTransmission(MAX17043_ADDRESS);
 80a1310:	f002 fa9e 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a1314:	2136      	movs	r1, #54	; 0x36
 80a1316:	f001 f867 	bl	80a23e8 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);
 80a131a:	f002 fa99 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a131e:	6803      	ldr	r3, [r0, #0]
 80a1320:	4621      	mov	r1, r4
 80a1322:	689b      	ldr	r3, [r3, #8]
 80a1324:	4798      	blx	r3
  Wire.endTransmission(false);
 80a1326:	f002 fa93 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a132a:	2100      	movs	r1, #0
 80a132c:	f001 f85f 	bl	80a23ee <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(MAX17043_ADDRESS, 2);
 80a1330:	f002 fa8e 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a1334:	2202      	movs	r2, #2
 80a1336:	2136      	movs	r1, #54	; 0x36
 80a1338:	f001 f84d 	bl	80a23d6 <_ZN7TwoWire11requestFromEii>
 80a133c:	f240 34e9 	movw	r4, #1001	; 0x3e9
  while ((Wire.available() < 2) && (timeout-- > 0))
 80a1340:	f002 fa86 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a1344:	6803      	ldr	r3, [r0, #0]
 80a1346:	691b      	ldr	r3, [r3, #16]
 80a1348:	4798      	blx	r3
 80a134a:	2801      	cmp	r0, #1
 80a134c:	dc06      	bgt.n	80a135c <_ZN8MAX170436read16Eh+0x50>
 80a134e:	3c01      	subs	r4, #1
 80a1350:	b2a4      	uxth	r4, r4
 80a1352:	b11c      	cbz	r4, 80a135c <_ZN8MAX170436read16Eh+0x50>
    delay(1);
 80a1354:	2001      	movs	r0, #1
 80a1356:	f000 fce1 	bl	80a1d1c <delay>
  Wire.beginTransmission(MAX17043_ADDRESS);
  Wire.write(address);
  Wire.endTransmission(false);

  Wire.requestFrom(MAX17043_ADDRESS, 2);
  while ((Wire.available() < 2) && (timeout-- > 0))
 80a135a:	e7f1      	b.n	80a1340 <_ZN8MAX170436read16Eh+0x34>
    delay(1);
  msb = Wire.read();
 80a135c:	f002 fa78 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a1360:	6803      	ldr	r3, [r0, #0]
 80a1362:	695b      	ldr	r3, [r3, #20]
 80a1364:	4798      	blx	r3
 80a1366:	4604      	mov	r4, r0
  lsb = Wire.read();
 80a1368:	f002 fa72 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a136c:	6803      	ldr	r3, [r0, #0]

  return ((uint16_t) msb << 8) | lsb;
 80a136e:	0224      	lsls	r4, r4, #8

  Wire.requestFrom(MAX17043_ADDRESS, 2);
  while ((Wire.available() < 2) && (timeout-- > 0))
    delay(1);
  msb = Wire.read();
  lsb = Wire.read();
 80a1370:	695b      	ldr	r3, [r3, #20]
 80a1372:	4798      	blx	r3

  return ((uint16_t) msb << 8) | lsb;
 80a1374:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80a1378:	b2c0      	uxtb	r0, r0
}
 80a137a:	4320      	orrs	r0, r4
 80a137c:	bd10      	pop	{r4, pc}
	...

080a1380 <_ZN8MAX1704310getVoltageEv>:
  // through software by writing 4000h to MODE register.
  return write16(MAX17043_MODE_QUICKSTART, MAX17043_MODE);
}

float MAX17043::getVoltage()
{
 80a1380:	b508      	push	{r3, lr}
  uint16_t vCell;
  vCell = read16(MAX17043_VCELL);
 80a1382:	2102      	movs	r1, #2
 80a1384:	f7ff ffc2 	bl	80a130c <_ZN8MAX170436read16Eh>
  // vCell is a 12-bit register where each bit represents 1.25mV
  vCell = (vCell) >> 4;

  return ((float) vCell / 800.0);
 80a1388:	f3c0 100f 	ubfx	r0, r0, #4, #16
 80a138c:	f003 fa4a 	bl	80a4824 <__aeabi_ui2f>
 80a1390:	4901      	ldr	r1, [pc, #4]	; (80a1398 <_ZN8MAX1704310getVoltageEv+0x18>)
 80a1392:	f003 fb53 	bl	80a4a3c <__aeabi_fdiv>
}
 80a1396:	bd08      	pop	{r3, pc}
 80a1398:	44480000 	.word	0x44480000

080a139c <_ZN8MAX170436getSOCEv>:

float MAX17043::getSOC()
{
 80a139c:	b538      	push	{r3, r4, r5, lr}
  uint16_t soc;
  float percent;
  soc = read16(MAX17043_SOC);
 80a139e:	2104      	movs	r1, #4
 80a13a0:	f7ff ffb4 	bl	80a130c <_ZN8MAX170436read16Eh>
 80a13a4:	4604      	mov	r4, r0
  percent = (soc & 0xFF00) >> 8;
 80a13a6:	f3c0 200f 	ubfx	r0, r0, #8, #16
 80a13aa:	f003 fa3f 	bl	80a482c <__aeabi_i2f>
 80a13ae:	4605      	mov	r5, r0
  percent += (float) (((uint8_t) soc) / 256.0);

  return percent;
 80a13b0:	b2e0      	uxtb	r0, r4
 80a13b2:	f002 fdd3 	bl	80a3f5c <__aeabi_i2d>
 80a13b6:	2200      	movs	r2, #0
 80a13b8:	4b04      	ldr	r3, [pc, #16]	; (80a13cc <_ZN8MAX170436getSOCEv+0x30>)
 80a13ba:	f002 fe35 	bl	80a4028 <__aeabi_dmul>
 80a13be:	f003 f92b 	bl	80a4618 <__aeabi_d2f>
 80a13c2:	4629      	mov	r1, r5
 80a13c4:	f003 f97e 	bl	80a46c4 <__addsf3>
}
 80a13c8:	bd38      	pop	{r3, r4, r5, pc}
 80a13ca:	bf00      	nop
 80a13cc:	3f700000 	.word	0x3f700000

080a13d0 <_ZN8MAX1704312setThresholdEh>:
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a13d0:	2920      	cmp	r1, #32
 80a13d2:	bfa8      	it	ge
 80a13d4:	2120      	movge	r1, #32
  threshold = 32 - threshold;
  return threshold;
}

uint8_t MAX17043::setThreshold(uint8_t percent)
{
 80a13d6:	b538      	push	{r3, r4, r5, lr}
 80a13d8:	460c      	mov	r4, r1
  // Let's convert our percent to that first:
  percent = constrain(percent, 0, 32);
  percent = 32 - percent;

  // Read config reg, so we don't modify any other values:
  uint16_t configReg = read16(MAX17043_CONFIG);
 80a13da:	210c      	movs	r1, #12
  threshold = 32 - threshold;
  return threshold;
}

uint8_t MAX17043::setThreshold(uint8_t percent)
{
 80a13dc:	4605      	mov	r5, r0
  // Let's convert our percent to that first:
  percent = constrain(percent, 0, 32);
  percent = 32 - percent;

  // Read config reg, so we don't modify any other values:
  uint16_t configReg = read16(MAX17043_CONFIG);
 80a13de:	f7ff ff95 	bl	80a130c <_ZN8MAX170436read16Eh>
  configReg &= 0xFFE0; // Mask out threshold bits
  configReg |= percent; // Add new threshold

  return write16(configReg, MAX17043_CONFIG);
 80a13e2:	f1c4 0420 	rsb	r4, r4, #32
  percent = constrain(percent, 0, 32);
  percent = 32 - percent;

  // Read config reg, so we don't modify any other values:
  uint16_t configReg = read16(MAX17043_CONFIG);
  configReg &= 0xFFE0; // Mask out threshold bits
 80a13e6:	f020 001f 	bic.w	r0, r0, #31
 80a13ea:	b281      	uxth	r1, r0
  configReg |= percent; // Add new threshold

  return write16(configReg, MAX17043_CONFIG);
 80a13ec:	b2e4      	uxtb	r4, r4
 80a13ee:	4321      	orrs	r1, r4
 80a13f0:	4628      	mov	r0, r5
}
 80a13f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Read config reg, so we don't modify any other values:
  uint16_t configReg = read16(MAX17043_CONFIG);
  configReg &= 0xFFE0; // Mask out threshold bits
  configReg |= percent; // Add new threshold

  return write16(configReg, MAX17043_CONFIG);
 80a13f6:	220c      	movs	r2, #12
 80a13f8:	f7ff bf5e 	b.w	80a12b8 <_ZN8MAX170437write16Eth>

080a13fc <_ZN8MAX170438getAlertEb>:

  return write16(configReg, MAX17043_CONFIG);
}

uint8_t MAX17043::getAlert(bool clear)
{
 80a13fc:	b538      	push	{r3, r4, r5, lr}
 80a13fe:	460d      	mov	r5, r1
  // Read config reg, so we don't modify any other values:
  uint16_t configReg = read16(MAX17043_CONFIG);
 80a1400:	210c      	movs	r1, #12

  return write16(configReg, MAX17043_CONFIG);
}

uint8_t MAX17043::getAlert(bool clear)
{
 80a1402:	4604      	mov	r4, r0
  // Read config reg, so we don't modify any other values:
  uint16_t configReg = read16(MAX17043_CONFIG);
 80a1404:	f7ff ff82 	bl	80a130c <_ZN8MAX170436read16Eh>
  if (configReg & (1<<6))
 80a1408:	f000 0340 	and.w	r3, r0, #64	; 0x40
 80a140c:	b29b      	uxth	r3, r3
 80a140e:	b143      	cbz	r3, 80a1422 <_ZN8MAX170438getAlertEb+0x26>
  {
    if (clear) // If the clear flag is set
 80a1410:	b14d      	cbz	r5, 80a1426 <_ZN8MAX170438getAlertEb+0x2a>
    {
      configReg &= ~(1<<6); // Clear ALRT bit manually.
      write16(configReg, MAX17043_CONFIG);
 80a1412:	f64f 71bf 	movw	r1, #65471	; 0xffbf
 80a1416:	220c      	movs	r2, #12
 80a1418:	4001      	ands	r1, r0
 80a141a:	4620      	mov	r0, r4
 80a141c:	f7ff ff4c 	bl	80a12b8 <_ZN8MAX170437write16Eth>
 80a1420:	e001      	b.n	80a1426 <_ZN8MAX170438getAlertEb+0x2a>
    }
    return 1;
  }

  return 0;
 80a1422:	4618      	mov	r0, r3
 80a1424:	bd38      	pop	{r3, r4, r5, pc}
    if (clear) // If the clear flag is set
    {
      configReg &= ~(1<<6); // Clear ALRT bit manually.
      write16(configReg, MAX17043_CONFIG);
    }
    return 1;
 80a1426:	2001      	movs	r0, #1
  }

  return 0;
}
 80a1428:	bd38      	pop	{r3, r4, r5, pc}

080a142a <_GLOBAL__sub_I__ZN8MAX17043C2Ev>:
 80a142a:	f000 ba09 	b.w	80a1840 <HAL_Pin_Map>
	...

080a1430 <_ZN8DogLcdhwC1Eiiiiii>:
#define theClockDivider SPI_CLOCK_DIV32
#elif defined(ARDUINO)
#define theClockDivider SPI_CLOCK_DIV4
#endif

DogLcdhw::DogLcdhw(int lcdSI, int lcdCLK, int lcdCSB, int lcdRS, int lcdRESET, int backLight) {
 80a1430:	b530      	push	{r4, r5, lr}
 80a1432:	4d0f      	ldr	r5, [pc, #60]	; (80a1470 <_ZN8DogLcdhwC1Eiiiiii+0x40>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1434:	2400      	movs	r4, #0
 80a1436:	6005      	str	r5, [r0, #0]
    // select Hardware SPI by setting lcdSI == lcdCLK
    if (lcdSI == lcdCLK) {
 80a1438:	4291      	cmp	r1, r2
#define theClockDivider SPI_CLOCK_DIV32
#elif defined(ARDUINO)
#define theClockDivider SPI_CLOCK_DIV4
#endif

DogLcdhw::DogLcdhw(int lcdSI, int lcdCLK, int lcdCSB, int lcdRS, int lcdRESET, int backLight) {
 80a143a:	f04f 0501 	mov.w	r5, #1
 80a143e:	6044      	str	r4, [r0, #4]
 80a1440:	f880 5050 	strb.w	r5, [r0, #80]	; 0x50
    // select Hardware SPI by setting lcdSI == lcdCLK
    if (lcdSI == lcdCLK) {
 80a1444:	d107      	bne.n	80a1456 <_ZN8DogLcdhwC1Eiiiiii+0x26>
        /* The SPI hardware pins MOSI (SI), SCK (CLK) and SS (CSB) are defined for the
         * Arduino (Uno) in the library <pins_arduino.h> as pins 11, 13 & 10, respectively,
         * and are defined for the Particle Core in the library <spark_wiring.h> as pins 15,
         * 13, & 12 (i.e. A5, A3 & A2), respectively. So, let's use them.
         */
        this->lcdSI = MOSI;     // Master Out Slave Input, this is sending the bits
 80a1446:	230f      	movs	r3, #15
 80a1448:	6243      	str	r3, [r0, #36]	; 0x24
        this->lcdCLK = SCK;     // Serial Clock, this is setting the timing of the bits
 80a144a:	230d      	movs	r3, #13
 80a144c:	6283      	str	r3, [r0, #40]	; 0x28
#endif

DogLcdhw::DogLcdhw(int lcdSI, int lcdCLK, int lcdCSB, int lcdRS, int lcdRESET, int backLight) {
    // select Hardware SPI by setting lcdSI == lcdCLK
    if (lcdSI == lcdCLK) {
        _hardware = true;
 80a144e:	f880 504f 	strb.w	r5, [r0, #79]	; 0x4f
         * and are defined for the Particle Core in the library <spark_wiring.h> as pins 15,
         * 13, & 12 (i.e. A5, A3 & A2), respectively. So, let's use them.
         */
        this->lcdSI = MOSI;     // Master Out Slave Input, this is sending the bits
        this->lcdCLK = SCK;     // Serial Clock, this is setting the timing of the bits
        this->lcdCSB = SS;      // Slave Select, this is telling the device it's selected
 80a1452:	230c      	movs	r3, #12
 80a1454:	e003      	b.n	80a145e <_ZN8DogLcdhwC1Eiiiiii+0x2e>
    } else {
        _hardware = false;
 80a1456:	f880 404f 	strb.w	r4, [r0, #79]	; 0x4f
        this->lcdSI=lcdSI;
 80a145a:	6241      	str	r1, [r0, #36]	; 0x24
        this->lcdCLK=lcdCLK;
 80a145c:	6282      	str	r2, [r0, #40]	; 0x28
        this->lcdCSB=lcdCSB;
 80a145e:	6303      	str	r3, [r0, #48]	; 0x30
    }
    this->lcdRS=lcdRS;          // Register Select, flags DOG controller to write data to internal RAM.
 80a1460:	9b03      	ldr	r3, [sp, #12]
 80a1462:	62c3      	str	r3, [r0, #44]	; 0x2c
    this->lcdRESET=lcdRESET;    // Reset, this provides a hardware reset. Software reset is available.
 80a1464:	9b04      	ldr	r3, [sp, #16]
 80a1466:	6343      	str	r3, [r0, #52]	; 0x34
    this->backLight=backLight;
 80a1468:	9b05      	ldr	r3, [sp, #20]
 80a146a:	6383      	str	r3, [r0, #56]	; 0x38
}
 80a146c:	bd30      	pop	{r4, r5, pc}
 80a146e:	bf00      	nop
 80a1470:	080a5530 	.word	0x080a5530

080a1474 <_ZN8DogLcdhw11spiTransferEhi>:
     */
    digitalWrite(lcdRS,LOW);
    spiTransfer(value,executionTime);
}

void DogLcdhw::spiTransfer(uint8_t value, int executionTime) {
 80a1474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1476:	4604      	mov	r4, r0
 80a1478:	460e      	mov	r6, r1

    digitalWrite(lcdCSB,LOW);
 80a147a:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 80a147c:	2100      	movs	r1, #0
     */
    digitalWrite(lcdRS,LOW);
    spiTransfer(value,executionTime);
}

void DogLcdhw::spiTransfer(uint8_t value, int executionTime) {
 80a147e:	4617      	mov	r7, r2

    digitalWrite(lcdCSB,LOW);
 80a1480:	f002 f9cd 	bl	80a381e <digitalWrite>

    if (_hardware){
 80a1484:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 80a1488:	b123      	cbz	r3, 80a1494 <_ZN8DogLcdhw11spiTransferEhi+0x20>
        // Let hardware SPI handle it
        SPI.transfer(value);
 80a148a:	4631      	mov	r1, r6
 80a148c:	4813      	ldr	r0, [pc, #76]	; (80a14dc <_ZN8DogLcdhw11spiTransferEhi+0x68>)
 80a148e:	f001 faa9 	bl	80a29e4 <_ZN8SPIClass8transferEh>
 80a1492:	e019      	b.n	80a14c8 <_ZN8DogLcdhw11spiTransferEhi+0x54>
    } else {
        // Otherwise, let the software bit-bang it
        digitalWrite(lcdCLK,HIGH);
 80a1494:	2101      	movs	r1, #1
 80a1496:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80a1498:	f002 f9c1 	bl	80a381e <digitalWrite>
        for(int i=7;i>=0;i--) {
 80a149c:	2507      	movs	r5, #7
            if(bitRead(value,i)) {
 80a149e:	fa46 f105 	asr.w	r1, r6, r5
 80a14a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a14a4:	f011 0101 	ands.w	r1, r1, #1
                digitalWrite(lcdSI,HIGH);
 80a14a8:	bf18      	it	ne
 80a14aa:	2101      	movne	r1, #1
            }
            else {
                digitalWrite(lcdSI,LOW);
 80a14ac:	b280      	uxth	r0, r0
 80a14ae:	f002 f9b6 	bl	80a381e <digitalWrite>
            }
            digitalWrite(lcdCLK,LOW);
 80a14b2:	2100      	movs	r1, #0
 80a14b4:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80a14b6:	f002 f9b2 	bl	80a381e <digitalWrite>
            digitalWrite(lcdCLK,HIGH);
 80a14ba:	2101      	movs	r1, #1
 80a14bc:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80a14be:	f002 f9ae 	bl	80a381e <digitalWrite>
        // Let hardware SPI handle it
        SPI.transfer(value);
    } else {
        // Otherwise, let the software bit-bang it
        digitalWrite(lcdCLK,HIGH);
        for(int i=7;i>=0;i--) {
 80a14c2:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 80a14c6:	d2ea      	bcs.n	80a149e <_ZN8DogLcdhw11spiTransferEhi+0x2a>
            digitalWrite(lcdCLK,LOW);
            digitalWrite(lcdCLK,HIGH);
        }
    }

    digitalWrite(lcdCSB,HIGH);
 80a14c8:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80a14ca:	2101      	movs	r1, #1
 80a14cc:	f002 f9a7 	bl	80a381e <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a14d0:	4638      	mov	r0, r7
    delayMicroseconds(executionTime);
}
 80a14d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80a14d6:	f000 b9a3 	b.w	80a1820 <HAL_Delay_Microseconds>
 80a14da:	bf00      	nop
 80a14dc:	20000adc 	.word	0x20000adc

080a14e0 <_ZN8DogLcdhw9writeCharEh>:

void DogLcdhw::ascii (char character) {
    writeChar(character);
}

void DogLcdhw::writeChar(uint8_t value) {
 80a14e0:	b538      	push	{r3, r4, r5, lr}
 80a14e2:	4604      	mov	r4, r0
 80a14e4:	460d      	mov	r5, r1
    /* Setting RS HIGH tells the controller we're
     * sending data, not a sending a command. Data
     * is written to the register address (CGRAM, or DDRAM)
     * that was last set
     */
    digitalWrite(lcdRS,HIGH);
 80a14e6:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
 80a14e8:	2101      	movs	r1, #1
 80a14ea:	f002 f998 	bl	80a381e <digitalWrite>
    spiTransfer(value,30);
 80a14ee:	4629      	mov	r1, r5
 80a14f0:	4620      	mov	r0, r4
}
 80a14f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     * sending data, not a sending a command. Data
     * is written to the register address (CGRAM, or DDRAM)
     * that was last set
     */
    digitalWrite(lcdRS,HIGH);
    spiTransfer(value,30);
 80a14f6:	221e      	movs	r2, #30
 80a14f8:	f7ff bfbc 	b.w	80a1474 <_ZN8DogLcdhw11spiTransferEhi>

080a14fc <_ZN8DogLcdhw12writeCommandEhi>:
}

void DogLcdhw::writeCommand(uint8_t value,int executionTime) {
 80a14fc:	b570      	push	{r4, r5, r6, lr}
 80a14fe:	4604      	mov	r4, r0
 80a1500:	460d      	mov	r5, r1
 80a1502:	4616      	mov	r6, r2
    /* Setting RS LOW tells the controller we're sending
     * a command, not writing data
     */
    digitalWrite(lcdRS,LOW);
 80a1504:	2100      	movs	r1, #0
 80a1506:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
 80a1508:	f002 f989 	bl	80a381e <digitalWrite>
    spiTransfer(value,executionTime);
 80a150c:	4632      	mov	r2, r6
 80a150e:	4629      	mov	r1, r5
 80a1510:	4620      	mov	r0, r4
}
 80a1512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void DogLcdhw::writeCommand(uint8_t value,int executionTime) {
    /* Setting RS LOW tells the controller we're sending
     * a command, not writing data
     */
    digitalWrite(lcdRS,LOW);
    spiTransfer(value,executionTime);
 80a1516:	f7ff bfad 	b.w	80a1474 <_ZN8DogLcdhw11spiTransferEhi>

080a151a <_ZN8DogLcdhw5clearEv>:

}

/* the following commands are all accessible through the default Instruction Table */
void DogLcdhw::clear() {
    writeCommand(0x01,1080);
 80a151a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80a151e:	2101      	movs	r1, #1
 80a1520:	f7ff bfec 	b.w	80a14fc <_ZN8DogLcdhw12writeCommandEhi>

080a1524 <_ZN8DogLcdhw16writeDisplayModeEv>:
    blinkMode=0x01;
    writeDisplayMode();
}

void DogLcdhw::writeDisplayMode() {
    writeCommand((0x08 | displayMode | cursorMode | blinkMode),30);
 80a1524:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 80a1528:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 80a152c:	221e      	movs	r2, #30
 80a152e:	430b      	orrs	r3, r1
 80a1530:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 80a1534:	f043 0308 	orr.w	r3, r3, #8
 80a1538:	4319      	orrs	r1, r3
 80a153a:	f7ff bfdf 	b.w	80a14fc <_ZN8DogLcdhw12writeCommandEhi>

080a153e <_ZN8DogLcdhw8noCursorEv>:
    displayMode=0x04;
    writeDisplayMode();
}

void DogLcdhw::noCursor() {
    cursorMode=0x00;
 80a153e:	2200      	movs	r2, #0
 80a1540:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
    writeDisplayMode();
 80a1544:	f7ff bfee 	b.w	80a1524 <_ZN8DogLcdhw16writeDisplayModeEv>

080a1548 <_ZN8DogLcdhw11leftToRightEv>:
void DogLcdhw::writeDisplayMode() {
    writeCommand((0x08 | displayMode | cursorMode | blinkMode),30);
}

void DogLcdhw::leftToRight(void) {
    entryMode|=0x02;
 80a1548:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
    writeCommand(entryMode,30);
 80a154c:	221e      	movs	r2, #30
void DogLcdhw::writeDisplayMode() {
    writeCommand((0x08 | displayMode | cursorMode | blinkMode),30);
}

void DogLcdhw::leftToRight(void) {
    entryMode|=0x02;
 80a154e:	f041 0102 	orr.w	r1, r1, #2
 80a1552:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
    writeCommand(entryMode,30);
 80a1556:	f7ff bfd1 	b.w	80a14fc <_ZN8DogLcdhw12writeCommandEhi>

080a155a <_ZN8DogLcdhw17setInstructionSetEh.part.0.constprop.7>:

void DogLcdhw::setInstructionSet(uint8_t is) {
    if(is<0 || is>3)
        return;
    uint8_t cmd=instructionSetTemplate | is;
    writeCommand(cmd,30);
 80a155a:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
 80a155e:	221e      	movs	r2, #30
 80a1560:	4319      	orrs	r1, r3
 80a1562:	f7ff bfcb 	b.w	80a14fc <_ZN8DogLcdhw12writeCommandEhi>

080a1566 <_ZN8DogLcdhw11setContrastEi>:
    writeCommand(biasAndFx,30);
}

/* set the contrast - contrast and gain (amplification ratio) are highly correlated */
void DogLcdhw::setContrast(int contrast) {
    if(contrast<0 || contrast>0x3F)
 80a1566:	293f      	cmp	r1, #63	; 0x3f
    //bias and Fx are model- and voltage- specific
    writeCommand(biasAndFx,30);
}

/* set the contrast - contrast and gain (amplification ratio) are highly correlated */
void DogLcdhw::setContrast(int contrast) {
 80a1568:	b538      	push	{r3, r4, r5, lr}
 80a156a:	4605      	mov	r5, r0
 80a156c:	460c      	mov	r4, r1
    if(contrast<0 || contrast>0x3F)
 80a156e:	d817      	bhi.n	80a15a0 <_ZN8DogLcdhw11setContrastEi+0x3a>
 80a1570:	2101      	movs	r1, #1
 80a1572:	f7ff fff2 	bl	80a155a <_ZN8DogLcdhw17setInstructionSetEh.part.0.constprop.7>

    // contrast is determined by 6 bits, written as part of two
    // commands, 0x50 and 0x70, under Instruction Table 1.
    // boosterMode (off for 5V, on for 3V3) is written during the
    // same command as the (2-bit) high-nibble of contrast
    writeCommand(0x50 | boosterMode | ((contrast>>4)&0x03), 30);
 80a1576:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
 80a157a:	4628      	mov	r0, r5
 80a157c:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80a1580:	ea41 1124 	orr.w	r1, r1, r4, asr #4
 80a1584:	221e      	movs	r2, #30
 80a1586:	b2c9      	uxtb	r1, r1
 80a1588:	f7ff ffb8 	bl	80a14fc <_ZN8DogLcdhw12writeCommandEhi>
    // now set the low-nibble of the contrast
    writeCommand((0x70 | (contrast & 0x0F)),30);
 80a158c:	f004 010f 	and.w	r1, r4, #15
 80a1590:	4628      	mov	r0, r5

}
 80a1592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // commands, 0x50 and 0x70, under Instruction Table 1.
    // boosterMode (off for 5V, on for 3V3) is written during the
    // same command as the (2-bit) high-nibble of contrast
    writeCommand(0x50 | boosterMode | ((contrast>>4)&0x03), 30);
    // now set the low-nibble of the contrast
    writeCommand((0x70 | (contrast & 0x0F)),30);
 80a1596:	221e      	movs	r2, #30
 80a1598:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 80a159c:	f7ff bfae 	b.w	80a14fc <_ZN8DogLcdhw12writeCommandEhi>
 80a15a0:	bd38      	pop	{r3, r4, r5, pc}

080a15a2 <_ZN8DogLcdhw7setGainEi>:

}

/* set the amplification ratio (gain) - gain and contrast are highly correlated */
void DogLcdhw::setGain(int gain) {
    if (gain<0 || gain>0x07)
 80a15a2:	2907      	cmp	r1, #7
    writeCommand((0x70 | (contrast & 0x0F)),30);

}

/* set the amplification ratio (gain) - gain and contrast are highly correlated */
void DogLcdhw::setGain(int gain) {
 80a15a4:	b538      	push	{r3, r4, r5, lr}
 80a15a6:	4605      	mov	r5, r0
 80a15a8:	460c      	mov	r4, r1
    if (gain<0 || gain>0x07)
 80a15aa:	d80b      	bhi.n	80a15c4 <_ZN8DogLcdhw7setGainEi+0x22>
 80a15ac:	2101      	movs	r1, #1
 80a15ae:	f7ff ffd4 	bl	80a155a <_ZN8DogLcdhw17setInstructionSetEh.part.0.constprop.7>
        return;
    // Gain is in instruction Table 1
    setInstructionSet(1);
    // The command selector is 0x60, follower control is set with
    // 0x08, and gain is determined by the three bits, 0x00->0x07
    writeCommand(0x60 | 0x08 | gain,30);
 80a15b2:	f044 0168 	orr.w	r1, r4, #104	; 0x68
 80a15b6:	4628      	mov	r0, r5

}
 80a15b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    // Gain is in instruction Table 1
    setInstructionSet(1);
    // The command selector is 0x60, follower control is set with
    // 0x08, and gain is determined by the three bits, 0x00->0x07
    writeCommand(0x60 | 0x08 | gain,30);
 80a15bc:	221e      	movs	r2, #30
 80a15be:	b2c9      	uxtb	r1, r1
 80a15c0:	f7ff bf9c 	b.w	80a14fc <_ZN8DogLcdhw12writeCommandEhi>
 80a15c4:	bd38      	pop	{r3, r4, r5, pc}

080a15c6 <_ZN8DogLcdhw12setBiasAndFxEv>:
    uint8_t cmd=instructionSetTemplate | is;
    writeCommand(cmd,30);
}

/* the following commands are all accessible through Instruction Table 1 */
void DogLcdhw::setBiasAndFx() {
 80a15c6:	b510      	push	{r4, lr}
 80a15c8:	4604      	mov	r4, r0
 80a15ca:	2101      	movs	r1, #1
 80a15cc:	f7ff ffc5 	bl	80a155a <_ZN8DogLcdhw17setInstructionSetEh.part.0.constprop.7>
    // contrast is in instruction Table 1
    setInstructionSet(1);
    //bias and Fx are model- and voltage- specific
    writeCommand(biasAndFx,30);
 80a15d0:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 80a15d4:	4620      	mov	r0, r4
}
 80a15d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/* the following commands are all accessible through Instruction Table 1 */
void DogLcdhw::setBiasAndFx() {
    // contrast is in instruction Table 1
    setInstructionSet(1);
    //bias and Fx are model- and voltage- specific
    writeCommand(biasAndFx,30);
 80a15da:	221e      	movs	r2, #30
 80a15dc:	f7ff bf8e 	b.w	80a14fc <_ZN8DogLcdhw12writeCommandEhi>

080a15e0 <_ZN8DogLcdhw5resetEv>:
    // success
    return 0;
}

/* runs (or re-runs) the controller initialization sequence */
void DogLcdhw::reset() {
 80a15e0:	b538      	push	{r3, r4, r5, lr}
 80a15e2:	4604      	mov	r4, r0

    // a hardware reset will delete any createChars() so protect created
    // characters by testing before allowing a hard reset
    if(lcdRESET!=-1 && _noCharsAdded) {
 80a15e4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a15e6:	1c43      	adds	r3, r0, #1
 80a15e8:	d00f      	beq.n	80a160a <_ZN8DogLcdhw5resetEv+0x2a>
 80a15ea:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80a15ee:	b163      	cbz	r3, 80a160a <_ZN8DogLcdhw5resetEv+0x2a>
        //If user wired the reset line, pull it low and wait for 40 millis
        digitalWrite(lcdRESET,LOW);
 80a15f0:	2100      	movs	r1, #0
 80a15f2:	b280      	uxth	r0, r0
 80a15f4:	f002 f913 	bl	80a381e <digitalWrite>
        delay(40);
 80a15f8:	2028      	movs	r0, #40	; 0x28
 80a15fa:	f000 fb8f 	bl	80a1d1c <delay>
        digitalWrite(lcdRESET,HIGH);
 80a15fe:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80a1600:	2101      	movs	r1, #1
 80a1602:	f002 f90c 	bl	80a381e <digitalWrite>
        delay(40);
 80a1606:	2028      	movs	r0, #40	; 0x28
 80a1608:	e000      	b.n	80a160c <_ZN8DogLcdhw5resetEv+0x2c>
    }
    else {
        //User wants software reset, we simply wait a bit for stable power
        delay(50);
 80a160a:	2032      	movs	r0, #50	; 0x32
 80a160c:	f000 fb86 	bl	80a1d1c <delay>
    }

    /* initialization sequence */
    // set Bias and Fx
    setBiasAndFx();
 80a1610:	4620      	mov	r0, r4
 80a1612:	f7ff ffd8 	bl	80a15c6 <_ZN8DogLcdhw12setBiasAndFxEv>
    // set Contrast
    setContrast(this->contrast);
 80a1616:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80a1618:	4620      	mov	r0, r4
 80a161a:	f7ff ffa4 	bl	80a1566 <_ZN8DogLcdhw11setContrastEi>
    // set Gain
    setGain(this->gain);
 80a161e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80a1620:	4620      	mov	r0, r4
 80a1622:	f7ff ffbe 	bl	80a15a2 <_ZN8DogLcdhw7setGainEi>
    // set Display mode to a standard setting: display on, cursor on, no blink
    displayMode=0x04;
    cursorMode=0x02;
 80a1626:	2302      	movs	r3, #2
    // set Contrast
    setContrast(this->contrast);
    // set Gain
    setGain(this->gain);
    // set Display mode to a standard setting: display on, cursor on, no blink
    displayMode=0x04;
 80a1628:	2504      	movs	r5, #4
    cursorMode=0x02;
 80a162a:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    blinkMode=0x00;
 80a162e:	2300      	movs	r3, #0
 80a1630:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    writeDisplayMode();
 80a1634:	4620      	mov	r0, r4
    // set Contrast
    setContrast(this->contrast);
    // set Gain
    setGain(this->gain);
    // set Display mode to a standard setting: display on, cursor on, no blink
    displayMode=0x04;
 80a1636:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b
    cursorMode=0x02;
    blinkMode=0x00;
    writeDisplayMode();
 80a163a:	f7ff ff73 	bl	80a1524 <_ZN8DogLcdhw16writeDisplayModeEv>
    // set Entry mode - the command selector for entry mode is 0x04, and
    // text direction methods simply modify that value.
    entryMode=0x04;
    leftToRight();
 80a163e:	4620      	mov	r0, r4
    cursorMode=0x02;
    blinkMode=0x00;
    writeDisplayMode();
    // set Entry mode - the command selector for entry mode is 0x04, and
    // text direction methods simply modify that value.
    entryMode=0x04;
 80a1640:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    leftToRight();
 80a1644:	f7ff ff80 	bl	80a1548 <_ZN8DogLcdhw11leftToRightEv>

    // finally, clear the display
    clear();
 80a1648:	4620      	mov	r0, r4

}
 80a164a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // text direction methods simply modify that value.
    entryMode=0x04;
    leftToRight();

    // finally, clear the display
    clear();
 80a164e:	f7ff bf64 	b.w	80a151a <_ZN8DogLcdhw5clearEv>
	...

080a1654 <_ZN8DogLcdhw5beginEiiii>:
    this->lcdRS=lcdRS;          // Register Select, flags DOG controller to write data to internal RAM.
    this->lcdRESET=lcdRESET;    // Reset, this provides a hardware reset. Software reset is available.
    this->backLight=backLight;
}

int DogLcdhw::begin(int model, int vcc, int contrast, int gain) {
 80a1654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1658:	4604      	mov	r4, r0
 80a165a:	460e      	mov	r6, r1

    //init all pins to go HIGH, we dont want to send any commands by accident
    pinMode(this->lcdCSB,OUTPUT);
 80a165c:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 80a165e:	2101      	movs	r1, #1
    this->lcdRS=lcdRS;          // Register Select, flags DOG controller to write data to internal RAM.
    this->lcdRESET=lcdRESET;    // Reset, this provides a hardware reset. Software reset is available.
    this->backLight=backLight;
}

int DogLcdhw::begin(int model, int vcc, int contrast, int gain) {
 80a1660:	461f      	mov	r7, r3
 80a1662:	4690      	mov	r8, r2
 80a1664:	9d06      	ldr	r5, [sp, #24]

    //init all pins to go HIGH, we dont want to send any commands by accident
    pinMode(this->lcdCSB,OUTPUT);
 80a1666:	f002 f8c9 	bl	80a37fc <pinMode>
    digitalWrite(this->lcdCSB,HIGH);
 80a166a:	2101      	movs	r1, #1
 80a166c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80a166e:	f002 f8d6 	bl	80a381e <digitalWrite>
    pinMode(this->lcdSI,OUTPUT);
 80a1672:	2101      	movs	r1, #1
 80a1674:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80a1676:	f002 f8c1 	bl	80a37fc <pinMode>
    digitalWrite(this->lcdSI,HIGH);
 80a167a:	2101      	movs	r1, #1
 80a167c:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80a167e:	f002 f8ce 	bl	80a381e <digitalWrite>
    pinMode(this->lcdCLK,OUTPUT);
 80a1682:	2101      	movs	r1, #1
 80a1684:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80a1686:	f002 f8b9 	bl	80a37fc <pinMode>
    digitalWrite(this->lcdCLK,HIGH);
 80a168a:	2101      	movs	r1, #1
 80a168c:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80a168e:	f002 f8c6 	bl	80a381e <digitalWrite>

    // if hardware connections, configure SPI
    if (_hardware) {
 80a1692:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 80a1696:	b173      	cbz	r3, 80a16b6 <_ZN8DogLcdhw5beginEiiii+0x62>
         * TESTED: ARDUINO Mode3 set, works DIV2->DIV128,
         *                 Mode0 set, fails with DIV2 and DIV4, works DIV8->DIV128
         * TESTED: SPARK   Mode3 set, fails with DIV16, works with DIV32 and DIV128
         *                 Mode0 set, fails with DIV16, works with DIV32 and DIV128
         */
        SPI.begin();
 80a1698:	484d      	ldr	r0, [pc, #308]	; (80a17d0 <_ZN8DogLcdhw5beginEiiii+0x17c>)
 80a169a:	f001 f93d 	bl	80a2918 <_ZN8SPIClass5beginEv>
        SPI.setBitOrder(MSBFIRST);
 80a169e:	2101      	movs	r1, #1
 80a16a0:	484b      	ldr	r0, [pc, #300]	; (80a17d0 <_ZN8DogLcdhw5beginEiiii+0x17c>)
 80a16a2:	f001 f93e 	bl	80a2922 <_ZN8SPIClass11setBitOrderEh>
        SPI.setDataMode(SPI_MODE3);
 80a16a6:	2103      	movs	r1, #3
 80a16a8:	4849      	ldr	r0, [pc, #292]	; (80a17d0 <_ZN8DogLcdhw5beginEiiii+0x17c>)
 80a16aa:	f001 f93d 	bl	80a2928 <_ZN8SPIClass11setDataModeEh>
        SPI.setClockDivider(theClockDivider);
 80a16ae:	2120      	movs	r1, #32
 80a16b0:	4847      	ldr	r0, [pc, #284]	; (80a17d0 <_ZN8DogLcdhw5beginEiiii+0x17c>)
 80a16b2:	f001 f983 	bl	80a29bc <_ZN8SPIClass15setClockDividerEh>
    }

    pinMode(this->lcdRS,OUTPUT);
 80a16b6:	2101      	movs	r1, #1
 80a16b8:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80a16ba:	f002 f89f 	bl	80a37fc <pinMode>
    digitalWrite(this->lcdRS,HIGH);
 80a16be:	2101      	movs	r1, #1
 80a16c0:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80a16c2:	f002 f8ac 	bl	80a381e <digitalWrite>

    if(this->lcdRESET!=-1) {
 80a16c6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80a16c8:	1c41      	adds	r1, r0, #1
 80a16ca:	d007      	beq.n	80a16dc <_ZN8DogLcdhw5beginEiiii+0x88>
        pinMode(this->lcdRESET,OUTPUT);
 80a16cc:	2101      	movs	r1, #1
 80a16ce:	b280      	uxth	r0, r0
 80a16d0:	f002 f894 	bl	80a37fc <pinMode>
        digitalWrite(this->lcdRESET,HIGH);
 80a16d4:	2101      	movs	r1, #1
 80a16d6:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80a16d8:	f002 f8a1 	bl	80a381e <digitalWrite>
    }

    if(this->backLight!=-1) {
 80a16dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80a16de:	1c42      	adds	r2, r0, #1
 80a16e0:	d007      	beq.n	80a16f2 <_ZN8DogLcdhw5beginEiiii+0x9e>
        pinMode(this->backLight,OUTPUT);
 80a16e2:	2101      	movs	r1, #1
 80a16e4:	b280      	uxth	r0, r0
 80a16e6:	f002 f889 	bl	80a37fc <pinMode>
        digitalWrite(this->backLight,LOW);
 80a16ea:	2100      	movs	r1, #0
 80a16ec:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 80a16ee:	f002 f896 	bl	80a381e <digitalWrite>
    }

    // set all model-specific parameters here
    if(model==DOG_LCDhw_M081) {
 80a16f2:	2e01      	cmp	r6, #1
 80a16f4:	d110      	bne.n	80a1718 <_ZN8DogLcdhw5beginEiiii+0xc4>
        this->model=model;
        // model-dependent parameters
        rows=1;
        cols=8;
 80a16f6:	2308      	movs	r3, #8
 80a16f8:	6123      	str	r3, [r4, #16]
        memSize=80;
 80a16fa:	2350      	movs	r3, #80	; 0x50
 80a16fc:	6163      	str	r3, [r4, #20]
        startAddress[0]=0;
 80a16fe:	2300      	movs	r3, #0
 80a1700:	61a3      	str	r3, [r4, #24]
        startAddress[1]=-1;
 80a1702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a1706:	61e3      	str	r3, [r4, #28]
        startAddress[2]=-1;
 80a1708:	6223      	str	r3, [r4, #32]
        // dmf - new
        biasAndFx = 0x14;
 80a170a:	2314      	movs	r3, #20
 80a170c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        digitalWrite(this->backLight,LOW);
    }

    // set all model-specific parameters here
    if(model==DOG_LCDhw_M081) {
        this->model=model;
 80a1710:	60a6      	str	r6, [r4, #8]
        // model-dependent parameters
        rows=1;
 80a1712:	60e6      	str	r6, [r4, #12]
        startAddress[1]=-1;
        startAddress[2]=-1;
        // dmf - new
        biasAndFx = 0x14;
        //8-bit,1-line
        instructionSetTemplate=(uint8_t)0x30;
 80a1714:	2330      	movs	r3, #48	; 0x30
 80a1716:	e024      	b.n	80a1762 <_ZN8DogLcdhw5beginEiiii+0x10e>
    }
    else if(model==DOG_LCDhw_M162) {
 80a1718:	2e02      	cmp	r6, #2
 80a171a:	d10e      	bne.n	80a173a <_ZN8DogLcdhw5beginEiiii+0xe6>
        this->model=model;
        // model-dependent parameters
        rows=2;
        cols=16;
 80a171c:	2310      	movs	r3, #16
 80a171e:	6123      	str	r3, [r4, #16]
        memSize=40;
 80a1720:	2328      	movs	r3, #40	; 0x28
 80a1722:	6163      	str	r3, [r4, #20]
        startAddress[0]=0;
 80a1724:	2300      	movs	r3, #0
 80a1726:	61a3      	str	r3, [r4, #24]
        startAddress[1]=0x40;
 80a1728:	2340      	movs	r3, #64	; 0x40
 80a172a:	61e3      	str	r3, [r4, #28]
        startAddress[2]=-1;
 80a172c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a1730:	6223      	str	r3, [r4, #32]
        biasAndFx = 0x14;
        //8-bit,1-line
        instructionSetTemplate=(uint8_t)0x30;
    }
    else if(model==DOG_LCDhw_M162) {
        this->model=model;
 80a1732:	60a6      	str	r6, [r4, #8]
        // model-dependent parameters
        rows=2;
 80a1734:	60e6      	str	r6, [r4, #12]
        memSize=40;
        startAddress[0]=0;
        startAddress[1]=0x40;
        startAddress[2]=-1;
        // dmf - new
        biasAndFx = 0x14;
 80a1736:	2314      	movs	r3, #20
 80a1738:	e010      	b.n	80a175c <_ZN8DogLcdhw5beginEiiii+0x108>
        //8-bit,2-line
        instructionSetTemplate=(uint8_t)0x38;
    }
    else if(model==DOG_LCDhw_M163) {
 80a173a:	2e03      	cmp	r6, #3
 80a173c:	d003      	beq.n	80a1746 <_ZN8DogLcdhw5beginEiiii+0xf2>
        //8-bit,3-line
        instructionSetTemplate=(uint8_t)0x38;
    }
    else {
        //unknown or unsupported model
        return -1;
 80a173e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    else if(model==DOG_LCDhw_M163) {
        this->model=model;
        // model-dependent parameters
        rows=3;
        cols=16;
 80a1746:	2310      	movs	r3, #16
 80a1748:	6123      	str	r3, [r4, #16]
        memSize=16;
 80a174a:	6163      	str	r3, [r4, #20]
        startAddress[0]=0;
 80a174c:	2200      	movs	r2, #0
        startAddress[1]=0x10;
 80a174e:	61e3      	str	r3, [r4, #28]
        startAddress[2]=0x20;
 80a1750:	2320      	movs	r3, #32
 80a1752:	6223      	str	r3, [r4, #32]
        biasAndFx = 0x14;
        //8-bit,2-line
        instructionSetTemplate=(uint8_t)0x38;
    }
    else if(model==DOG_LCDhw_M163) {
        this->model=model;
 80a1754:	60a6      	str	r6, [r4, #8]
        // model-dependent parameters
        rows=3;
 80a1756:	60e6      	str	r6, [r4, #12]
        cols=16;
        memSize=16;
        startAddress[0]=0;
 80a1758:	61a2      	str	r2, [r4, #24]
        startAddress[1]=0x10;
        startAddress[2]=0x20;
        // dmf - new
        biasAndFx = 0x15;
 80a175a:	2315      	movs	r3, #21
 80a175c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        //8-bit,3-line
        instructionSetTemplate=(uint8_t)0x38;
 80a1760:	2338      	movs	r3, #56	; 0x38
 80a1762:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        //unknown or unsupported model
        return -1;
    }

    // and set all voltage-depedendent parameters here
    if (vcc==DOG_LCDhw_VCC_5V) {
 80a1766:	f1b8 0f00 	cmp.w	r8, #0
 80a176a:	d10f      	bne.n	80a178c <_ZN8DogLcdhw5beginEiiii+0x138>
        this->vcc=vcc;
        // dmf - new
        boosterMode = 0x00;
        biasAndFx |= 0x08;
 80a176c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        return -1;
    }

    // and set all voltage-depedendent parameters here
    if (vcc==DOG_LCDhw_VCC_5V) {
        this->vcc=vcc;
 80a1770:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
        // dmf - new
        boosterMode = 0x00;
        biasAndFx |= 0x08;
 80a1774:	f043 0308 	orr.w	r3, r3, #8
 80a1778:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        // set default contrast and gain (amplification ratio)
        if (contrast == -1){
 80a177c:	1c7b      	adds	r3, r7, #1

    // and set all voltage-depedendent parameters here
    if (vcc==DOG_LCDhw_VCC_5V) {
        this->vcc=vcc;
        // dmf - new
        boosterMode = 0x00;
 80a177e:	f884 8049 	strb.w	r8, [r4, #73]	; 0x49
        biasAndFx |= 0x08;
        // set default contrast and gain (amplification ratio)
        if (contrast == -1){
 80a1782:	d01e      	beq.n	80a17c2 <_ZN8DogLcdhw5beginEiiii+0x16e>
            // set a default that seems to work for 5V
            contrast = GOOD_5V_CONTRAST;
        }
        if (gain == -1) {
            // set a default that seems to work for 5V
            gain = GOOD_5V_GAIN;
 80a1784:	1c6e      	adds	r6, r5, #1
 80a1786:	bf08      	it	eq
 80a1788:	2502      	moveq	r5, #2
 80a178a:	e00c      	b.n	80a17a6 <_ZN8DogLcdhw5beginEiiii+0x152>
        }
    } else if (vcc==DOG_LCDhw_VCC_3V3) {
 80a178c:	f1b8 0f01 	cmp.w	r8, #1
 80a1790:	d1d5      	bne.n	80a173e <_ZN8DogLcdhw5beginEiiii+0xea>
        this->vcc=vcc;
        // dmf - new
        boosterMode = 0x04;
 80a1792:	2304      	movs	r3, #4
        // set default contrast and gain (amplification ratio)
        if (contrast == -1){
 80a1794:	1c78      	adds	r0, r7, #1
        if (gain == -1) {
            // set a default that seems to work for 5V
            gain = GOOD_5V_GAIN;
        }
    } else if (vcc==DOG_LCDhw_VCC_3V3) {
        this->vcc=vcc;
 80a1796:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
        // dmf - new
        boosterMode = 0x04;
 80a179a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
        // set default contrast and gain (amplification ratio)
        if (contrast == -1){
 80a179e:	d005      	beq.n	80a17ac <_ZN8DogLcdhw5beginEiiii+0x158>
            // set a default that seems to work for 3V3
            contrast = GOOD_3V3_CONTRAST;
        }
        if (gain == -1) {
            // set a default that seems to work for 3V3
            gain = GOOD_3V3_GAIN;
 80a17a0:	1c69      	adds	r1, r5, #1
 80a17a2:	bf08      	it	eq
 80a17a4:	2503      	moveq	r5, #3
    } else {
        //unknown or unsupported supply voltage
        return -1;
    }

    if(contrast < 0 || contrast> 0x3F) {
 80a17a6:	2f3f      	cmp	r7, #63	; 0x3f
 80a17a8:	d903      	bls.n	80a17b2 <_ZN8DogLcdhw5beginEiiii+0x15e>
 80a17aa:	e7c8      	b.n	80a173e <_ZN8DogLcdhw5beginEiiii+0xea>
        // set default contrast and gain (amplification ratio)
        if (contrast == -1){
            // set a default that seems to work for 3V3
            contrast = GOOD_3V3_CONTRAST;
        }
        if (gain == -1) {
 80a17ac:	1c6b      	adds	r3, r5, #1
 80a17ae:	d00d      	beq.n	80a17cc <_ZN8DogLcdhw5beginEiiii+0x178>
        // dmf - new
        boosterMode = 0x04;
        // set default contrast and gain (amplification ratio)
        if (contrast == -1){
            // set a default that seems to work for 3V3
            contrast = GOOD_3V3_CONTRAST;
 80a17b0:	2732      	movs	r7, #50	; 0x32
    }
    this->contrast=contrast;
    this->gain=gain;

    // the reset() method does the actual display initialization
    reset();
 80a17b2:	4620      	mov	r0, r4

    if(contrast < 0 || contrast> 0x3F) {
        //contrast is outside the valid range
        return -1;
    }
    this->contrast=contrast;
 80a17b4:	6427      	str	r7, [r4, #64]	; 0x40
    this->gain=gain;
 80a17b6:	6465      	str	r5, [r4, #68]	; 0x44

    // the reset() method does the actual display initialization
    reset();
 80a17b8:	f7ff ff12 	bl	80a15e0 <_ZN8DogLcdhw5resetEv>

    // success
    return 0;
 80a17bc:	2000      	movs	r0, #0
 80a17be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        // set default contrast and gain (amplification ratio)
        if (contrast == -1){
            // set a default that seems to work for 5V
            contrast = GOOD_5V_CONTRAST;
        }
        if (gain == -1) {
 80a17c2:	1c6a      	adds	r2, r5, #1
            // set a default that seems to work for 5V
            gain = GOOD_5V_GAIN;
 80a17c4:	bf08      	it	eq
 80a17c6:	2502      	moveq	r5, #2
        boosterMode = 0x00;
        biasAndFx |= 0x08;
        // set default contrast and gain (amplification ratio)
        if (contrast == -1){
            // set a default that seems to work for 5V
            contrast = GOOD_5V_CONTRAST;
 80a17c8:	2728      	movs	r7, #40	; 0x28
 80a17ca:	e7f2      	b.n	80a17b2 <_ZN8DogLcdhw5beginEiiii+0x15e>
            // set a default that seems to work for 3V3
            contrast = GOOD_3V3_CONTRAST;
        }
        if (gain == -1) {
            // set a default that seems to work for 3V3
            gain = GOOD_3V3_GAIN;
 80a17cc:	2503      	movs	r5, #3
 80a17ce:	e7ef      	b.n	80a17b0 <_ZN8DogLcdhw5beginEiiii+0x15c>
 80a17d0:	20000adc 	.word	0x20000adc

080a17d4 <_ZN8DogLcdhw9setCursorEii>:

void DogLcdhw::home() {
    writeCommand(0x02,1080);
}

void DogLcdhw::setCursor(int col, int row) {
 80a17d4:	b410      	push	{r4}
    if(col>=memSize || row>=rows) {
 80a17d6:	6944      	ldr	r4, [r0, #20]
 80a17d8:	428c      	cmp	r4, r1
 80a17da:	dd0d      	ble.n	80a17f8 <_ZN8DogLcdhw9setCursorEii+0x24>
 80a17dc:	68c4      	ldr	r4, [r0, #12]
 80a17de:	4294      	cmp	r4, r2
 80a17e0:	dd0a      	ble.n	80a17f8 <_ZN8DogLcdhw9setCursorEii+0x24>
	//not a valid cursor position
	return;
    }
    int address=(startAddress[row]+col) & 0x7F;
 80a17e2:	3206      	adds	r2, #6
    writeCommand(0x80|address,30);
 80a17e4:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
}
 80a17e8:	bc10      	pop	{r4}
    if(col>=memSize || row>=rows) {
	//not a valid cursor position
	return;
    }
    int address=(startAddress[row]+col) & 0x7F;
    writeCommand(0x80|address,30);
 80a17ea:	4419      	add	r1, r3
 80a17ec:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80a17f0:	221e      	movs	r2, #30
 80a17f2:	b2c9      	uxtb	r1, r1
 80a17f4:	f7ff be82 	b.w	80a14fc <_ZN8DogLcdhw12writeCommandEhi>
}
 80a17f8:	bc10      	pop	{r4}
 80a17fa:	4770      	bx	lr

080a17fc <_GLOBAL__sub_I__ZN8DogLcdhwC2Eiiiiii>:
 80a17fc:	f000 b820 	b.w	80a1840 <HAL_Pin_Map>

080a1800 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1800:	b508      	push	{r3, lr}
 80a1802:	4b02      	ldr	r3, [pc, #8]	; (80a180c <os_mutex_create+0xc>)
 80a1804:	681b      	ldr	r3, [r3, #0]
 80a1806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1808:	9301      	str	r3, [sp, #4]
 80a180a:	bd08      	pop	{r3, pc}
 80a180c:	080601d0 	.word	0x080601d0

080a1810 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1810:	b508      	push	{r3, lr}
 80a1812:	4b02      	ldr	r3, [pc, #8]	; (80a181c <HAL_RNG_GetRandomNumber+0xc>)
 80a1814:	681b      	ldr	r3, [r3, #0]
 80a1816:	685b      	ldr	r3, [r3, #4]
 80a1818:	9301      	str	r3, [sp, #4]
 80a181a:	bd08      	pop	{r3, pc}
 80a181c:	0806019c 	.word	0x0806019c

080a1820 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1820:	b508      	push	{r3, lr}
 80a1822:	4b02      	ldr	r3, [pc, #8]	; (80a182c <HAL_Delay_Microseconds+0xc>)
 80a1824:	681b      	ldr	r3, [r3, #0]
 80a1826:	68db      	ldr	r3, [r3, #12]
 80a1828:	9301      	str	r3, [sp, #4]
 80a182a:	bd08      	pop	{r3, pc}
 80a182c:	0806019c 	.word	0x0806019c

080a1830 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1830:	b508      	push	{r3, lr}
 80a1832:	4b02      	ldr	r3, [pc, #8]	; (80a183c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1834:	681b      	ldr	r3, [r3, #0]
 80a1836:	695b      	ldr	r3, [r3, #20]
 80a1838:	9301      	str	r3, [sp, #4]
 80a183a:	bd08      	pop	{r3, pc}
 80a183c:	0806019c 	.word	0x0806019c

080a1840 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1840:	b508      	push	{r3, lr}
 80a1842:	4b02      	ldr	r3, [pc, #8]	; (80a184c <HAL_Pin_Map+0xc>)
 80a1844:	681b      	ldr	r3, [r3, #0]
 80a1846:	681b      	ldr	r3, [r3, #0]
 80a1848:	9301      	str	r3, [sp, #4]
 80a184a:	bd08      	pop	{r3, pc}
 80a184c:	080601b0 	.word	0x080601b0

080a1850 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1850:	b508      	push	{r3, lr}
 80a1852:	4b02      	ldr	r3, [pc, #8]	; (80a185c <HAL_Pin_Mode+0xc>)
 80a1854:	681b      	ldr	r3, [r3, #0]
 80a1856:	689b      	ldr	r3, [r3, #8]
 80a1858:	9301      	str	r3, [sp, #4]
 80a185a:	bd08      	pop	{r3, pc}
 80a185c:	080601b0 	.word	0x080601b0

080a1860 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1860:	b508      	push	{r3, lr}
 80a1862:	4b02      	ldr	r3, [pc, #8]	; (80a186c <HAL_Get_Pin_Mode+0xc>)
 80a1864:	681b      	ldr	r3, [r3, #0]
 80a1866:	68db      	ldr	r3, [r3, #12]
 80a1868:	9301      	str	r3, [sp, #4]
 80a186a:	bd08      	pop	{r3, pc}
 80a186c:	080601b0 	.word	0x080601b0

080a1870 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1870:	b508      	push	{r3, lr}
 80a1872:	4b02      	ldr	r3, [pc, #8]	; (80a187c <HAL_GPIO_Write+0xc>)
 80a1874:	681b      	ldr	r3, [r3, #0]
 80a1876:	691b      	ldr	r3, [r3, #16]
 80a1878:	9301      	str	r3, [sp, #4]
 80a187a:	bd08      	pop	{r3, pc}
 80a187c:	080601b0 	.word	0x080601b0

080a1880 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1880:	b508      	push	{r3, lr}
 80a1882:	4b02      	ldr	r3, [pc, #8]	; (80a188c <HAL_I2C_Begin+0xc>)
 80a1884:	681b      	ldr	r3, [r3, #0]
 80a1886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1888:	9301      	str	r3, [sp, #4]
 80a188a:	bd08      	pop	{r3, pc}
 80a188c:	080601ac 	.word	0x080601ac

080a1890 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1890:	b508      	push	{r3, lr}
 80a1892:	4b02      	ldr	r3, [pc, #8]	; (80a189c <HAL_I2C_Request_Data+0xc>)
 80a1894:	681b      	ldr	r3, [r3, #0]
 80a1896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1898:	9301      	str	r3, [sp, #4]
 80a189a:	bd08      	pop	{r3, pc}
 80a189c:	080601ac 	.word	0x080601ac

080a18a0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a18a0:	b508      	push	{r3, lr}
 80a18a2:	4b02      	ldr	r3, [pc, #8]	; (80a18ac <HAL_I2C_Begin_Transmission+0xc>)
 80a18a4:	681b      	ldr	r3, [r3, #0]
 80a18a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a18a8:	9301      	str	r3, [sp, #4]
 80a18aa:	bd08      	pop	{r3, pc}
 80a18ac:	080601ac 	.word	0x080601ac

080a18b0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a18b0:	b508      	push	{r3, lr}
 80a18b2:	4b02      	ldr	r3, [pc, #8]	; (80a18bc <HAL_I2C_End_Transmission+0xc>)
 80a18b4:	681b      	ldr	r3, [r3, #0]
 80a18b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a18b8:	9301      	str	r3, [sp, #4]
 80a18ba:	bd08      	pop	{r3, pc}
 80a18bc:	080601ac 	.word	0x080601ac

080a18c0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a18c0:	b508      	push	{r3, lr}
 80a18c2:	4b02      	ldr	r3, [pc, #8]	; (80a18cc <HAL_I2C_Write_Data+0xc>)
 80a18c4:	681b      	ldr	r3, [r3, #0]
 80a18c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a18c8:	9301      	str	r3, [sp, #4]
 80a18ca:	bd08      	pop	{r3, pc}
 80a18cc:	080601ac 	.word	0x080601ac

080a18d0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a18d0:	b508      	push	{r3, lr}
 80a18d2:	4b02      	ldr	r3, [pc, #8]	; (80a18dc <HAL_I2C_Available_Data+0xc>)
 80a18d4:	681b      	ldr	r3, [r3, #0]
 80a18d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a18d8:	9301      	str	r3, [sp, #4]
 80a18da:	bd08      	pop	{r3, pc}
 80a18dc:	080601ac 	.word	0x080601ac

080a18e0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a18e0:	b508      	push	{r3, lr}
 80a18e2:	4b02      	ldr	r3, [pc, #8]	; (80a18ec <HAL_I2C_Read_Data+0xc>)
 80a18e4:	681b      	ldr	r3, [r3, #0]
 80a18e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a18e8:	9301      	str	r3, [sp, #4]
 80a18ea:	bd08      	pop	{r3, pc}
 80a18ec:	080601ac 	.word	0x080601ac

080a18f0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a18f0:	b508      	push	{r3, lr}
 80a18f2:	4b02      	ldr	r3, [pc, #8]	; (80a18fc <HAL_I2C_Peek_Data+0xc>)
 80a18f4:	681b      	ldr	r3, [r3, #0]
 80a18f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a18f8:	9301      	str	r3, [sp, #4]
 80a18fa:	bd08      	pop	{r3, pc}
 80a18fc:	080601ac 	.word	0x080601ac

080a1900 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1900:	b508      	push	{r3, lr}
 80a1902:	4b02      	ldr	r3, [pc, #8]	; (80a190c <HAL_I2C_Flush_Data+0xc>)
 80a1904:	681b      	ldr	r3, [r3, #0]
 80a1906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1908:	9301      	str	r3, [sp, #4]
 80a190a:	bd08      	pop	{r3, pc}
 80a190c:	080601ac 	.word	0x080601ac

080a1910 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1910:	b508      	push	{r3, lr}
 80a1912:	4b02      	ldr	r3, [pc, #8]	; (80a191c <HAL_I2C_Is_Enabled+0xc>)
 80a1914:	681b      	ldr	r3, [r3, #0]
 80a1916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1918:	9301      	str	r3, [sp, #4]
 80a191a:	bd08      	pop	{r3, pc}
 80a191c:	080601ac 	.word	0x080601ac

080a1920 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1920:	b508      	push	{r3, lr}
 80a1922:	4b03      	ldr	r3, [pc, #12]	; (80a1930 <HAL_I2C_Init+0x10>)
 80a1924:	681b      	ldr	r3, [r3, #0]
 80a1926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a192a:	9301      	str	r3, [sp, #4]
 80a192c:	bd08      	pop	{r3, pc}
 80a192e:	0000      	.short	0x0000
 80a1930:	080601ac 	.word	0x080601ac

080a1934 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a1934:	b508      	push	{r3, lr}
 80a1936:	4b02      	ldr	r3, [pc, #8]	; (80a1940 <socket_active_status+0xc>)
 80a1938:	681b      	ldr	r3, [r3, #0]
 80a193a:	681b      	ldr	r3, [r3, #0]
 80a193c:	9301      	str	r3, [sp, #4]
 80a193e:	bd08      	pop	{r3, pc}
 80a1940:	080601bc 	.word	0x080601bc

080a1944 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a1944:	b508      	push	{r3, lr}
 80a1946:	4b02      	ldr	r3, [pc, #8]	; (80a1950 <socket_handle_valid+0xc>)
 80a1948:	681b      	ldr	r3, [r3, #0]
 80a194a:	685b      	ldr	r3, [r3, #4]
 80a194c:	9301      	str	r3, [sp, #4]
 80a194e:	bd08      	pop	{r3, pc}
 80a1950:	080601bc 	.word	0x080601bc

080a1954 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a1954:	b508      	push	{r3, lr}
 80a1956:	4b02      	ldr	r3, [pc, #8]	; (80a1960 <socket_create+0xc>)
 80a1958:	681b      	ldr	r3, [r3, #0]
 80a195a:	689b      	ldr	r3, [r3, #8]
 80a195c:	9301      	str	r3, [sp, #4]
 80a195e:	bd08      	pop	{r3, pc}
 80a1960:	080601bc 	.word	0x080601bc

080a1964 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a1964:	b508      	push	{r3, lr}
 80a1966:	4b02      	ldr	r3, [pc, #8]	; (80a1970 <socket_connect+0xc>)
 80a1968:	681b      	ldr	r3, [r3, #0]
 80a196a:	68db      	ldr	r3, [r3, #12]
 80a196c:	9301      	str	r3, [sp, #4]
 80a196e:	bd08      	pop	{r3, pc}
 80a1970:	080601bc 	.word	0x080601bc

080a1974 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a1974:	b508      	push	{r3, lr}
 80a1976:	4b02      	ldr	r3, [pc, #8]	; (80a1980 <socket_receive+0xc>)
 80a1978:	681b      	ldr	r3, [r3, #0]
 80a197a:	691b      	ldr	r3, [r3, #16]
 80a197c:	9301      	str	r3, [sp, #4]
 80a197e:	bd08      	pop	{r3, pc}
 80a1980:	080601bc 	.word	0x080601bc

080a1984 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a1984:	b508      	push	{r3, lr}
 80a1986:	4b02      	ldr	r3, [pc, #8]	; (80a1990 <socket_close+0xc>)
 80a1988:	681b      	ldr	r3, [r3, #0]
 80a198a:	6a1b      	ldr	r3, [r3, #32]
 80a198c:	9301      	str	r3, [sp, #4]
 80a198e:	bd08      	pop	{r3, pc}
 80a1990:	080601bc 	.word	0x080601bc

080a1994 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a1994:	b508      	push	{r3, lr}
 80a1996:	4b02      	ldr	r3, [pc, #8]	; (80a19a0 <socket_handle_invalid+0xc>)
 80a1998:	681b      	ldr	r3, [r3, #0]
 80a199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a199c:	9301      	str	r3, [sp, #4]
 80a199e:	bd08      	pop	{r3, pc}
 80a19a0:	080601bc 	.word	0x080601bc

080a19a4 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a19a4:	b508      	push	{r3, lr}
 80a19a6:	4b02      	ldr	r3, [pc, #8]	; (80a19b0 <socket_send_ex+0xc>)
 80a19a8:	681b      	ldr	r3, [r3, #0]
 80a19aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a19ac:	9301      	str	r3, [sp, #4]
 80a19ae:	bd08      	pop	{r3, pc}
 80a19b0:	080601bc 	.word	0x080601bc

080a19b4 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a19b4:	b508      	push	{r3, lr}
 80a19b6:	4b02      	ldr	r3, [pc, #8]	; (80a19c0 <HAL_SPI_Begin+0xc>)
 80a19b8:	681b      	ldr	r3, [r3, #0]
 80a19ba:	681b      	ldr	r3, [r3, #0]
 80a19bc:	9301      	str	r3, [sp, #4]
 80a19be:	bd08      	pop	{r3, pc}
 80a19c0:	080601b4 	.word	0x080601b4

080a19c4 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a19c4:	b508      	push	{r3, lr}
 80a19c6:	4b02      	ldr	r3, [pc, #8]	; (80a19d0 <HAL_SPI_Set_Bit_Order+0xc>)
 80a19c8:	681b      	ldr	r3, [r3, #0]
 80a19ca:	689b      	ldr	r3, [r3, #8]
 80a19cc:	9301      	str	r3, [sp, #4]
 80a19ce:	bd08      	pop	{r3, pc}
 80a19d0:	080601b4 	.word	0x080601b4

080a19d4 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a19d4:	b508      	push	{r3, lr}
 80a19d6:	4b02      	ldr	r3, [pc, #8]	; (80a19e0 <HAL_SPI_Set_Data_Mode+0xc>)
 80a19d8:	681b      	ldr	r3, [r3, #0]
 80a19da:	68db      	ldr	r3, [r3, #12]
 80a19dc:	9301      	str	r3, [sp, #4]
 80a19de:	bd08      	pop	{r3, pc}
 80a19e0:	080601b4 	.word	0x080601b4

080a19e4 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a19e4:	b508      	push	{r3, lr}
 80a19e6:	4b02      	ldr	r3, [pc, #8]	; (80a19f0 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a19e8:	681b      	ldr	r3, [r3, #0]
 80a19ea:	691b      	ldr	r3, [r3, #16]
 80a19ec:	9301      	str	r3, [sp, #4]
 80a19ee:	bd08      	pop	{r3, pc}
 80a19f0:	080601b4 	.word	0x080601b4

080a19f4 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a19f4:	b508      	push	{r3, lr}
 80a19f6:	4b02      	ldr	r3, [pc, #8]	; (80a1a00 <HAL_SPI_Send_Receive_Data+0xc>)
 80a19f8:	681b      	ldr	r3, [r3, #0]
 80a19fa:	695b      	ldr	r3, [r3, #20]
 80a19fc:	9301      	str	r3, [sp, #4]
 80a19fe:	bd08      	pop	{r3, pc}
 80a1a00:	080601b4 	.word	0x080601b4

080a1a04 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1a04:	b508      	push	{r3, lr}
 80a1a06:	4b02      	ldr	r3, [pc, #8]	; (80a1a10 <HAL_SPI_Init+0xc>)
 80a1a08:	681b      	ldr	r3, [r3, #0]
 80a1a0a:	69db      	ldr	r3, [r3, #28]
 80a1a0c:	9301      	str	r3, [sp, #4]
 80a1a0e:	bd08      	pop	{r3, pc}
 80a1a10:	080601b4 	.word	0x080601b4

080a1a14 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1a14:	b508      	push	{r3, lr}
 80a1a16:	4b02      	ldr	r3, [pc, #8]	; (80a1a20 <HAL_SPI_Is_Enabled+0xc>)
 80a1a18:	681b      	ldr	r3, [r3, #0]
 80a1a1a:	6a1b      	ldr	r3, [r3, #32]
 80a1a1c:	9301      	str	r3, [sp, #4]
 80a1a1e:	bd08      	pop	{r3, pc}
 80a1a20:	080601b4 	.word	0x080601b4

080a1a24 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a1a24:	b508      	push	{r3, lr}
 80a1a26:	4b02      	ldr	r3, [pc, #8]	; (80a1a30 <HAL_SPI_Info+0xc>)
 80a1a28:	681b      	ldr	r3, [r3, #0]
 80a1a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1a2c:	9301      	str	r3, [sp, #4]
 80a1a2e:	bd08      	pop	{r3, pc}
 80a1a30:	080601b4 	.word	0x080601b4

080a1a34 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1a34:	b508      	push	{r3, lr}
 80a1a36:	4b02      	ldr	r3, [pc, #8]	; (80a1a40 <HAL_USART_Init+0xc>)
 80a1a38:	681b      	ldr	r3, [r3, #0]
 80a1a3a:	699b      	ldr	r3, [r3, #24]
 80a1a3c:	9301      	str	r3, [sp, #4]
 80a1a3e:	bd08      	pop	{r3, pc}
 80a1a40:	080601c4 	.word	0x080601c4

080a1a44 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1a44:	b508      	push	{r3, lr}
 80a1a46:	4b02      	ldr	r3, [pc, #8]	; (80a1a50 <HAL_USART_Write_Data+0xc>)
 80a1a48:	681b      	ldr	r3, [r3, #0]
 80a1a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1a4c:	9301      	str	r3, [sp, #4]
 80a1a4e:	bd08      	pop	{r3, pc}
 80a1a50:	080601c4 	.word	0x080601c4

080a1a54 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1a54:	b508      	push	{r3, lr}
 80a1a56:	4b02      	ldr	r3, [pc, #8]	; (80a1a60 <HAL_USART_Available_Data+0xc>)
 80a1a58:	681b      	ldr	r3, [r3, #0]
 80a1a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1a5c:	9301      	str	r3, [sp, #4]
 80a1a5e:	bd08      	pop	{r3, pc}
 80a1a60:	080601c4 	.word	0x080601c4

080a1a64 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1a64:	b508      	push	{r3, lr}
 80a1a66:	4b02      	ldr	r3, [pc, #8]	; (80a1a70 <HAL_USART_Read_Data+0xc>)
 80a1a68:	681b      	ldr	r3, [r3, #0]
 80a1a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1a6c:	9301      	str	r3, [sp, #4]
 80a1a6e:	bd08      	pop	{r3, pc}
 80a1a70:	080601c4 	.word	0x080601c4

080a1a74 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1a74:	b508      	push	{r3, lr}
 80a1a76:	4b02      	ldr	r3, [pc, #8]	; (80a1a80 <HAL_USART_Peek_Data+0xc>)
 80a1a78:	681b      	ldr	r3, [r3, #0]
 80a1a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1a7c:	9301      	str	r3, [sp, #4]
 80a1a7e:	bd08      	pop	{r3, pc}
 80a1a80:	080601c4 	.word	0x080601c4

080a1a84 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1a84:	b508      	push	{r3, lr}
 80a1a86:	4b02      	ldr	r3, [pc, #8]	; (80a1a90 <HAL_USART_Flush_Data+0xc>)
 80a1a88:	681b      	ldr	r3, [r3, #0]
 80a1a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1a8c:	9301      	str	r3, [sp, #4]
 80a1a8e:	bd08      	pop	{r3, pc}
 80a1a90:	080601c4 	.word	0x080601c4

080a1a94 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1a94:	b508      	push	{r3, lr}
 80a1a96:	4b02      	ldr	r3, [pc, #8]	; (80a1aa0 <HAL_USART_Is_Enabled+0xc>)
 80a1a98:	681b      	ldr	r3, [r3, #0]
 80a1a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1a9c:	9301      	str	r3, [sp, #4]
 80a1a9e:	bd08      	pop	{r3, pc}
 80a1aa0:	080601c4 	.word	0x080601c4

080a1aa4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1aa4:	b508      	push	{r3, lr}
 80a1aa6:	4b02      	ldr	r3, [pc, #8]	; (80a1ab0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1aa8:	681b      	ldr	r3, [r3, #0]
 80a1aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1aac:	9301      	str	r3, [sp, #4]
 80a1aae:	bd08      	pop	{r3, pc}
 80a1ab0:	080601c4 	.word	0x080601c4

080a1ab4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1ab4:	b508      	push	{r3, lr}
 80a1ab6:	4b02      	ldr	r3, [pc, #8]	; (80a1ac0 <HAL_USB_USART_Init+0xc>)
 80a1ab8:	681b      	ldr	r3, [r3, #0]
 80a1aba:	681b      	ldr	r3, [r3, #0]
 80a1abc:	9301      	str	r3, [sp, #4]
 80a1abe:	bd08      	pop	{r3, pc}
 80a1ac0:	080601d8 	.word	0x080601d8

080a1ac4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1ac4:	b508      	push	{r3, lr}
 80a1ac6:	4b02      	ldr	r3, [pc, #8]	; (80a1ad0 <HAL_USB_USART_Begin+0xc>)
 80a1ac8:	681b      	ldr	r3, [r3, #0]
 80a1aca:	685b      	ldr	r3, [r3, #4]
 80a1acc:	9301      	str	r3, [sp, #4]
 80a1ace:	bd08      	pop	{r3, pc}
 80a1ad0:	080601d8 	.word	0x080601d8

080a1ad4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1ad4:	b508      	push	{r3, lr}
 80a1ad6:	4b02      	ldr	r3, [pc, #8]	; (80a1ae0 <HAL_USB_USART_Available_Data+0xc>)
 80a1ad8:	681b      	ldr	r3, [r3, #0]
 80a1ada:	691b      	ldr	r3, [r3, #16]
 80a1adc:	9301      	str	r3, [sp, #4]
 80a1ade:	bd08      	pop	{r3, pc}
 80a1ae0:	080601d8 	.word	0x080601d8

080a1ae4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1ae4:	b508      	push	{r3, lr}
 80a1ae6:	4b02      	ldr	r3, [pc, #8]	; (80a1af0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1ae8:	681b      	ldr	r3, [r3, #0]
 80a1aea:	695b      	ldr	r3, [r3, #20]
 80a1aec:	9301      	str	r3, [sp, #4]
 80a1aee:	bd08      	pop	{r3, pc}
 80a1af0:	080601d8 	.word	0x080601d8

080a1af4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1af4:	b508      	push	{r3, lr}
 80a1af6:	4b02      	ldr	r3, [pc, #8]	; (80a1b00 <HAL_USB_USART_Receive_Data+0xc>)
 80a1af8:	681b      	ldr	r3, [r3, #0]
 80a1afa:	699b      	ldr	r3, [r3, #24]
 80a1afc:	9301      	str	r3, [sp, #4]
 80a1afe:	bd08      	pop	{r3, pc}
 80a1b00:	080601d8 	.word	0x080601d8

080a1b04 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1b04:	b508      	push	{r3, lr}
 80a1b06:	4b02      	ldr	r3, [pc, #8]	; (80a1b10 <HAL_USB_USART_Send_Data+0xc>)
 80a1b08:	681b      	ldr	r3, [r3, #0]
 80a1b0a:	69db      	ldr	r3, [r3, #28]
 80a1b0c:	9301      	str	r3, [sp, #4]
 80a1b0e:	bd08      	pop	{r3, pc}
 80a1b10:	080601d8 	.word	0x080601d8

080a1b14 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1b14:	b508      	push	{r3, lr}
 80a1b16:	4b02      	ldr	r3, [pc, #8]	; (80a1b20 <HAL_USB_USART_Flush_Data+0xc>)
 80a1b18:	681b      	ldr	r3, [r3, #0]
 80a1b1a:	6a1b      	ldr	r3, [r3, #32]
 80a1b1c:	9301      	str	r3, [sp, #4]
 80a1b1e:	bd08      	pop	{r3, pc}
 80a1b20:	080601d8 	.word	0x080601d8

080a1b24 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a1b24:	b508      	push	{r3, lr}
 80a1b26:	4b02      	ldr	r3, [pc, #8]	; (80a1b30 <HAL_NET_SetNetWatchDog+0xc>)
 80a1b28:	681b      	ldr	r3, [r3, #0]
 80a1b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1b2c:	9301      	str	r3, [sp, #4]
 80a1b2e:	bd08      	pop	{r3, pc}
 80a1b30:	080601c0 	.word	0x080601c0

080a1b34 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1b34:	b508      	push	{r3, lr}
 80a1b36:	4b02      	ldr	r3, [pc, #8]	; (80a1b40 <inet_gethostbyname+0xc>)
 80a1b38:	681b      	ldr	r3, [r3, #0]
 80a1b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1b3c:	9301      	str	r3, [sp, #4]
 80a1b3e:	bd08      	pop	{r3, pc}
 80a1b40:	080601c0 	.word	0x080601c0

080a1b44 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a1b44:	b508      	push	{r3, lr}
 80a1b46:	4b02      	ldr	r3, [pc, #8]	; (80a1b50 <log_message+0xc>)
 80a1b48:	681b      	ldr	r3, [r3, #0]
 80a1b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a1b4c:	9301      	str	r3, [sp, #4]
 80a1b4e:	bd08      	pop	{r3, pc}
 80a1b50:	080201a8 	.word	0x080201a8

080a1b54 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1b54:	b508      	push	{r3, lr}
 80a1b56:	4b02      	ldr	r3, [pc, #8]	; (80a1b60 <set_system_mode+0xc>)
 80a1b58:	681b      	ldr	r3, [r3, #0]
 80a1b5a:	685b      	ldr	r3, [r3, #4]
 80a1b5c:	9301      	str	r3, [sp, #4]
 80a1b5e:	bd08      	pop	{r3, pc}
 80a1b60:	080601a4 	.word	0x080601a4

080a1b64 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1b64:	b508      	push	{r3, lr}
 80a1b66:	4b02      	ldr	r3, [pc, #8]	; (80a1b70 <system_delay_ms+0xc>)
 80a1b68:	681b      	ldr	r3, [r3, #0]
 80a1b6a:	695b      	ldr	r3, [r3, #20]
 80a1b6c:	9301      	str	r3, [sp, #4]
 80a1b6e:	bd08      	pop	{r3, pc}
 80a1b70:	080601a4 	.word	0x080601a4

080a1b74 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80a1b74:	b508      	push	{r3, lr}
 80a1b76:	4b02      	ldr	r3, [pc, #8]	; (80a1b80 <system_sleep+0xc>)
 80a1b78:	681b      	ldr	r3, [r3, #0]
 80a1b7a:	699b      	ldr	r3, [r3, #24]
 80a1b7c:	9301      	str	r3, [sp, #4]
 80a1b7e:	bd08      	pop	{r3, pc}
 80a1b80:	080601a4 	.word	0x080601a4

080a1b84 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1b84:	b508      	push	{r3, lr}
 80a1b86:	4b02      	ldr	r3, [pc, #8]	; (80a1b90 <application_thread_current+0xc>)
 80a1b88:	681b      	ldr	r3, [r3, #0]
 80a1b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1b8c:	9301      	str	r3, [sp, #4]
 80a1b8e:	bd08      	pop	{r3, pc}
 80a1b90:	080601a4 	.word	0x080601a4

080a1b94 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1b94:	b508      	push	{r3, lr}
 80a1b96:	4b02      	ldr	r3, [pc, #8]	; (80a1ba0 <application_thread_invoke+0xc>)
 80a1b98:	681b      	ldr	r3, [r3, #0]
 80a1b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1b9c:	9301      	str	r3, [sp, #4]
 80a1b9e:	bd08      	pop	{r3, pc}
 80a1ba0:	080601a4 	.word	0x080601a4

080a1ba4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1ba4:	b508      	push	{r3, lr}
 80a1ba6:	4b03      	ldr	r3, [pc, #12]	; (80a1bb4 <system_ctrl_set_app_request_handler+0x10>)
 80a1ba8:	681b      	ldr	r3, [r3, #0]
 80a1baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1bae:	9301      	str	r3, [sp, #4]
 80a1bb0:	bd08      	pop	{r3, pc}
 80a1bb2:	0000      	.short	0x0000
 80a1bb4:	080601a4 	.word	0x080601a4

080a1bb8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1bb8:	b508      	push	{r3, lr}
 80a1bba:	4b03      	ldr	r3, [pc, #12]	; (80a1bc8 <system_ctrl_set_result+0x10>)
 80a1bbc:	681b      	ldr	r3, [r3, #0]
 80a1bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1bc2:	9301      	str	r3, [sp, #4]
 80a1bc4:	bd08      	pop	{r3, pc}
 80a1bc6:	0000      	.short	0x0000
 80a1bc8:	080601a4 	.word	0x080601a4

080a1bcc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a1bcc:	b508      	push	{r3, lr}
 80a1bce:	4b02      	ldr	r3, [pc, #8]	; (80a1bd8 <spark_variable+0xc>)
 80a1bd0:	681b      	ldr	r3, [r3, #0]
 80a1bd2:	681b      	ldr	r3, [r3, #0]
 80a1bd4:	9301      	str	r3, [sp, #4]
 80a1bd6:	bd08      	pop	{r3, pc}
 80a1bd8:	080601cc 	.word	0x080601cc

080a1bdc <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1bdc:	b508      	push	{r3, lr}
 80a1bde:	4b02      	ldr	r3, [pc, #8]	; (80a1be8 <spark_process+0xc>)
 80a1be0:	681b      	ldr	r3, [r3, #0]
 80a1be2:	689b      	ldr	r3, [r3, #8]
 80a1be4:	9301      	str	r3, [sp, #4]
 80a1be6:	bd08      	pop	{r3, pc}
 80a1be8:	080601cc 	.word	0x080601cc

080a1bec <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1bec:	b508      	push	{r3, lr}
 80a1bee:	4b02      	ldr	r3, [pc, #8]	; (80a1bf8 <spark_cloud_flag_connected+0xc>)
 80a1bf0:	681b      	ldr	r3, [r3, #0]
 80a1bf2:	695b      	ldr	r3, [r3, #20]
 80a1bf4:	9301      	str	r3, [sp, #4]
 80a1bf6:	bd08      	pop	{r3, pc}
 80a1bf8:	080601cc 	.word	0x080601cc

080a1bfc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1bfc:	b508      	push	{r3, lr}
 80a1bfe:	4b02      	ldr	r3, [pc, #8]	; (80a1c08 <spark_send_event+0xc>)
 80a1c00:	681b      	ldr	r3, [r3, #0]
 80a1c02:	6a1b      	ldr	r3, [r3, #32]
 80a1c04:	9301      	str	r3, [sp, #4]
 80a1c06:	bd08      	pop	{r3, pc}
 80a1c08:	080601cc 	.word	0x080601cc

080a1c0c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1c0c:	b508      	push	{r3, lr}
 80a1c0e:	4b02      	ldr	r3, [pc, #8]	; (80a1c18 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1c10:	681b      	ldr	r3, [r3, #0]
 80a1c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1c14:	9301      	str	r3, [sp, #4]
 80a1c16:	bd08      	pop	{r3, pc}
 80a1c18:	080601cc 	.word	0x080601cc

080a1c1c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1c1c:	b508      	push	{r3, lr}
 80a1c1e:	4b02      	ldr	r3, [pc, #8]	; (80a1c28 <network_connect+0xc>)
 80a1c20:	681b      	ldr	r3, [r3, #0]
 80a1c22:	685b      	ldr	r3, [r3, #4]
 80a1c24:	9301      	str	r3, [sp, #4]
 80a1c26:	bd08      	pop	{r3, pc}
 80a1c28:	080601c8 	.word	0x080601c8

080a1c2c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1c2c:	b508      	push	{r3, lr}
 80a1c2e:	4b02      	ldr	r3, [pc, #8]	; (80a1c38 <network_connecting+0xc>)
 80a1c30:	681b      	ldr	r3, [r3, #0]
 80a1c32:	689b      	ldr	r3, [r3, #8]
 80a1c34:	9301      	str	r3, [sp, #4]
 80a1c36:	bd08      	pop	{r3, pc}
 80a1c38:	080601c8 	.word	0x080601c8

080a1c3c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1c3c:	b508      	push	{r3, lr}
 80a1c3e:	4b02      	ldr	r3, [pc, #8]	; (80a1c48 <network_disconnect+0xc>)
 80a1c40:	681b      	ldr	r3, [r3, #0]
 80a1c42:	68db      	ldr	r3, [r3, #12]
 80a1c44:	9301      	str	r3, [sp, #4]
 80a1c46:	bd08      	pop	{r3, pc}
 80a1c48:	080601c8 	.word	0x080601c8

080a1c4c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1c4c:	b508      	push	{r3, lr}
 80a1c4e:	4b02      	ldr	r3, [pc, #8]	; (80a1c58 <network_ready+0xc>)
 80a1c50:	681b      	ldr	r3, [r3, #0]
 80a1c52:	691b      	ldr	r3, [r3, #16]
 80a1c54:	9301      	str	r3, [sp, #4]
 80a1c56:	bd08      	pop	{r3, pc}
 80a1c58:	080601c8 	.word	0x080601c8

080a1c5c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1c5c:	b508      	push	{r3, lr}
 80a1c5e:	4b02      	ldr	r3, [pc, #8]	; (80a1c68 <network_on+0xc>)
 80a1c60:	681b      	ldr	r3, [r3, #0]
 80a1c62:	695b      	ldr	r3, [r3, #20]
 80a1c64:	9301      	str	r3, [sp, #4]
 80a1c66:	bd08      	pop	{r3, pc}
 80a1c68:	080601c8 	.word	0x080601c8

080a1c6c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1c6c:	b508      	push	{r3, lr}
 80a1c6e:	4b02      	ldr	r3, [pc, #8]	; (80a1c78 <network_off+0xc>)
 80a1c70:	681b      	ldr	r3, [r3, #0]
 80a1c72:	699b      	ldr	r3, [r3, #24]
 80a1c74:	9301      	str	r3, [sp, #4]
 80a1c76:	bd08      	pop	{r3, pc}
 80a1c78:	080601c8 	.word	0x080601c8

080a1c7c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1c7c:	b508      	push	{r3, lr}
 80a1c7e:	4b02      	ldr	r3, [pc, #8]	; (80a1c88 <network_listen+0xc>)
 80a1c80:	681b      	ldr	r3, [r3, #0]
 80a1c82:	69db      	ldr	r3, [r3, #28]
 80a1c84:	9301      	str	r3, [sp, #4]
 80a1c86:	bd08      	pop	{r3, pc}
 80a1c88:	080601c8 	.word	0x080601c8

080a1c8c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1c8c:	b508      	push	{r3, lr}
 80a1c8e:	4b02      	ldr	r3, [pc, #8]	; (80a1c98 <network_listening+0xc>)
 80a1c90:	681b      	ldr	r3, [r3, #0]
 80a1c92:	6a1b      	ldr	r3, [r3, #32]
 80a1c94:	9301      	str	r3, [sp, #4]
 80a1c96:	bd08      	pop	{r3, pc}
 80a1c98:	080601c8 	.word	0x080601c8

080a1c9c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1c9c:	b508      	push	{r3, lr}
 80a1c9e:	4b02      	ldr	r3, [pc, #8]	; (80a1ca8 <network_set_listen_timeout+0xc>)
 80a1ca0:	681b      	ldr	r3, [r3, #0]
 80a1ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1ca4:	9301      	str	r3, [sp, #4]
 80a1ca6:	bd08      	pop	{r3, pc}
 80a1ca8:	080601c8 	.word	0x080601c8

080a1cac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1cac:	b508      	push	{r3, lr}
 80a1cae:	4b02      	ldr	r3, [pc, #8]	; (80a1cb8 <network_get_listen_timeout+0xc>)
 80a1cb0:	681b      	ldr	r3, [r3, #0]
 80a1cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1cb4:	9301      	str	r3, [sp, #4]
 80a1cb6:	bd08      	pop	{r3, pc}
 80a1cb8:	080601c8 	.word	0x080601c8

080a1cbc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1cbc:	b508      	push	{r3, lr}
 80a1cbe:	4b02      	ldr	r3, [pc, #8]	; (80a1cc8 <malloc+0xc>)
 80a1cc0:	681b      	ldr	r3, [r3, #0]
 80a1cc2:	681b      	ldr	r3, [r3, #0]
 80a1cc4:	9301      	str	r3, [sp, #4]
 80a1cc6:	bd08      	pop	{r3, pc}
 80a1cc8:	080601a0 	.word	0x080601a0

080a1ccc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1ccc:	b508      	push	{r3, lr}
 80a1cce:	4b02      	ldr	r3, [pc, #8]	; (80a1cd8 <free+0xc>)
 80a1cd0:	681b      	ldr	r3, [r3, #0]
 80a1cd2:	685b      	ldr	r3, [r3, #4]
 80a1cd4:	9301      	str	r3, [sp, #4]
 80a1cd6:	bd08      	pop	{r3, pc}
 80a1cd8:	080601a0 	.word	0x080601a0

080a1cdc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1cdc:	b508      	push	{r3, lr}
 80a1cde:	4b02      	ldr	r3, [pc, #8]	; (80a1ce8 <realloc+0xc>)
 80a1ce0:	681b      	ldr	r3, [r3, #0]
 80a1ce2:	689b      	ldr	r3, [r3, #8]
 80a1ce4:	9301      	str	r3, [sp, #4]
 80a1ce6:	bd08      	pop	{r3, pc}
 80a1ce8:	080601a0 	.word	0x080601a0

080a1cec <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1cec:	b508      	push	{r3, lr}
 80a1cee:	4b02      	ldr	r3, [pc, #8]	; (80a1cf8 <vsnprintf+0xc>)
 80a1cf0:	681b      	ldr	r3, [r3, #0]
 80a1cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1cf4:	9301      	str	r3, [sp, #4]
 80a1cf6:	bd08      	pop	{r3, pc}
 80a1cf8:	080601a0 	.word	0x080601a0

080a1cfc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1cfc:	b508      	push	{r3, lr}
 80a1cfe:	4b02      	ldr	r3, [pc, #8]	; (80a1d08 <abort+0xc>)
 80a1d00:	681b      	ldr	r3, [r3, #0]
 80a1d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1d04:	9301      	str	r3, [sp, #4]
 80a1d06:	bd08      	pop	{r3, pc}
 80a1d08:	080601a0 	.word	0x080601a0

080a1d0c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1d0c:	b508      	push	{r3, lr}
 80a1d0e:	4b02      	ldr	r3, [pc, #8]	; (80a1d18 <_malloc_r+0xc>)
 80a1d10:	681b      	ldr	r3, [r3, #0]
 80a1d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1d14:	9301      	str	r3, [sp, #4]
 80a1d16:	bd08      	pop	{r3, pc}
 80a1d18:	080601a0 	.word	0x080601a0

080a1d1c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1d1c:	2100      	movs	r1, #0
 80a1d1e:	f7ff bf21 	b.w	80a1b64 <system_delay_ms>

080a1d22 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1d22:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1d24:	6883      	ldr	r3, [r0, #8]
 80a1d26:	4604      	mov	r4, r0
 80a1d28:	b90b      	cbnz	r3, 80a1d2e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1d2a:	f001 fdf2 	bl	80a3912 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1d2e:	68c3      	ldr	r3, [r0, #12]
 80a1d30:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a1d32:	68a3      	ldr	r3, [r4, #8]
 80a1d34:	b11b      	cbz	r3, 80a1d3e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1d36:	2203      	movs	r2, #3
 80a1d38:	4621      	mov	r1, r4
 80a1d3a:	4620      	mov	r0, r4
 80a1d3c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1d3e:	4620      	mov	r0, r4
}
 80a1d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1d44:	2110      	movs	r1, #16
 80a1d46:	f001 bde2 	b.w	80a390e <_ZdlPvj>

080a1d4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1d4a:	4770      	bx	lr

080a1d4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a1d4c:	2000      	movs	r0, #0
 80a1d4e:	4770      	bx	lr

080a1d50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1d50:	b510      	push	{r4, lr}
 80a1d52:	4604      	mov	r4, r0
 80a1d54:	2110      	movs	r1, #16
 80a1d56:	f001 fdda 	bl	80a390e <_ZdlPvj>
 80a1d5a:	4620      	mov	r0, r4
 80a1d5c:	bd10      	pop	{r4, pc}

080a1d5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1d5e:	b508      	push	{r3, lr}
      { delete this; }
 80a1d60:	b108      	cbz	r0, 80a1d66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a1d62:	f7ff fff5 	bl	80a1d50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1d66:	bd08      	pop	{r3, pc}

080a1d68 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1d68:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1d6a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1d6c:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1d6e:	b113      	cbz	r3, 80a1d76 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1d70:	2203      	movs	r2, #3
 80a1d72:	4601      	mov	r1, r0
 80a1d74:	4798      	blx	r3
    }
 80a1d76:	4620      	mov	r0, r4
 80a1d78:	bd10      	pop	{r4, pc}

080a1d7a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1d7a:	2200      	movs	r2, #0
 80a1d7c:	6002      	str	r2, [r0, #0]
 80a1d7e:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a1d82:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a1d84:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1d86:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a1d8a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1d8c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1d8e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a1d90:	680c      	ldr	r4, [r1, #0]
 80a1d92:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1d94:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a1d96:	bd10      	pop	{r4, pc}

080a1d98 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a1d98:	b510      	push	{r4, lr}
 80a1d9a:	4604      	mov	r4, r0
    free((void*)msg_);
 80a1d9c:	6800      	ldr	r0, [r0, #0]
 80a1d9e:	f7ff ff95 	bl	80a1ccc <free>
}
 80a1da2:	4620      	mov	r0, r4
 80a1da4:	bd10      	pop	{r4, pc}

080a1da6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a1da6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1da8:	68c4      	ldr	r4, [r0, #12]
 80a1daa:	b1f4      	cbz	r4, 80a1dea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
 80a1dac:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1dae:	2b02      	cmp	r3, #2
 80a1db0:	d103      	bne.n	80a1dba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1db2:	f104 000c 	add.w	r0, r4, #12
 80a1db6:	f7ff ffef 	bl	80a1d98 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a1dba:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1dbc:	b135      	cbz	r5, 80a1dcc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1dbe:	4628      	mov	r0, r5
 80a1dc0:	f7ff ffd2 	bl	80a1d68 <_ZNSt14_Function_baseD1Ev>
 80a1dc4:	2110      	movs	r1, #16
 80a1dc6:	4628      	mov	r0, r5
 80a1dc8:	f001 fda1 	bl	80a390e <_ZdlPvj>
 80a1dcc:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1dce:	b135      	cbz	r5, 80a1dde <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a1dd0:	4628      	mov	r0, r5
 80a1dd2:	f7ff ffc9 	bl	80a1d68 <_ZNSt14_Function_baseD1Ev>
 80a1dd6:	2110      	movs	r1, #16
 80a1dd8:	4628      	mov	r0, r5
 80a1dda:	f001 fd98 	bl	80a390e <_ZdlPvj>
 80a1dde:	4620      	mov	r0, r4
 80a1de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1de4:	2114      	movs	r1, #20
 80a1de6:	f001 bd92 	b.w	80a390e <_ZdlPvj>
 80a1dea:	bd38      	pop	{r3, r4, r5, pc}

080a1dec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a1dec:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a1dee:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a1df0:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a1df2:	b17c      	cbz	r4, 80a1e14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1df4:	6863      	ldr	r3, [r4, #4]
 80a1df6:	3b01      	subs	r3, #1
 80a1df8:	6063      	str	r3, [r4, #4]
 80a1dfa:	b95b      	cbnz	r3, 80a1e14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a1dfc:	6823      	ldr	r3, [r4, #0]
 80a1dfe:	4620      	mov	r0, r4
 80a1e00:	689b      	ldr	r3, [r3, #8]
 80a1e02:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1e04:	68a3      	ldr	r3, [r4, #8]
 80a1e06:	3b01      	subs	r3, #1
 80a1e08:	60a3      	str	r3, [r4, #8]
 80a1e0a:	b91b      	cbnz	r3, 80a1e14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a1e0c:	6823      	ldr	r3, [r4, #0]
 80a1e0e:	4620      	mov	r0, r4
 80a1e10:	68db      	ldr	r3, [r3, #12]
 80a1e12:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a1e14:	4628      	mov	r0, r5
 80a1e16:	bd38      	pop	{r3, r4, r5, pc}

080a1e18 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a1e18:	b513      	push	{r0, r1, r4, lr}
 80a1e1a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1e1c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a1e20:	2300      	movs	r3, #0
 80a1e22:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1e24:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1e26:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1e28:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1e2a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1e2c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1e2e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1e30:	f7ff ffdc 	bl	80a1dec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1e34:	4620      	mov	r0, r4
 80a1e36:	b002      	add	sp, #8
 80a1e38:	bd10      	pop	{r4, pc}

080a1e3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1e3a:	680b      	ldr	r3, [r1, #0]
 80a1e3c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a1e3e:	b113      	cbz	r3, 80a1e46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a1e40:	685a      	ldr	r2, [r3, #4]
 80a1e42:	3201      	adds	r2, #1
 80a1e44:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a1e46:	4770      	bx	lr

080a1e48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1e4a:	460c      	mov	r4, r1
 80a1e4c:	4606      	mov	r6, r0
 80a1e4e:	460f      	mov	r7, r1
 80a1e50:	f854 3b04 	ldr.w	r3, [r4], #4
 80a1e54:	ad02      	add	r5, sp, #8
 80a1e56:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a1e5a:	4621      	mov	r1, r4
 80a1e5c:	a801      	add	r0, sp, #4
 80a1e5e:	f7ff ffec 	bl	80a1e3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a1e62:	4629      	mov	r1, r5
 80a1e64:	4630      	mov	r0, r6
 80a1e66:	f7ff ffd7 	bl	80a1e18 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1e6a:	a801      	add	r0, sp, #4
 80a1e6c:	f7ff ffbe 	bl	80a1dec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1e70:	4620      	mov	r0, r4
 80a1e72:	f7ff ffbb 	bl	80a1dec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a1e76:	4638      	mov	r0, r7
 80a1e78:	2108      	movs	r1, #8
 80a1e7a:	f001 fd48 	bl	80a390e <_ZdlPvj>
        return p;
    }
 80a1e7e:	4630      	mov	r0, r6
 80a1e80:	b003      	add	sp, #12
 80a1e82:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1e84 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a1e84:	b513      	push	{r0, r1, r4, lr}
 80a1e86:	460b      	mov	r3, r1
 80a1e88:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1e8a:	c803      	ldmia	r0, {r0, r1}
 80a1e8c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1e90:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1e94:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1e98:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a1e9c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1ea0:	b002      	add	sp, #8
 80a1ea2:	bd10      	pop	{r4, pc}

080a1ea4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1ea4:	b538      	push	{r3, r4, r5, lr}
 80a1ea6:	2300      	movs	r3, #0
 80a1ea8:	4604      	mov	r4, r0
 80a1eaa:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1eac:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1eae:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1eb0:	f7fe f8f5 	bl	80a009e <_Znwj>
 80a1eb4:	b128      	cbz	r0, 80a1ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1eb6:	2301      	movs	r3, #1
 80a1eb8:	6043      	str	r3, [r0, #4]
 80a1eba:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a1ebc:	4b02      	ldr	r3, [pc, #8]	; (80a1ec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a1ebe:	60c5      	str	r5, [r0, #12]
 80a1ec0:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1ec2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a1ec4:	4620      	mov	r0, r4
 80a1ec6:	bd38      	pop	{r3, r4, r5, pc}
 80a1ec8:	080a5548 	.word	0x080a5548

080a1ecc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1ecc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1ece:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1ed0:	b90a      	cbnz	r2, 80a1ed6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1ed2:	f001 fd1e 	bl	80a3912 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1ed6:	68c3      	ldr	r3, [r0, #12]
    }
 80a1ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1edc:	4718      	bx	r3

080a1ede <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1ede:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1ee0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1ee2:	f100 0110 	add.w	r1, r0, #16
 80a1ee6:	f7ff fff1 	bl	80a1ecc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1eea:	bd08      	pop	{r3, pc}

080a1eec <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1eec:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1eee:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1ef0:	b90a      	cbnz	r2, 80a1ef6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a1ef2:	f001 fd0e 	bl	80a3912 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1ef6:	68c3      	ldr	r3, [r0, #12]
    }
 80a1ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1efc:	4718      	bx	r3

080a1efe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1efe:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1f00:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1f02:	f100 0110 	add.w	r1, r0, #16
 80a1f06:	f7ff fff1 	bl	80a1eec <_ZNKSt8functionIFvRKbEEclES1_>
 80a1f0a:	bd08      	pop	{r3, pc}

080a1f0c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1f0c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1f0e:	2300      	movs	r3, #0
 80a1f10:	6083      	str	r3, [r0, #8]
 80a1f12:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1f14:	4604      	mov	r4, r0
 80a1f16:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1f18:	b12b      	cbz	r3, 80a1f26 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1f1a:	2202      	movs	r2, #2
 80a1f1c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1f1e:	68eb      	ldr	r3, [r5, #12]
 80a1f20:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1f22:	68ab      	ldr	r3, [r5, #8]
 80a1f24:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1f26:	4620      	mov	r0, r4
 80a1f28:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1f2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a1f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1f2e:	b089      	sub	sp, #36	; 0x24
 80a1f30:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a1f32:	4668      	mov	r0, sp
 80a1f34:	f7ff ff21 	bl	80a1d7a <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1f38:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1f3c:	2300      	movs	r3, #0
 80a1f3e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1f42:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a1f46:	2b00      	cmp	r3, #0
 80a1f48:	d103      	bne.n	80a1f52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a1f4a:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a1f4e:	2900      	cmp	r1, #0
 80a1f50:	d1f7      	bne.n	80a1f42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a1f52:	d002      	beq.n	80a1f5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a1f54:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1f58:	e063      	b.n	80a2022 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a1f5a:	f114 050c 	adds.w	r5, r4, #12
 80a1f5e:	d003      	beq.n	80a1f68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a1f60:	4669      	mov	r1, sp
 80a1f62:	4628      	mov	r0, r5
 80a1f64:	f7ff ff09 	bl	80a1d7a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1f68:	f3bf 8f5f 	dmb	sy
 80a1f6c:	2301      	movs	r3, #1
 80a1f6e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1f70:	f3bf 8f5f 	dmb	sy
 80a1f74:	f104 0308 	add.w	r3, r4, #8
 80a1f78:	2000      	movs	r0, #0
 80a1f7a:	e853 6f00 	ldrex	r6, [r3]
 80a1f7e:	e843 0200 	strex	r2, r0, [r3]
 80a1f82:	2a00      	cmp	r2, #0
 80a1f84:	d1f9      	bne.n	80a1f7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a1f86:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1f8a:	2e00      	cmp	r6, #0
 80a1f8c:	d049      	beq.n	80a2022 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1f8e:	f7ff fdf9 	bl	80a1b84 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1f92:	b120      	cbz	r0, 80a1f9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1f94:	4629      	mov	r1, r5
 80a1f96:	4630      	mov	r0, r6
 80a1f98:	f7ff ff98 	bl	80a1ecc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1f9c:	e03a      	b.n	80a2014 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1f9e:	4631      	mov	r1, r6
 80a1fa0:	a802      	add	r0, sp, #8
 80a1fa2:	f7ff ffb3 	bl	80a1f0c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1fa6:	68e0      	ldr	r0, [r4, #12]
 80a1fa8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1fac:	b108      	cbz	r0, 80a1fb2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a1fae:	f002 fff5 	bl	80a4f9c <strdup>
 80a1fb2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1fb4:	2010      	movs	r0, #16
 80a1fb6:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a1fba:	f7fe f870 	bl	80a009e <_Znwj>
 80a1fbe:	4605      	mov	r5, r0
 80a1fc0:	b1e8      	cbz	r0, 80a1ffe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1fc2:	2700      	movs	r7, #0
 80a1fc4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1fc6:	2018      	movs	r0, #24
 80a1fc8:	f7fe f869 	bl	80a009e <_Znwj>
 80a1fcc:	4604      	mov	r4, r0
 80a1fce:	b188      	cbz	r0, 80a1ff4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1fd0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1fd2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1fd4:	a802      	add	r0, sp, #8
 80a1fd6:	f7ff ff55 	bl	80a1e84 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1fda:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1fdc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1fde:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1fe0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1fe2:	9204      	str	r2, [sp, #16]
 80a1fe4:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1fe6:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1fe8:	60e3      	str	r3, [r4, #12]
 80a1fea:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1fee:	9205      	str	r2, [sp, #20]
 80a1ff0:	f7ff fec3 	bl	80a1d7a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1ff4:	4b0d      	ldr	r3, [pc, #52]	; (80a202c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1ff6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1ff8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1ffa:	4b0d      	ldr	r3, [pc, #52]	; (80a2030 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a1ffc:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a1ffe:	a806      	add	r0, sp, #24
 80a2000:	f7ff feca 	bl	80a1d98 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2004:	a802      	add	r0, sp, #8
 80a2006:	f7ff feaf 	bl	80a1d68 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a200a:	2200      	movs	r2, #0
 80a200c:	4629      	mov	r1, r5
 80a200e:	4809      	ldr	r0, [pc, #36]	; (80a2034 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a2010:	f7ff fdc0 	bl	80a1b94 <application_thread_invoke>
 80a2014:	4630      	mov	r0, r6
 80a2016:	f7ff fea7 	bl	80a1d68 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a201a:	2110      	movs	r1, #16
 80a201c:	4630      	mov	r0, r6
 80a201e:	f001 fc76 	bl	80a390e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a2022:	4668      	mov	r0, sp
 80a2024:	f7ff feb8 	bl	80a1d98 <_ZN8particle5ErrorD1Ev>
    }
 80a2028:	b009      	add	sp, #36	; 0x24
 80a202a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a202c:	080a1edf 	.word	0x080a1edf
 80a2030:	080a2155 	.word	0x080a2155
 80a2034:	080a1d23 	.word	0x080a1d23

080a2038 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a2038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a203c:	b08b      	sub	sp, #44	; 0x2c
 80a203e:	4606      	mov	r6, r0
 80a2040:	460f      	mov	r7, r1
 80a2042:	4690      	mov	r8, r2
 80a2044:	4699      	mov	r9, r3
 80a2046:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a204a:	f7ff fdcf 	bl	80a1bec <spark_cloud_flag_connected>
 80a204e:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a2050:	4683      	mov	fp, r0
 80a2052:	bb30      	cbnz	r0, 80a20a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2054:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a2058:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a205a:	a905      	add	r1, sp, #20
 80a205c:	4628      	mov	r0, r5
 80a205e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2062:	f7ff fe8a 	bl	80a1d7a <_ZN8particle5ErrorC1EOS0_>
 80a2066:	2014      	movs	r0, #20
 80a2068:	f7fe f819 	bl	80a009e <_Znwj>
 80a206c:	4604      	mov	r4, r0
 80a206e:	b158      	cbz	r0, 80a2088 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a2070:	2302      	movs	r3, #2
 80a2072:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2074:	2301      	movs	r3, #1
 80a2076:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2078:	f8c0 b004 	str.w	fp, [r0, #4]
 80a207c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a2080:	4629      	mov	r1, r5
 80a2082:	300c      	adds	r0, #12
 80a2084:	f7ff fe79 	bl	80a1d7a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a2088:	4630      	mov	r0, r6
 80a208a:	4621      	mov	r1, r4
 80a208c:	f840 4b04 	str.w	r4, [r0], #4
 80a2090:	f7ff ff08 	bl	80a1ea4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2094:	4628      	mov	r0, r5
 80a2096:	f7ff fe7f 	bl	80a1d98 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a209a:	a805      	add	r0, sp, #20
 80a209c:	f7ff fe7c 	bl	80a1d98 <_ZN8particle5ErrorD1Ev>
 80a20a0:	e052      	b.n	80a2148 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a20a2:	2400      	movs	r4, #0
 80a20a4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a20a6:	2014      	movs	r0, #20
 80a20a8:	606c      	str	r4, [r5, #4]
 80a20aa:	60ac      	str	r4, [r5, #8]
 80a20ac:	9307      	str	r3, [sp, #28]
 80a20ae:	f7fd fff6 	bl	80a009e <_Znwj>
 80a20b2:	4601      	mov	r1, r0
 80a20b4:	b118      	cbz	r0, 80a20be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a20b6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a20b8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a20ba:	6044      	str	r4, [r0, #4]
 80a20bc:	6084      	str	r4, [r0, #8]
 80a20be:	a804      	add	r0, sp, #16
 80a20c0:	9103      	str	r1, [sp, #12]
 80a20c2:	f7ff feef 	bl	80a1ea4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a20c6:	4b22      	ldr	r3, [pc, #136]	; (80a2150 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a20c8:	2008      	movs	r0, #8
 80a20ca:	9308      	str	r3, [sp, #32]
 80a20cc:	f7fd ffe7 	bl	80a009e <_Znwj>
 80a20d0:	4604      	mov	r4, r0
 80a20d2:	b128      	cbz	r0, 80a20e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a20d4:	9b03      	ldr	r3, [sp, #12]
 80a20d6:	a904      	add	r1, sp, #16
 80a20d8:	f840 3b04 	str.w	r3, [r0], #4
 80a20dc:	f7ff fead 	bl	80a1e3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a20e0:	9500      	str	r5, [sp, #0]
 80a20e2:	fa5f f38a 	uxtb.w	r3, sl
 80a20e6:	464a      	mov	r2, r9
 80a20e8:	4641      	mov	r1, r8
 80a20ea:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a20ec:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a20ee:	f7ff fd85 	bl	80a1bfc <spark_send_event>
 80a20f2:	b920      	cbnz	r0, 80a20fe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a20f4:	9b03      	ldr	r3, [sp, #12]
 80a20f6:	785b      	ldrb	r3, [r3, #1]
 80a20f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a20fc:	b183      	cbz	r3, 80a2120 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a20fe:	9b03      	ldr	r3, [sp, #12]
 80a2100:	a904      	add	r1, sp, #16
 80a2102:	a806      	add	r0, sp, #24
 80a2104:	9305      	str	r3, [sp, #20]
 80a2106:	f7ff fe98 	bl	80a1e3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a210a:	a905      	add	r1, sp, #20
 80a210c:	4630      	mov	r0, r6
 80a210e:	f7ff fe83 	bl	80a1e18 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2112:	a806      	add	r0, sp, #24
 80a2114:	f7ff fe6a 	bl	80a1dec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2118:	a804      	add	r0, sp, #16
 80a211a:	f7ff fe67 	bl	80a1dec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a211e:	e013      	b.n	80a2148 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a2120:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a2124:	a905      	add	r1, sp, #20
 80a2126:	a803      	add	r0, sp, #12
 80a2128:	9205      	str	r2, [sp, #20]
 80a212a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a212e:	f7ff fefd 	bl	80a1f2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2132:	a805      	add	r0, sp, #20
 80a2134:	f7ff fe30 	bl	80a1d98 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a2138:	a805      	add	r0, sp, #20
 80a213a:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a213c:	f7ff fe84 	bl	80a1e48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a2140:	a806      	add	r0, sp, #24
 80a2142:	f7ff fe53 	bl	80a1dec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2146:	e7da      	b.n	80a20fe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a2148:	4630      	mov	r0, r6
 80a214a:	b00b      	add	sp, #44	; 0x2c
 80a214c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2150:	080a22c5 	.word	0x080a22c5

080a2154 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2154:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2158:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a215a:	d006      	beq.n	80a216a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a215c:	2a03      	cmp	r2, #3
 80a215e:	d017      	beq.n	80a2190 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a2160:	2a01      	cmp	r2, #1
 80a2162:	d122      	bne.n	80a21aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2164:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2166:	6003      	str	r3, [r0, #0]
	      break;
 80a2168:	e01f      	b.n	80a21aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a216a:	2018      	movs	r0, #24
 80a216c:	680e      	ldr	r6, [r1, #0]
 80a216e:	f7fd ff96 	bl	80a009e <_Znwj>
 80a2172:	4605      	mov	r5, r0
 80a2174:	b150      	cbz	r0, 80a218c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2176:	4631      	mov	r1, r6
 80a2178:	f7ff fec8 	bl	80a1f0c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a217c:	6930      	ldr	r0, [r6, #16]
 80a217e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2182:	b108      	cbz	r0, 80a2188 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a2184:	f002 ff0a 	bl	80a4f9c <strdup>
 80a2188:	6128      	str	r0, [r5, #16]
 80a218a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a218c:	6025      	str	r5, [r4, #0]
 80a218e:	e00c      	b.n	80a21aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2190:	6804      	ldr	r4, [r0, #0]
 80a2192:	b154      	cbz	r4, 80a21aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a2194:	f104 0010 	add.w	r0, r4, #16
 80a2198:	f7ff fdfe 	bl	80a1d98 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a219c:	4620      	mov	r0, r4
 80a219e:	f7ff fde3 	bl	80a1d68 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a21a2:	2118      	movs	r1, #24
 80a21a4:	4620      	mov	r0, r4
 80a21a6:	f001 fbb2 	bl	80a390e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a21aa:	2000      	movs	r0, #0
 80a21ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a21ae <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a21ae:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a21b0:	2300      	movs	r3, #0
 80a21b2:	6083      	str	r3, [r0, #8]
 80a21b4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a21b6:	4604      	mov	r4, r0
 80a21b8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a21ba:	b12b      	cbz	r3, 80a21c8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a21bc:	2202      	movs	r2, #2
 80a21be:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a21c0:	68eb      	ldr	r3, [r5, #12]
 80a21c2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a21c4:	68ab      	ldr	r3, [r5, #8]
 80a21c6:	60a3      	str	r3, [r4, #8]
	}
    }
 80a21c8:	4620      	mov	r0, r4
 80a21ca:	bd38      	pop	{r3, r4, r5, pc}

080a21cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a21cc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a21ce:	b570      	push	{r4, r5, r6, lr}
 80a21d0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a21d2:	d006      	beq.n	80a21e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a21d4:	2a03      	cmp	r2, #3
 80a21d6:	d011      	beq.n	80a21fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a21d8:	2a01      	cmp	r2, #1
 80a21da:	d118      	bne.n	80a220e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a21dc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a21de:	6003      	str	r3, [r0, #0]
	      break;
 80a21e0:	e015      	b.n	80a220e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a21e2:	2014      	movs	r0, #20
 80a21e4:	680e      	ldr	r6, [r1, #0]
 80a21e6:	f7fd ff5a 	bl	80a009e <_Znwj>
 80a21ea:	4605      	mov	r5, r0
 80a21ec:	b120      	cbz	r0, 80a21f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a21ee:	4631      	mov	r1, r6
 80a21f0:	f7ff ffdd 	bl	80a21ae <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a21f4:	7c33      	ldrb	r3, [r6, #16]
 80a21f6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a21f8:	6025      	str	r5, [r4, #0]
 80a21fa:	e008      	b.n	80a220e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a21fc:	6804      	ldr	r4, [r0, #0]
 80a21fe:	b134      	cbz	r4, 80a220e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2200:	4620      	mov	r0, r4
 80a2202:	f7ff fdb1 	bl	80a1d68 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2206:	2114      	movs	r1, #20
 80a2208:	4620      	mov	r0, r4
 80a220a:	f001 fb80 	bl	80a390e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a220e:	2000      	movs	r0, #0
 80a2210:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2214 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a2214:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2216:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a2218:	f3bf 8f5f 	dmb	sy
 80a221c:	b087      	sub	sp, #28
 80a221e:	2300      	movs	r3, #0
 80a2220:	e850 6f00 	ldrex	r6, [r0]
 80a2224:	e840 3200 	strex	r2, r3, [r0]
 80a2228:	2a00      	cmp	r2, #0
 80a222a:	d1f9      	bne.n	80a2220 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a222c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2230:	2e00      	cmp	r6, #0
 80a2232:	d03f      	beq.n	80a22b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2234:	4618      	mov	r0, r3
 80a2236:	f7ff fca5 	bl	80a1b84 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a223a:	4607      	mov	r7, r0
 80a223c:	b120      	cbz	r0, 80a2248 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a223e:	4621      	mov	r1, r4
 80a2240:	4630      	mov	r0, r6
 80a2242:	f7ff fe53 	bl	80a1eec <_ZNKSt8functionIFvRKbEEclES1_>
 80a2246:	e02e      	b.n	80a22a6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2248:	4631      	mov	r1, r6
 80a224a:	a801      	add	r0, sp, #4
 80a224c:	f7ff ffaf 	bl	80a21ae <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2250:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2252:	2010      	movs	r0, #16
 80a2254:	f88d 3014 	strb.w	r3, [sp, #20]
 80a2258:	f7fd ff21 	bl	80a009e <_Znwj>
 80a225c:	4605      	mov	r5, r0
 80a225e:	b1d0      	cbz	r0, 80a2296 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2260:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2262:	2014      	movs	r0, #20
 80a2264:	f7fd ff1b 	bl	80a009e <_Znwj>
 80a2268:	4604      	mov	r4, r0
 80a226a:	b178      	cbz	r0, 80a228c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a226c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a226e:	4601      	mov	r1, r0
 80a2270:	a801      	add	r0, sp, #4
 80a2272:	f7ff fe07 	bl	80a1e84 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2276:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2278:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a227a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a227c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a227e:	9203      	str	r2, [sp, #12]
 80a2280:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2282:	60e3      	str	r3, [r4, #12]
 80a2284:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2288:	9204      	str	r2, [sp, #16]
 80a228a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a228c:	4b0a      	ldr	r3, [pc, #40]	; (80a22b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a228e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2290:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2292:	4b0a      	ldr	r3, [pc, #40]	; (80a22bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a2294:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2296:	a801      	add	r0, sp, #4
 80a2298:	f7ff fd66 	bl	80a1d68 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a229c:	2200      	movs	r2, #0
 80a229e:	4629      	mov	r1, r5
 80a22a0:	4807      	ldr	r0, [pc, #28]	; (80a22c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a22a2:	f7ff fc77 	bl	80a1b94 <application_thread_invoke>
 80a22a6:	4630      	mov	r0, r6
 80a22a8:	f7ff fd5e 	bl	80a1d68 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a22ac:	2110      	movs	r1, #16
 80a22ae:	4630      	mov	r0, r6
 80a22b0:	f001 fb2d 	bl	80a390e <_ZdlPvj>
        }
    }
 80a22b4:	b007      	add	sp, #28
 80a22b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a22b8:	080a1eff 	.word	0x080a1eff
 80a22bc:	080a21cd 	.word	0x080a21cd
 80a22c0:	080a1d23 	.word	0x080a1d23

080a22c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a22c4:	b530      	push	{r4, r5, lr}
 80a22c6:	4604      	mov	r4, r0
 80a22c8:	b085      	sub	sp, #20
 80a22ca:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a22cc:	4668      	mov	r0, sp
 80a22ce:	4611      	mov	r1, r2
 80a22d0:	f7ff fdba 	bl	80a1e48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a22d4:	b17c      	cbz	r4, 80a22f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a22d6:	b224      	sxth	r4, r4
 80a22d8:	4628      	mov	r0, r5
 80a22da:	b10d      	cbz	r5, 80a22e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a22dc:	f002 fe5e 	bl	80a4f9c <strdup>
 80a22e0:	9002      	str	r0, [sp, #8]
 80a22e2:	a902      	add	r1, sp, #8
 80a22e4:	4668      	mov	r0, sp
 80a22e6:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a22ea:	f7ff fe1f 	bl	80a1f2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a22ee:	a802      	add	r0, sp, #8
 80a22f0:	f7ff fd52 	bl	80a1d98 <_ZN8particle5ErrorD1Ev>
 80a22f4:	e01d      	b.n	80a2332 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a22f6:	f04f 0201 	mov.w	r2, #1
 80a22fa:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a22fc:	f88d 4008 	strb.w	r4, [sp, #8]
 80a2300:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a2304:	42a3      	cmp	r3, r4
 80a2306:	d103      	bne.n	80a2310 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a2308:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a230c:	2900      	cmp	r1, #0
 80a230e:	d1f7      	bne.n	80a2300 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a2310:	d002      	beq.n	80a2318 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a2312:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2316:	e00c      	b.n	80a2332 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a2318:	f110 010c 	adds.w	r1, r0, #12
 80a231c:	f04f 0301 	mov.w	r3, #1
 80a2320:	bf18      	it	ne
 80a2322:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2324:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a2328:	3004      	adds	r0, #4
 80a232a:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a232e:	f7ff ff71 	bl	80a2214 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a2332:	a801      	add	r0, sp, #4
 80a2334:	f7ff fd5a 	bl	80a1dec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a2338:	b005      	add	sp, #20
 80a233a:	bd30      	pop	{r4, r5, pc}

080a233c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a233c:	4770      	bx	lr

080a233e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a233e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2340:	4606      	mov	r6, r0
 80a2342:	4615      	mov	r5, r2
 80a2344:	460c      	mov	r4, r1
 80a2346:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2348:	42bc      	cmp	r4, r7
 80a234a:	d006      	beq.n	80a235a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a234c:	6833      	ldr	r3, [r6, #0]
 80a234e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2352:	689b      	ldr	r3, [r3, #8]
 80a2354:	4630      	mov	r0, r6
 80a2356:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2358:	e7f6      	b.n	80a2348 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a235a:	4628      	mov	r0, r5
 80a235c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a235e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a235e:	2200      	movs	r2, #0
 80a2360:	7c00      	ldrb	r0, [r0, #16]
 80a2362:	f7ff baad 	b.w	80a18c0 <HAL_I2C_Write_Data>

080a2366 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a2366:	2100      	movs	r1, #0
 80a2368:	7c00      	ldrb	r0, [r0, #16]
 80a236a:	f7ff bab1 	b.w	80a18d0 <HAL_I2C_Available_Data>

080a236e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a236e:	2100      	movs	r1, #0
 80a2370:	7c00      	ldrb	r0, [r0, #16]
 80a2372:	f7ff bab5 	b.w	80a18e0 <HAL_I2C_Read_Data>

080a2376 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a2376:	2100      	movs	r1, #0
 80a2378:	7c00      	ldrb	r0, [r0, #16]
 80a237a:	f7ff bab9 	b.w	80a18f0 <HAL_I2C_Peek_Data>

080a237e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a237e:	2100      	movs	r1, #0
 80a2380:	7c00      	ldrb	r0, [r0, #16]
 80a2382:	f7ff babd 	b.w	80a1900 <HAL_I2C_Flush_Data>

080a2386 <_ZN7TwoWireD0Ev>:
 80a2386:	b510      	push	{r4, lr}
 80a2388:	4604      	mov	r4, r0
 80a238a:	2114      	movs	r1, #20
 80a238c:	f001 fabf 	bl	80a390e <_ZdlPvj>
 80a2390:	4620      	mov	r0, r4
 80a2392:	bd10      	pop	{r4, pc}

080a2394 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2394:	b510      	push	{r4, lr}
 80a2396:	4604      	mov	r4, r0
 80a2398:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a239a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a239e:	60a3      	str	r3, [r4, #8]
 80a23a0:	4b04      	ldr	r3, [pc, #16]	; (80a23b4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a23a2:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a23a4:	7420      	strb	r0, [r4, #16]
 80a23a6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a23a8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a23aa:	f7ff fab9 	bl	80a1920 <HAL_I2C_Init>

}
 80a23ae:	4620      	mov	r0, r4
 80a23b0:	bd10      	pop	{r4, pc}
 80a23b2:	bf00      	nop
 80a23b4:	080a5564 	.word	0x080a5564

080a23b8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a23b8:	2300      	movs	r3, #0
 80a23ba:	461a      	mov	r2, r3
 80a23bc:	4619      	mov	r1, r3
 80a23be:	7c00      	ldrb	r0, [r0, #16]
 80a23c0:	f7ff ba5e 	b.w	80a1880 <HAL_I2C_Begin>

080a23c4 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a23c4:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a23c6:	2400      	movs	r4, #0
 80a23c8:	7c00      	ldrb	r0, [r0, #16]
 80a23ca:	9400      	str	r4, [sp, #0]
 80a23cc:	f7ff fa60 	bl	80a1890 <HAL_I2C_Request_Data>
  return result;
}
 80a23d0:	b2c0      	uxtb	r0, r0
 80a23d2:	b002      	add	sp, #8
 80a23d4:	bd10      	pop	{r4, pc}

080a23d6 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a23d6:	2301      	movs	r3, #1
 80a23d8:	b2d2      	uxtb	r2, r2
 80a23da:	b2c9      	uxtb	r1, r1
 80a23dc:	f7ff bff2 	b.w	80a23c4 <_ZN7TwoWire11requestFromEhhh>

080a23e0 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a23e0:	2200      	movs	r2, #0
 80a23e2:	7c00      	ldrb	r0, [r0, #16]
 80a23e4:	f7ff ba5c 	b.w	80a18a0 <HAL_I2C_Begin_Transmission>

080a23e8 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a23e8:	b2c9      	uxtb	r1, r1
 80a23ea:	f7ff bff9 	b.w	80a23e0 <_ZN7TwoWire17beginTransmissionEh>

080a23ee <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a23ee:	2200      	movs	r2, #0
 80a23f0:	7c00      	ldrb	r0, [r0, #16]
 80a23f2:	f7ff ba5d 	b.w	80a18b0 <HAL_I2C_End_Transmission>

080a23f6 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a23f6:	2101      	movs	r1, #1
 80a23f8:	f7ff bff9 	b.w	80a23ee <_ZN7TwoWire15endTransmissionEh>

080a23fc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a23fc:	2100      	movs	r1, #0
 80a23fe:	7c00      	ldrb	r0, [r0, #16]
 80a2400:	f7ff ba86 	b.w	80a1910 <HAL_I2C_Is_Enabled>

080a2404 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2404:	4770      	bx	lr

080a2406 <_ZN9IPAddressD0Ev>:
 80a2406:	b510      	push	{r4, lr}
 80a2408:	4604      	mov	r4, r0
 80a240a:	2118      	movs	r1, #24
 80a240c:	f001 fa7f 	bl	80a390e <_ZdlPvj>
 80a2410:	4620      	mov	r0, r4
 80a2412:	bd10      	pop	{r4, pc}

080a2414 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2416:	460f      	mov	r7, r1
 80a2418:	f100 0608 	add.w	r6, r0, #8
 80a241c:	1d05      	adds	r5, r0, #4
 80a241e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2420:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2424:	220a      	movs	r2, #10
 80a2426:	4638      	mov	r0, r7
 80a2428:	f000 f937 	bl	80a269a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a242c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a242e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2430:	d007      	beq.n	80a2442 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2432:	2c00      	cmp	r4, #0
 80a2434:	d0f4      	beq.n	80a2420 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2436:	212e      	movs	r1, #46	; 0x2e
 80a2438:	4638      	mov	r0, r7
 80a243a:	f000 f8eb 	bl	80a2614 <_ZN5Print5printEc>
 80a243e:	4404      	add	r4, r0
 80a2440:	e7ee      	b.n	80a2420 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2442:	4620      	mov	r0, r4
 80a2444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2448 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2448:	b510      	push	{r4, lr}
 80a244a:	4604      	mov	r4, r0
 80a244c:	4b04      	ldr	r3, [pc, #16]	; (80a2460 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a244e:	2211      	movs	r2, #17
 80a2450:	f840 3b04 	str.w	r3, [r0], #4
 80a2454:	2100      	movs	r1, #0
 80a2456:	f002 fd5e 	bl	80a4f16 <memset>
{
    clear();
}
 80a245a:	4620      	mov	r0, r4
 80a245c:	bd10      	pop	{r4, pc}
 80a245e:	bf00      	nop
 80a2460:	080a558c 	.word	0x080a558c

080a2464 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2464:	4603      	mov	r3, r0
 80a2466:	4a07      	ldr	r2, [pc, #28]	; (80a2484 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2468:	b510      	push	{r4, lr}
 80a246a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a246e:	f101 0210 	add.w	r2, r1, #16
 80a2472:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2476:	4291      	cmp	r1, r2
 80a2478:	f843 4b04 	str.w	r4, [r3], #4
 80a247c:	d1f9      	bne.n	80a2472 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a247e:	780a      	ldrb	r2, [r1, #0]
 80a2480:	701a      	strb	r2, [r3, #0]
}
 80a2482:	bd10      	pop	{r4, pc}
 80a2484:	080a558c 	.word	0x080a558c

080a2488 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2488:	4a02      	ldr	r2, [pc, #8]	; (80a2494 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a248a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a248c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a248e:	2204      	movs	r2, #4
 80a2490:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2492:	4770      	bx	lr
 80a2494:	080a558c 	.word	0x080a558c

080a2498 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2498:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a249a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a249e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a24a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a24a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a24aa:	2304      	movs	r3, #4
 80a24ac:	6041      	str	r1, [r0, #4]
 80a24ae:	7503      	strb	r3, [r0, #20]
 80a24b0:	bd10      	pop	{r4, pc}
	...

080a24b4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a24b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a24b6:	4d04      	ldr	r5, [pc, #16]	; (80a24c8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a24b8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a24ba:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a24be:	9500      	str	r5, [sp, #0]
 80a24c0:	f7ff ffea 	bl	80a2498 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a24c4:	b003      	add	sp, #12
 80a24c6:	bd30      	pop	{r4, r5, pc}
 80a24c8:	080a558c 	.word	0x080a558c

080a24cc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a24cc:	4a01      	ldr	r2, [pc, #4]	; (80a24d4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a24ce:	4b02      	ldr	r3, [pc, #8]	; (80a24d8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a24d0:	601a      	str	r2, [r3, #0]
 80a24d2:	4770      	bx	lr
 80a24d4:	080a560e 	.word	0x080a560e
 80a24d8:	20000614 	.word	0x20000614

080a24dc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a24dc:	2300      	movs	r3, #0
 80a24de:	461a      	mov	r2, r3
 80a24e0:	6840      	ldr	r0, [r0, #4]
 80a24e2:	f7ff bb9b 	b.w	80a1c1c <network_connect>

080a24e6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a24e6:	2200      	movs	r2, #0
 80a24e8:	2102      	movs	r1, #2
 80a24ea:	6840      	ldr	r0, [r0, #4]
 80a24ec:	f7ff bba6 	b.w	80a1c3c <network_disconnect>

080a24f0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a24f0:	2200      	movs	r2, #0
 80a24f2:	4611      	mov	r1, r2
 80a24f4:	6840      	ldr	r0, [r0, #4]
 80a24f6:	f7ff bb99 	b.w	80a1c2c <network_connecting>

080a24fa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a24fa:	2200      	movs	r2, #0
 80a24fc:	4611      	mov	r1, r2
 80a24fe:	6840      	ldr	r0, [r0, #4]
 80a2500:	f7ff bba4 	b.w	80a1c4c <network_ready>

080a2504 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2504:	2300      	movs	r3, #0
 80a2506:	461a      	mov	r2, r3
 80a2508:	4619      	mov	r1, r3
 80a250a:	6840      	ldr	r0, [r0, #4]
 80a250c:	f7ff bba6 	b.w	80a1c5c <network_on>

080a2510 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2510:	2300      	movs	r3, #0
 80a2512:	461a      	mov	r2, r3
 80a2514:	4619      	mov	r1, r3
 80a2516:	6840      	ldr	r0, [r0, #4]
 80a2518:	f7ff bba8 	b.w	80a1c6c <network_off>

080a251c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a251c:	2200      	movs	r2, #0
 80a251e:	f081 0101 	eor.w	r1, r1, #1
 80a2522:	6840      	ldr	r0, [r0, #4]
 80a2524:	f7ff bbaa 	b.w	80a1c7c <network_listen>

080a2528 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2528:	2200      	movs	r2, #0
 80a252a:	6840      	ldr	r0, [r0, #4]
 80a252c:	f7ff bbb6 	b.w	80a1c9c <network_set_listen_timeout>

080a2530 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2530:	2200      	movs	r2, #0
 80a2532:	4611      	mov	r1, r2
 80a2534:	6840      	ldr	r0, [r0, #4]
 80a2536:	f7ff bbb9 	b.w	80a1cac <network_get_listen_timeout>

080a253a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a253a:	2200      	movs	r2, #0
 80a253c:	4611      	mov	r1, r2
 80a253e:	6840      	ldr	r0, [r0, #4]
 80a2540:	f7ff bba4 	b.w	80a1c8c <network_listening>

080a2544 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2544:	b570      	push	{r4, r5, r6, lr}
 80a2546:	4616      	mov	r6, r2
 80a2548:	b08e      	sub	sp, #56	; 0x38
 80a254a:	4604      	mov	r4, r0
    IPAddress addr;
 80a254c:	a808      	add	r0, sp, #32
 80a254e:	f7ff ff7b 	bl	80a2448 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2552:	2211      	movs	r2, #17
 80a2554:	2100      	movs	r1, #0
 80a2556:	a803      	add	r0, sp, #12
 80a2558:	f002 fcdd 	bl	80a4f16 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a255c:	4630      	mov	r0, r6
 80a255e:	f002 fd38 	bl	80a4fd2 <strlen>
 80a2562:	2500      	movs	r5, #0
 80a2564:	4b0a      	ldr	r3, [pc, #40]	; (80a2590 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2566:	9500      	str	r5, [sp, #0]
 80a2568:	b281      	uxth	r1, r0
 80a256a:	685b      	ldr	r3, [r3, #4]
 80a256c:	aa03      	add	r2, sp, #12
 80a256e:	4630      	mov	r0, r6
 80a2570:	f7ff fae0 	bl	80a1b34 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2574:	b120      	cbz	r0, 80a2580 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2576:	4629      	mov	r1, r5
 80a2578:	4620      	mov	r0, r4
 80a257a:	f7ff ff85 	bl	80a2488 <_ZN9IPAddressC1Em>
 80a257e:	e003      	b.n	80a2588 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2580:	a903      	add	r1, sp, #12
 80a2582:	4620      	mov	r0, r4
 80a2584:	f7ff ff6e 	bl	80a2464 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2588:	4620      	mov	r0, r4
 80a258a:	b00e      	add	sp, #56	; 0x38
 80a258c:	bd70      	pop	{r4, r5, r6, pc}
 80a258e:	bf00      	nop
 80a2590:	20000a98 	.word	0x20000a98

080a2594 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a2594:	4b03      	ldr	r3, [pc, #12]	; (80a25a4 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a2596:	4a04      	ldr	r2, [pc, #16]	; (80a25a8 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a2598:	2804      	cmp	r0, #4
 80a259a:	bf0c      	ite	eq
 80a259c:	4610      	moveq	r0, r2
 80a259e:	4618      	movne	r0, r3
 80a25a0:	4770      	bx	lr
 80a25a2:	bf00      	nop
 80a25a4:	20000618 	.word	0x20000618
 80a25a8:	20000a98 	.word	0x20000a98

080a25ac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a25ac:	4b02      	ldr	r3, [pc, #8]	; (80a25b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a25ae:	4a03      	ldr	r2, [pc, #12]	; (80a25bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a25b0:	601a      	str	r2, [r3, #0]
 80a25b2:	2200      	movs	r2, #0
 80a25b4:	605a      	str	r2, [r3, #4]
 80a25b6:	4770      	bx	lr
 80a25b8:	20000618 	.word	0x20000618
 80a25bc:	080a5680 	.word	0x080a5680

080a25c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a25c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a25c2:	4606      	mov	r6, r0
 80a25c4:	460d      	mov	r5, r1
 80a25c6:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a25c8:	2400      	movs	r4, #0
  while (size--) {
 80a25ca:	42bd      	cmp	r5, r7
 80a25cc:	d00c      	beq.n	80a25e8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a25ce:	6833      	ldr	r3, [r6, #0]
 80a25d0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a25d4:	689b      	ldr	r3, [r3, #8]
 80a25d6:	4630      	mov	r0, r6
 80a25d8:	4798      	blx	r3
     if (chunk>=0)
 80a25da:	2800      	cmp	r0, #0
 80a25dc:	db01      	blt.n	80a25e2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a25de:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a25e0:	e7f3      	b.n	80a25ca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a25e2:	2c00      	cmp	r4, #0
 80a25e4:	bf08      	it	eq
 80a25e6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a25e8:	4620      	mov	r0, r4
 80a25ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a25ec <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a25ec:	b570      	push	{r4, r5, r6, lr}
 80a25ee:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a25f0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a25f2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a25f4:	b149      	cbz	r1, 80a260a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a25f6:	f002 fcec 	bl	80a4fd2 <strlen>
 80a25fa:	682b      	ldr	r3, [r5, #0]
 80a25fc:	4602      	mov	r2, r0
 80a25fe:	4621      	mov	r1, r4
 80a2600:	4628      	mov	r0, r5
    }
 80a2602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2606:	68db      	ldr	r3, [r3, #12]
 80a2608:	4718      	bx	r3
    }
 80a260a:	bd70      	pop	{r4, r5, r6, pc}

080a260c <_ZN5Print5printEPKc>:
 80a260c:	b508      	push	{r3, lr}
 80a260e:	f7ff ffed 	bl	80a25ec <_ZN5Print5writeEPKc>
 80a2612:	bd08      	pop	{r3, pc}

080a2614 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2614:	6803      	ldr	r3, [r0, #0]
 80a2616:	689b      	ldr	r3, [r3, #8]
 80a2618:	4718      	bx	r3

080a261a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a261a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a261c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a261e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2620:	f7ff fff8 	bl	80a2614 <_ZN5Print5printEc>
  n += print('\n');
 80a2624:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a2626:	4604      	mov	r4, r0
  n += print('\n');
 80a2628:	4628      	mov	r0, r5
 80a262a:	f7ff fff3 	bl	80a2614 <_ZN5Print5printEc>
  return n;
}
 80a262e:	4420      	add	r0, r4
 80a2630:	bd38      	pop	{r3, r4, r5, pc}

080a2632 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2632:	b538      	push	{r3, r4, r5, lr}
 80a2634:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2636:	f7ff ffd9 	bl	80a25ec <_ZN5Print5writeEPKc>
 80a263a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a263c:	4628      	mov	r0, r5
 80a263e:	f7ff ffec 	bl	80a261a <_ZN5Print7printlnEv>
  return n;
}
 80a2642:	4420      	add	r0, r4
 80a2644:	bd38      	pop	{r3, r4, r5, pc}

080a2646 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2646:	2a01      	cmp	r2, #1
 80a2648:	bf98      	it	ls
 80a264a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a264c:	b530      	push	{r4, r5, lr}
 80a264e:	460b      	mov	r3, r1
 80a2650:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2652:	2100      	movs	r1, #0
 80a2654:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2658:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a265c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a2660:	fb05 3312 	mls	r3, r5, r2, r3
 80a2664:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2666:	2b09      	cmp	r3, #9
 80a2668:	bf94      	ite	ls
 80a266a:	3330      	addls	r3, #48	; 0x30
 80a266c:	3337      	addhi	r3, #55	; 0x37
 80a266e:	b2db      	uxtb	r3, r3
 80a2670:	4621      	mov	r1, r4
 80a2672:	f804 3901 	strb.w	r3, [r4], #-1
 80a2676:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2678:	2d00      	cmp	r5, #0
 80a267a:	d1ef      	bne.n	80a265c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a267c:	f7ff ffb6 	bl	80a25ec <_ZN5Print5writeEPKc>
}
 80a2680:	b00b      	add	sp, #44	; 0x2c
 80a2682:	bd30      	pop	{r4, r5, pc}

080a2684 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a2684:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a2686:	b922      	cbnz	r2, 80a2692 <_ZN5Print5printEmi+0xe>
 80a2688:	6803      	ldr	r3, [r0, #0]
 80a268a:	b2c9      	uxtb	r1, r1
 80a268c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a268e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a2690:	4718      	bx	r3
  else return printNumber(n, base);
 80a2692:	b2d2      	uxtb	r2, r2
}
 80a2694:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2696:	f7ff bfd6 	b.w	80a2646 <_ZN5Print11printNumberEmh>

080a269a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a269a:	f7ff bff3 	b.w	80a2684 <_ZN5Print5printEmi>

080a269e <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 80a269e:	b538      	push	{r3, r4, r5, lr}
 80a26a0:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a26a2:	f7ff ffef 	bl	80a2684 <_ZN5Print5printEmi>
 80a26a6:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 80a26a8:	4628      	mov	r0, r5
 80a26aa:	f7ff ffb6 	bl	80a261a <_ZN5Print7printlnEv>
  return n;
}
 80a26ae:	4420      	add	r0, r4
 80a26b0:	bd38      	pop	{r3, r4, r5, pc}

080a26b2 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
 80a26b2:	b538      	push	{r3, r4, r5, lr}
 80a26b4:	4605      	mov	r5, r0
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
 80a26b6:	f7ff ffe5 	bl	80a2684 <_ZN5Print5printEmi>
 80a26ba:	4604      	mov	r4, r0
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a26bc:	4628      	mov	r0, r5
 80a26be:	f7ff ffac 	bl	80a261a <_ZN5Print7printlnEv>
  return n;
}
 80a26c2:	4420      	add	r0, r4
 80a26c4:	bd38      	pop	{r3, r4, r5, pc}

080a26c6 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 80a26c6:	b538      	push	{r3, r4, r5, lr}
 80a26c8:	4605      	mov	r5, r0
  size_t n = print(num, base);
 80a26ca:	f7ff ffdb 	bl	80a2684 <_ZN5Print5printEmi>
 80a26ce:	4604      	mov	r4, r0
  n += println();
 80a26d0:	4628      	mov	r0, r5
 80a26d2:	f7ff ffa2 	bl	80a261a <_ZN5Print7printlnEv>
  return n;
}
 80a26d6:	4420      	add	r0, r4
 80a26d8:	bd38      	pop	{r3, r4, r5, pc}

080a26da <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a26da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a26de:	4607      	mov	r7, r0
 80a26e0:	460e      	mov	r6, r1
  if (base == 0) {
 80a26e2:	4615      	mov	r5, r2
 80a26e4:	b92a      	cbnz	r2, 80a26f2 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a26e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a26ea:	6803      	ldr	r3, [r0, #0]
 80a26ec:	b2c9      	uxtb	r1, r1
 80a26ee:	689b      	ldr	r3, [r3, #8]
 80a26f0:	4718      	bx	r3
  } else if (base == 10) {
 80a26f2:	2a0a      	cmp	r2, #10
 80a26f4:	d102      	bne.n	80a26fc <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a26f6:	2900      	cmp	r1, #0
 80a26f8:	da01      	bge.n	80a26fe <_ZN5Print5printEli+0x24>
 80a26fa:	e004      	b.n	80a2706 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a26fc:	b2d2      	uxtb	r2, r2
  }
}
 80a26fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a2702:	f7ff bfa0 	b.w	80a2646 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a2706:	212d      	movs	r1, #45	; 0x2d
 80a2708:	f7ff ff84 	bl	80a2614 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a270c:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a270e:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a2710:	4271      	negs	r1, r6
 80a2712:	4638      	mov	r0, r7
 80a2714:	f7ff ff97 	bl	80a2646 <_ZN5Print11printNumberEmh>
 80a2718:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a271a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a271e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a271e:	b538      	push	{r3, r4, r5, lr}
 80a2720:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a2722:	f7ff ffda 	bl	80a26da <_ZN5Print5printEli>
 80a2726:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a2728:	4628      	mov	r0, r5
 80a272a:	f7ff ff76 	bl	80a261a <_ZN5Print7printlnEv>
  return n;
}
 80a272e:	4420      	add	r0, r4
 80a2730:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2734 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2738:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a273a:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a273c:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a273e:	4617      	mov	r7, r2
 80a2740:	461e      	mov	r6, r3
 80a2742:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2746:	f001 ff09 	bl	80a455c <__aeabi_dcmpun>
 80a274a:	b108      	cbz	r0, 80a2750 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a274c:	4947      	ldr	r1, [pc, #284]	; (80a286c <_ZN5Print10printFloatEdh+0x138>)
 80a274e:	e012      	b.n	80a2776 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a2750:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a2754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a2758:	4b45      	ldr	r3, [pc, #276]	; (80a2870 <_ZN5Print10printFloatEdh+0x13c>)
 80a275a:	4638      	mov	r0, r7
 80a275c:	4621      	mov	r1, r4
 80a275e:	f001 fefd 	bl	80a455c <__aeabi_dcmpun>
 80a2762:	b968      	cbnz	r0, 80a2780 <_ZN5Print10printFloatEdh+0x4c>
 80a2764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a2768:	4b41      	ldr	r3, [pc, #260]	; (80a2870 <_ZN5Print10printFloatEdh+0x13c>)
 80a276a:	4638      	mov	r0, r7
 80a276c:	4621      	mov	r1, r4
 80a276e:	f001 fed7 	bl	80a4520 <__aeabi_dcmple>
 80a2772:	b928      	cbnz	r0, 80a2780 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2774:	493f      	ldr	r1, [pc, #252]	; (80a2874 <_ZN5Print10printFloatEdh+0x140>)
 80a2776:	4640      	mov	r0, r8
 80a2778:	f7ff ff38 	bl	80a25ec <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a277c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a2780:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2784:	4b3c      	ldr	r3, [pc, #240]	; (80a2878 <_ZN5Print10printFloatEdh+0x144>)
 80a2786:	4638      	mov	r0, r7
 80a2788:	4631      	mov	r1, r6
 80a278a:	f001 fedd 	bl	80a4548 <__aeabi_dcmpgt>
 80a278e:	b108      	cbz	r0, 80a2794 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2790:	493a      	ldr	r1, [pc, #232]	; (80a287c <_ZN5Print10printFloatEdh+0x148>)
 80a2792:	e7f0      	b.n	80a2776 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a2794:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2798:	4b39      	ldr	r3, [pc, #228]	; (80a2880 <_ZN5Print10printFloatEdh+0x14c>)
 80a279a:	4638      	mov	r0, r7
 80a279c:	4631      	mov	r1, r6
 80a279e:	f001 feb5 	bl	80a450c <__aeabi_dcmplt>
 80a27a2:	2800      	cmp	r0, #0
 80a27a4:	d1f4      	bne.n	80a2790 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a27a6:	2200      	movs	r2, #0
 80a27a8:	2300      	movs	r3, #0
 80a27aa:	4638      	mov	r0, r7
 80a27ac:	4631      	mov	r1, r6
 80a27ae:	f001 fead 	bl	80a450c <__aeabi_dcmplt>
 80a27b2:	b138      	cbz	r0, 80a27c4 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a27b4:	212d      	movs	r1, #45	; 0x2d
 80a27b6:	4640      	mov	r0, r8
 80a27b8:	f7ff ff2c 	bl	80a2614 <_ZN5Print5printEc>
     number = -number;
 80a27bc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a27c0:	4604      	mov	r4, r0
 80a27c2:	e000      	b.n	80a27c6 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a27c4:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a27c6:	492f      	ldr	r1, [pc, #188]	; (80a2884 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a27c8:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a27cc:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a27ce:	fa5f f389 	uxtb.w	r3, r9
 80a27d2:	429d      	cmp	r5, r3
 80a27d4:	d906      	bls.n	80a27e4 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a27d6:	2200      	movs	r2, #0
 80a27d8:	4b2b      	ldr	r3, [pc, #172]	; (80a2888 <_ZN5Print10printFloatEdh+0x154>)
 80a27da:	f001 fd4f 	bl	80a427c <__aeabi_ddiv>
 80a27de:	f109 0901 	add.w	r9, r9, #1
 80a27e2:	e7f4      	b.n	80a27ce <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a27e4:	463a      	mov	r2, r7
 80a27e6:	4633      	mov	r3, r6
 80a27e8:	f001 fa6c 	bl	80a3cc4 <__adddf3>
 80a27ec:	460f      	mov	r7, r1
 80a27ee:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a27f0:	f001 fef2 	bl	80a45d8 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a27f4:	220a      	movs	r2, #10
 80a27f6:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a27f8:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a27fa:	4640      	mov	r0, r8
 80a27fc:	f7ff ff23 	bl	80a2646 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2800:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a2802:	b37d      	cbz	r5, 80a2864 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a2804:	4648      	mov	r0, r9
 80a2806:	f001 fb99 	bl	80a3f3c <__aeabi_ui2d>
 80a280a:	4602      	mov	r2, r0
 80a280c:	460b      	mov	r3, r1
 80a280e:	4630      	mov	r0, r6
 80a2810:	4639      	mov	r1, r7
 80a2812:	f001 fa55 	bl	80a3cc0 <__aeabi_dsub>
 80a2816:	4606      	mov	r6, r0
 80a2818:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a281a:	4640      	mov	r0, r8
 80a281c:	491b      	ldr	r1, [pc, #108]	; (80a288c <_ZN5Print10printFloatEdh+0x158>)
 80a281e:	f7ff fee5 	bl	80a25ec <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a2822:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a2824:	4b18      	ldr	r3, [pc, #96]	; (80a2888 <_ZN5Print10printFloatEdh+0x154>)
 80a2826:	2200      	movs	r2, #0
 80a2828:	4630      	mov	r0, r6
 80a282a:	4639      	mov	r1, r7
 80a282c:	f001 fbfc 	bl	80a4028 <__aeabi_dmul>
 80a2830:	460f      	mov	r7, r1
 80a2832:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a2834:	f001 fea8 	bl	80a4588 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a2838:	220a      	movs	r2, #10
 80a283a:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a283c:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a283e:	4640      	mov	r0, r8
 80a2840:	f7ff ff4b 	bl	80a26da <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a2844:	4404      	add	r4, r0
    remainder -= toPrint;
 80a2846:	4648      	mov	r0, r9
 80a2848:	f001 fb88 	bl	80a3f5c <__aeabi_i2d>
 80a284c:	4602      	mov	r2, r0
 80a284e:	460b      	mov	r3, r1
 80a2850:	4630      	mov	r0, r6
 80a2852:	4639      	mov	r1, r7
 80a2854:	f001 fa34 	bl	80a3cc0 <__aeabi_dsub>
 80a2858:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a285a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a285e:	4606      	mov	r6, r0
 80a2860:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a2862:	d1df      	bne.n	80a2824 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2864:	4620      	mov	r0, r4
 80a2866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a286a:	bf00      	nop
 80a286c:	080a56ac 	.word	0x080a56ac
 80a2870:	7fefffff 	.word	0x7fefffff
 80a2874:	080a56b6 	.word	0x080a56b6
 80a2878:	41efffff 	.word	0x41efffff
 80a287c:	080a56b0 	.word	0x080a56b0
 80a2880:	c1efffff 	.word	0xc1efffff
 80a2884:	3fe00000 	.word	0x3fe00000
 80a2888:	40240000 	.word	0x40240000
 80a288c:	080a56b4 	.word	0x080a56b4

080a2890 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a2890:	f89d 1000 	ldrb.w	r1, [sp]
 80a2894:	9100      	str	r1, [sp, #0]
 80a2896:	f7ff bf4d 	b.w	80a2734 <_ZN5Print10printFloatEdh>

080a289a <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a289a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a289c:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a28a0:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a28a2:	9100      	str	r1, [sp, #0]
 80a28a4:	f7ff ff46 	bl	80a2734 <_ZN5Print10printFloatEdh>
 80a28a8:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a28aa:	4628      	mov	r0, r5
 80a28ac:	f7ff feb5 	bl	80a261a <_ZN5Print7printlnEv>
  return n;
}
 80a28b0:	4420      	add	r0, r4
 80a28b2:	b003      	add	sp, #12
 80a28b4:	bd30      	pop	{r4, r5, pc}

080a28b6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a28b6:	b510      	push	{r4, lr}
 80a28b8:	4604      	mov	r4, r0
 80a28ba:	f7ff fa55 	bl	80a1d68 <_ZNSt14_Function_baseD1Ev>
 80a28be:	4620      	mov	r0, r4
 80a28c0:	bd10      	pop	{r4, pc}
	...

080a28c4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a28c4:	4803      	ldr	r0, [pc, #12]	; (80a28d4 <_GLOBAL__sub_I_RGB+0x10>)
 80a28c6:	2300      	movs	r3, #0
 80a28c8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a28ca:	4a03      	ldr	r2, [pc, #12]	; (80a28d8 <_GLOBAL__sub_I_RGB+0x14>)
 80a28cc:	4903      	ldr	r1, [pc, #12]	; (80a28dc <_GLOBAL__sub_I_RGB+0x18>)
 80a28ce:	f001 b819 	b.w	80a3904 <__aeabi_atexit>
 80a28d2:	bf00      	nop
 80a28d4:	20000620 	.word	0x20000620
 80a28d8:	200000a8 	.word	0x200000a8
 80a28dc:	080a28b7 	.word	0x080a28b7

080a28e0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a28e0:	4770      	bx	lr

080a28e2 <_ZN8SPIClassD0Ev>:
 80a28e2:	b510      	push	{r4, lr}
 80a28e4:	4604      	mov	r4, r0
 80a28e6:	2110      	movs	r1, #16
 80a28e8:	f001 f811 	bl	80a390e <_ZdlPvj>
 80a28ec:	4620      	mov	r0, r4
 80a28ee:	bd10      	pop	{r4, pc}

080a28f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a28f0:	b570      	push	{r4, r5, r6, lr}
 80a28f2:	4604      	mov	r4, r0
 80a28f4:	460e      	mov	r6, r1
 80a28f6:	4b07      	ldr	r3, [pc, #28]	; (80a2914 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a28f8:	2500      	movs	r5, #0
 80a28fa:	6003      	str	r3, [r0, #0]
 80a28fc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a2900:	f7fe ff7e 	bl	80a1800 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a2904:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a2906:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a2908:	f7ff f87c 	bl	80a1a04 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a290c:	60a5      	str	r5, [r4, #8]
}
 80a290e:	4620      	mov	r0, r4
 80a2910:	bd70      	pop	{r4, r5, r6, pc}
 80a2912:	bf00      	nop
 80a2914:	080a56c4 	.word	0x080a56c4

080a2918 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a2918:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a291c:	7900      	ldrb	r0, [r0, #4]
 80a291e:	f7ff b849 	b.w	80a19b4 <HAL_SPI_Begin>

080a2922 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a2922:	7900      	ldrb	r0, [r0, #4]
 80a2924:	f7ff b84e 	b.w	80a19c4 <HAL_SPI_Set_Bit_Order>

080a2928 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a2928:	7900      	ldrb	r0, [r0, #4]
 80a292a:	f7ff b853 	b.w	80a19d4 <HAL_SPI_Set_Data_Mode>
	...

080a2930 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a2930:	4a05      	ldr	r2, [pc, #20]	; (80a2948 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a2932:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a2934:	5c99      	ldrb	r1, [r3, r2]
 80a2936:	4281      	cmp	r1, r0
 80a2938:	d002      	beq.n	80a2940 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a293a:	3301      	adds	r3, #1
 80a293c:	2b08      	cmp	r3, #8
 80a293e:	d1f9      	bne.n	80a2934 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a2940:	1c58      	adds	r0, r3, #1
}
 80a2942:	b2c0      	uxtb	r0, r0
 80a2944:	4770      	bx	lr
 80a2946:	bf00      	nop
 80a2948:	080a56cc 	.word	0x080a56cc

080a294c <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a294c:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a294e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2950:	6018      	str	r0, [r3, #0]
 80a2952:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a2954:	6818      	ldr	r0, [r3, #0]
 80a2956:	b2e5      	uxtb	r5, r4
 80a2958:	4288      	cmp	r0, r1
 80a295a:	d906      	bls.n	80a296a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a295c:	3401      	adds	r4, #1
 80a295e:	2c08      	cmp	r4, #8
 80a2960:	d002      	beq.n	80a2968 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a2962:	0840      	lsrs	r0, r0, #1
 80a2964:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a2966:	e7f5      	b.n	80a2954 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a2968:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a296a:	4b02      	ldr	r3, [pc, #8]	; (80a2974 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a296c:	5d5b      	ldrb	r3, [r3, r5]
 80a296e:	7013      	strb	r3, [r2, #0]
 80a2970:	bd30      	pop	{r4, r5, pc}
 80a2972:	bf00      	nop
 80a2974:	080a56cc 	.word	0x080a56cc

080a2978 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2978:	b570      	push	{r4, r5, r6, lr}
 80a297a:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a297c:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2980:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a2982:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a2984:	2214      	movs	r2, #20
 80a2986:	2100      	movs	r1, #0
 80a2988:	a803      	add	r0, sp, #12
 80a298a:	f002 fac4 	bl	80a4f16 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a298e:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a2990:	a903      	add	r1, sp, #12
 80a2992:	4630      	mov	r0, r6
 80a2994:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a2996:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a299a:	f7ff f843 	bl	80a1a24 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a299e:	ab02      	add	r3, sp, #8
 80a29a0:	f10d 0207 	add.w	r2, sp, #7
 80a29a4:	4629      	mov	r1, r5
 80a29a6:	9804      	ldr	r0, [sp, #16]
 80a29a8:	f7ff ffd0 	bl	80a294c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a29ac:	7920      	ldrb	r0, [r4, #4]
 80a29ae:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a29b2:	f7ff f817 	bl	80a19e4 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a29b6:	9802      	ldr	r0, [sp, #8]
 80a29b8:	b008      	add	sp, #32
 80a29ba:	bd70      	pop	{r4, r5, r6, pc}

080a29bc <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a29bc:	b538      	push	{r3, r4, r5, lr}
 80a29be:	4604      	mov	r4, r0
    if (dividerReference)
 80a29c0:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a29c2:	4608      	mov	r0, r1
    if (dividerReference)
 80a29c4:	b14d      	cbz	r5, 80a29da <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a29c6:	f7ff ffb3 	bl	80a2930 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a29ca:	2201      	movs	r2, #1
 80a29cc:	fa25 f100 	lsr.w	r1, r5, r0
 80a29d0:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a29d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a29d6:	f7ff bfcf 	b.w	80a2978 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a29da:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a29dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a29e0:	f7ff b800 	b.w	80a19e4 <HAL_SPI_Set_Clock_Divider>

080a29e4 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a29e4:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a29e6:	7900      	ldrb	r0, [r0, #4]
 80a29e8:	f7ff f804 	bl	80a19f4 <HAL_SPI_Send_Receive_Data>
}
 80a29ec:	b2c0      	uxtb	r0, r0
 80a29ee:	bd08      	pop	{r3, pc}

080a29f0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a29f0:	7900      	ldrb	r0, [r0, #4]
 80a29f2:	f7ff b80f 	b.w	80a1a14 <HAL_SPI_Is_Enabled>
	...

080a29f8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a29f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a29fc:	4680      	mov	r8, r0
 80a29fe:	460d      	mov	r5, r1
 80a2a00:	4617      	mov	r7, r2
 80a2a02:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a2a04:	2200      	movs	r2, #0
 80a2a06:	2300      	movs	r3, #0
 80a2a08:	4640      	mov	r0, r8
 80a2a0a:	4629      	mov	r1, r5
 80a2a0c:	f001 fd7e 	bl	80a450c <__aeabi_dcmplt>
 80a2a10:	b120      	cbz	r0, 80a2a1c <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a2a12:	232d      	movs	r3, #45	; 0x2d
 80a2a14:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a2a16:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a2a1a:	3601      	adds	r6, #1
 80a2a1c:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a2a1e:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a2a20:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a2a22:	b2d9      	uxtb	r1, r3
 80a2a24:	428f      	cmp	r7, r1
 80a2a26:	d902      	bls.n	80a2a2e <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a2a28:	4354      	muls	r4, r2
 80a2a2a:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a2a2c:	e7f9      	b.n	80a2a22 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a2a2e:	4620      	mov	r0, r4
 80a2a30:	f001 fa94 	bl	80a3f5c <__aeabi_i2d>
 80a2a34:	4642      	mov	r2, r8
 80a2a36:	462b      	mov	r3, r5
 80a2a38:	f001 faf6 	bl	80a4028 <__aeabi_dmul>
 80a2a3c:	4682      	mov	sl, r0
 80a2a3e:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a2a40:	f002 f8b0 	bl	80a4ba4 <__aeabi_d2ulz>
 80a2a44:	4680      	mov	r8, r0
 80a2a46:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a2a48:	f001 fab8 	bl	80a3fbc <__aeabi_ul2d>
 80a2a4c:	4602      	mov	r2, r0
 80a2a4e:	460b      	mov	r3, r1
 80a2a50:	4650      	mov	r0, sl
 80a2a52:	4659      	mov	r1, fp
 80a2a54:	f001 f934 	bl	80a3cc0 <__aeabi_dsub>
 80a2a58:	2200      	movs	r2, #0
 80a2a5a:	4b17      	ldr	r3, [pc, #92]	; (80a2ab8 <_Z4dtoadhPc+0xc0>)
 80a2a5c:	f001 fd6a 	bl	80a4534 <__aeabi_dcmpge>
 80a2a60:	b118      	cbz	r0, 80a2a6a <_Z4dtoadhPc+0x72>
        fixed++;
 80a2a62:	f118 0801 	adds.w	r8, r8, #1
 80a2a66:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a2a6a:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a2a6c:	4622      	mov	r2, r4
 80a2a6e:	462b      	mov	r3, r5
 80a2a70:	4640      	mov	r0, r8
 80a2a72:	4649      	mov	r1, r9
 80a2a74:	f002 f87e 	bl	80a4b74 <__aeabi_uldivmod>
 80a2a78:	2301      	movs	r3, #1
 80a2a7a:	220a      	movs	r2, #10
 80a2a7c:	4631      	mov	r1, r6
 80a2a7e:	f000 fdd4 	bl	80a362a <ultoa>
    if (prec) {
 80a2a82:	b1af      	cbz	r7, 80a2ab0 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a2a84:	4630      	mov	r0, r6
 80a2a86:	f002 faa4 	bl	80a4fd2 <strlen>
        *sout++ = '.';
 80a2a8a:	232e      	movs	r3, #46	; 0x2e
 80a2a8c:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a2a8e:	3001      	adds	r0, #1
 80a2a90:	4406      	add	r6, r0
 80a2a92:	4622      	mov	r2, r4
 80a2a94:	462b      	mov	r3, r5
 80a2a96:	4640      	mov	r0, r8
 80a2a98:	4649      	mov	r1, r9
 80a2a9a:	f002 f86b 	bl	80a4b74 <__aeabi_uldivmod>
 80a2a9e:	463b      	mov	r3, r7
 80a2aa0:	4610      	mov	r0, r2
 80a2aa2:	4631      	mov	r1, r6
 80a2aa4:	220a      	movs	r2, #10
    }
}
 80a2aa6:	b001      	add	sp, #4
 80a2aa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a2aac:	f000 bdbd 	b.w	80a362a <ultoa>
    }
}
 80a2ab0:	b001      	add	sp, #4
 80a2ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2ab6:	bf00      	nop
 80a2ab8:	3fe00000 	.word	0x3fe00000

080a2abc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2abc:	b510      	push	{r4, lr}
 80a2abe:	4604      	mov	r4, r0
{
	free(buffer);
 80a2ac0:	6800      	ldr	r0, [r0, #0]
 80a2ac2:	f7ff f903 	bl	80a1ccc <free>
}
 80a2ac6:	4620      	mov	r0, r4
 80a2ac8:	bd10      	pop	{r4, pc}

080a2aca <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2aca:	b510      	push	{r4, lr}
 80a2acc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2ace:	6800      	ldr	r0, [r0, #0]
 80a2ad0:	b108      	cbz	r0, 80a2ad6 <_ZN6String10invalidateEv+0xc>
 80a2ad2:	f7ff f8fb 	bl	80a1ccc <free>
	buffer = NULL;
 80a2ad6:	2300      	movs	r3, #0
 80a2ad8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a2ada:	60a3      	str	r3, [r4, #8]
 80a2adc:	6063      	str	r3, [r4, #4]
 80a2ade:	bd10      	pop	{r4, pc}

080a2ae0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2ae0:	b538      	push	{r3, r4, r5, lr}
 80a2ae2:	4604      	mov	r4, r0
 80a2ae4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2ae6:	6800      	ldr	r0, [r0, #0]
 80a2ae8:	3101      	adds	r1, #1
 80a2aea:	f7ff f8f7 	bl	80a1cdc <realloc>
	if (newbuffer) {
 80a2aee:	b110      	cbz	r0, 80a2af6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2af0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a2af4:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2af6:	bd38      	pop	{r3, r4, r5, pc}

080a2af8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2af8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2afa:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2afc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2afe:	b113      	cbz	r3, 80a2b06 <_ZN6String7reserveEj+0xe>
 80a2b00:	6843      	ldr	r3, [r0, #4]
 80a2b02:	428b      	cmp	r3, r1
 80a2b04:	d207      	bcs.n	80a2b16 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a2b06:	4620      	mov	r0, r4
 80a2b08:	f7ff ffea 	bl	80a2ae0 <_ZN6String12changeBufferEj>
 80a2b0c:	b120      	cbz	r0, 80a2b18 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a2b0e:	68a3      	ldr	r3, [r4, #8]
 80a2b10:	b90b      	cbnz	r3, 80a2b16 <_ZN6String7reserveEj+0x1e>
 80a2b12:	6822      	ldr	r2, [r4, #0]
 80a2b14:	7013      	strb	r3, [r2, #0]
 80a2b16:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a2b18:	bd10      	pop	{r4, pc}

080a2b1a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2b1a:	b570      	push	{r4, r5, r6, lr}
 80a2b1c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2b1e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2b20:	4604      	mov	r4, r0
 80a2b22:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2b24:	f7ff ffe8 	bl	80a2af8 <_ZN6String7reserveEj>
 80a2b28:	b918      	cbnz	r0, 80a2b32 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a2b2a:	4620      	mov	r0, r4
 80a2b2c:	f7ff ffcd 	bl	80a2aca <_ZN6String10invalidateEv>
		return *this;
 80a2b30:	e009      	b.n	80a2b46 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a2b32:	462a      	mov	r2, r5
 80a2b34:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a2b36:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2b38:	6820      	ldr	r0, [r4, #0]
 80a2b3a:	f002 f9e1 	bl	80a4f00 <memcpy>
	buffer[len] = 0;
 80a2b3e:	6822      	ldr	r2, [r4, #0]
 80a2b40:	68a3      	ldr	r3, [r4, #8]
 80a2b42:	2100      	movs	r1, #0
 80a2b44:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a2b46:	4620      	mov	r0, r4
 80a2b48:	bd70      	pop	{r4, r5, r6, pc}

080a2b4a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2b4a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2b4c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2b4e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2b50:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2b52:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2b54:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2b56:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a2b58:	460d      	mov	r5, r1
 80a2b5a:	b139      	cbz	r1, 80a2b6c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a2b5c:	4608      	mov	r0, r1
 80a2b5e:	f002 fa38 	bl	80a4fd2 <strlen>
 80a2b62:	4629      	mov	r1, r5
 80a2b64:	4602      	mov	r2, r0
 80a2b66:	4620      	mov	r0, r4
 80a2b68:	f7ff ffd7 	bl	80a2b1a <_ZN6String4copyEPKcj>
}
 80a2b6c:	4620      	mov	r0, r4
 80a2b6e:	bd38      	pop	{r3, r4, r5, pc}

080a2b70 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a2b70:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a2b72:	b510      	push	{r4, lr}
 80a2b74:	460b      	mov	r3, r1
 80a2b76:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a2b78:	d007      	beq.n	80a2b8a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a2b7a:	6809      	ldr	r1, [r1, #0]
 80a2b7c:	b119      	cbz	r1, 80a2b86 <_ZN6StringaSERKS_+0x16>
 80a2b7e:	689a      	ldr	r2, [r3, #8]
 80a2b80:	f7ff ffcb 	bl	80a2b1a <_ZN6String4copyEPKcj>
 80a2b84:	e001      	b.n	80a2b8a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a2b86:	f7ff ffa0 	bl	80a2aca <_ZN6String10invalidateEv>

	return *this;
}
 80a2b8a:	4620      	mov	r0, r4
 80a2b8c:	bd10      	pop	{r4, pc}

080a2b8e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a2b8e:	b510      	push	{r4, lr}
 80a2b90:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2b92:	2300      	movs	r3, #0
 80a2b94:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2b96:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2b98:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2b9a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a2b9c:	f7ff ffe8 	bl	80a2b70 <_ZN6StringaSERKS_>
}
 80a2ba0:	4620      	mov	r0, r4
 80a2ba2:	bd10      	pop	{r4, pc}

080a2ba4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a2ba4:	b538      	push	{r3, r4, r5, lr}
 80a2ba6:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2ba8:	460c      	mov	r4, r1
 80a2baa:	b141      	cbz	r1, 80a2bbe <_ZN6StringaSEPKc+0x1a>
 80a2bac:	4608      	mov	r0, r1
 80a2bae:	f002 fa10 	bl	80a4fd2 <strlen>
 80a2bb2:	4621      	mov	r1, r4
 80a2bb4:	4602      	mov	r2, r0
 80a2bb6:	4628      	mov	r0, r5
 80a2bb8:	f7ff ffaf 	bl	80a2b1a <_ZN6String4copyEPKcj>
 80a2bbc:	e001      	b.n	80a2bc2 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a2bbe:	f7ff ff84 	bl	80a2aca <_ZN6String10invalidateEv>

	return *this;
}
 80a2bc2:	4628      	mov	r0, r5
 80a2bc4:	bd38      	pop	{r3, r4, r5, pc}

080a2bc6 <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 80a2bc6:	b510      	push	{r4, lr}
 80a2bc8:	4604      	mov	r4, r0
 80a2bca:	b08a      	sub	sp, #40	; 0x28
 80a2bcc:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2bce:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 80a2bd0:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2bd2:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a2bd4:	6063      	str	r3, [r4, #4]
	len = 0;
 80a2bd6:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a2bd8:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a2bda:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80a2bde:	ab01      	add	r3, sp, #4
 80a2be0:	f7ff ff0a 	bl	80a29f8 <_Z4dtoadhPc>
        *this = buf;
 80a2be4:	a901      	add	r1, sp, #4
 80a2be6:	4620      	mov	r0, r4
 80a2be8:	f7ff ffdc 	bl	80a2ba4 <_ZN6StringaSEPKc>
}
 80a2bec:	4620      	mov	r0, r4
 80a2bee:	b00a      	add	sp, #40	; 0x28
 80a2bf0:	bd10      	pop	{r4, pc}

080a2bf2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a2bf2:	b570      	push	{r4, r5, r6, lr}
 80a2bf4:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a2bf6:	460e      	mov	r6, r1
 80a2bf8:	b909      	cbnz	r1, 80a2bfe <_ZN6String6concatEPKcj+0xc>
 80a2bfa:	2000      	movs	r0, #0
 80a2bfc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a2bfe:	b16a      	cbz	r2, 80a2c1c <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a2c00:	6883      	ldr	r3, [r0, #8]
 80a2c02:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a2c04:	4629      	mov	r1, r5
 80a2c06:	f7ff ff77 	bl	80a2af8 <_ZN6String7reserveEj>
 80a2c0a:	2800      	cmp	r0, #0
 80a2c0c:	d0f5      	beq.n	80a2bfa <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a2c0e:	6820      	ldr	r0, [r4, #0]
 80a2c10:	68a3      	ldr	r3, [r4, #8]
 80a2c12:	4631      	mov	r1, r6
 80a2c14:	4418      	add	r0, r3
 80a2c16:	f002 f9b9 	bl	80a4f8c <strcpy>
	len = newlen;
 80a2c1a:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a2c1c:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a2c1e:	bd70      	pop	{r4, r5, r6, pc}

080a2c20 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 80a2c20:	688a      	ldr	r2, [r1, #8]
 80a2c22:	6809      	ldr	r1, [r1, #0]
 80a2c24:	f7ff bfe5 	b.w	80a2bf2 <_ZN6String6concatEPKcj>

080a2c28 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a2c28:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a2c2a:	688a      	ldr	r2, [r1, #8]
 80a2c2c:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a2c2e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a2c30:	f7ff ffdf 	bl	80a2bf2 <_ZN6String6concatEPKcj>
 80a2c34:	b910      	cbnz	r0, 80a2c3c <_ZplRK15StringSumHelperRK6String+0x14>
 80a2c36:	4620      	mov	r0, r4
 80a2c38:	f7ff ff47 	bl	80a2aca <_ZN6String10invalidateEv>
	return a;
}
 80a2c3c:	4620      	mov	r0, r4
 80a2c3e:	bd10      	pop	{r4, pc}

080a2c40 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a2c40:	b538      	push	{r3, r4, r5, lr}
 80a2c42:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a2c44:	460d      	mov	r5, r1
 80a2c46:	b141      	cbz	r1, 80a2c5a <_ZplRK15StringSumHelperPKc+0x1a>
 80a2c48:	4608      	mov	r0, r1
 80a2c4a:	f002 f9c2 	bl	80a4fd2 <strlen>
 80a2c4e:	4629      	mov	r1, r5
 80a2c50:	4602      	mov	r2, r0
 80a2c52:	4620      	mov	r0, r4
 80a2c54:	f7ff ffcd 	bl	80a2bf2 <_ZN6String6concatEPKcj>
 80a2c58:	b910      	cbnz	r0, 80a2c60 <_ZplRK15StringSumHelperPKc+0x20>
 80a2c5a:	4620      	mov	r0, r4
 80a2c5c:	f7ff ff35 	bl	80a2aca <_ZN6String10invalidateEv>
	return a;
}
 80a2c60:	4620      	mov	r0, r4
 80a2c62:	bd38      	pop	{r3, r4, r5, pc}

080a2c64 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a2c64:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2c66:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a2c68:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2c6a:	b912      	cbnz	r2, 80a2c72 <_ZNK6String6equalsEPKc+0xe>
 80a2c6c:	b919      	cbnz	r1, 80a2c76 <_ZNK6String6equalsEPKc+0x12>
 80a2c6e:	2001      	movs	r0, #1
 80a2c70:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a2c72:	b911      	cbnz	r1, 80a2c7a <_ZNK6String6equalsEPKc+0x16>
 80a2c74:	6803      	ldr	r3, [r0, #0]
 80a2c76:	7818      	ldrb	r0, [r3, #0]
 80a2c78:	e002      	b.n	80a2c80 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a2c7a:	6800      	ldr	r0, [r0, #0]
 80a2c7c:	f002 f97c 	bl	80a4f78 <strcmp>
 80a2c80:	fab0 f080 	clz	r0, r0
 80a2c84:	0940      	lsrs	r0, r0, #5
}
 80a2c86:	bd08      	pop	{r3, pc}

080a2c88 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
 80a2c88:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a2c8a:	6883      	ldr	r3, [r0, #8]
 80a2c8c:	4293      	cmp	r3, r2
 80a2c8e:	d907      	bls.n	80a2ca0 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 80a2c90:	6804      	ldr	r4, [r0, #0]
 80a2c92:	6809      	ldr	r1, [r1, #0]
 80a2c94:	18a0      	adds	r0, r4, r2
 80a2c96:	f002 f9a4 	bl	80a4fe2 <strstr>
	if (found == NULL) return -1;
 80a2c9a:	b108      	cbz	r0, 80a2ca0 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
 80a2c9c:	1b00      	subs	r0, r0, r4
 80a2c9e:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
 80a2ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
 80a2ca4:	bd10      	pop	{r4, pc}

080a2ca6 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
 80a2ca6:	2200      	movs	r2, #0
 80a2ca8:	f7ff bfee 	b.w	80a2c88 <_ZNK6String7indexOfERKS_j>

080a2cac <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a2cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2cb0:	461c      	mov	r4, r3
	if (left > right) {
 80a2cb2:	429a      	cmp	r2, r3
 80a2cb4:	bf88      	it	hi
 80a2cb6:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a2cb8:	460e      	mov	r6, r1
 80a2cba:	4615      	mov	r5, r2
	if (left > right) {
 80a2cbc:	bf88      	it	hi
 80a2cbe:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a2cc0:	490d      	ldr	r1, [pc, #52]	; (80a2cf8 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 80a2cc2:	bf88      	it	hi
 80a2cc4:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a2cc6:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a2cc8:	f7ff ff3f 	bl	80a2b4a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 80a2ccc:	68b1      	ldr	r1, [r6, #8]
 80a2cce:	428d      	cmp	r5, r1
 80a2cd0:	d80f      	bhi.n	80a2cf2 <_ZNK6String9substringEjj+0x46>
 80a2cd2:	428c      	cmp	r4, r1
 80a2cd4:	bf28      	it	cs
 80a2cd6:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a2cd8:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 80a2cda:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a2cdc:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 80a2ce0:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 80a2ce2:	6831      	ldr	r1, [r6, #0]
 80a2ce4:	4638      	mov	r0, r7
 80a2ce6:	4429      	add	r1, r5
 80a2ce8:	f7ff ff5c 	bl	80a2ba4 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 80a2cec:	6833      	ldr	r3, [r6, #0]
 80a2cee:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 80a2cf2:	4638      	mov	r0, r7
 80a2cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2cf8:	080a5527 	.word	0x080a5527

080a2cfc <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
 80a2cfc:	b510      	push	{r4, lr}
 80a2cfe:	4604      	mov	r4, r0
	return substring(left, len);
 80a2d00:	688b      	ldr	r3, [r1, #8]
 80a2d02:	f7ff ffd3 	bl	80a2cac <_ZNK6String9substringEjj>
}
 80a2d06:	4620      	mov	r0, r4
 80a2d08:	bd10      	pop	{r4, pc}
	...

080a2d0c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a2d0c:	b40e      	push	{r1, r2, r3}
 80a2d0e:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a2d10:	ac09      	add	r4, sp, #36	; 0x24
 80a2d12:	f854 7b04 	ldr.w	r7, [r4], #4
 80a2d16:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a2d18:	4623      	mov	r3, r4
 80a2d1a:	463a      	mov	r2, r7
 80a2d1c:	2105      	movs	r1, #5
 80a2d1e:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 80a2d20:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a2d22:	f7fe ffe3 	bl	80a1cec <vsnprintf>
 80a2d26:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a2d28:	490b      	ldr	r1, [pc, #44]	; (80a2d58 <_ZN6String6formatEPKcz+0x4c>)
 80a2d2a:	4628      	mov	r0, r5
 80a2d2c:	f7ff ff0d 	bl	80a2b4a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80a2d30:	4631      	mov	r1, r6
 80a2d32:	4628      	mov	r0, r5
 80a2d34:	f7ff fee0 	bl	80a2af8 <_ZN6String7reserveEj>
    if (result.buffer) {
 80a2d38:	6828      	ldr	r0, [r5, #0]
 80a2d3a:	b130      	cbz	r0, 80a2d4a <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a2d3c:	4623      	mov	r3, r4
 80a2d3e:	463a      	mov	r2, r7
 80a2d40:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 80a2d42:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a2d44:	f7fe ffd2 	bl	80a1cec <vsnprintf>
        va_end(marker);
        result.len = n;
 80a2d48:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 80a2d4a:	4628      	mov	r0, r5
 80a2d4c:	b004      	add	sp, #16
 80a2d4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a2d52:	b003      	add	sp, #12
 80a2d54:	4770      	bx	lr
 80a2d56:	bf00      	nop
 80a2d58:	080a5527 	.word	0x080a5527

080a2d5c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 80a2d5c:	b510      	push	{r4, lr}
 80a2d5e:	4604      	mov	r4, r0
 80a2d60:	4608      	mov	r0, r1
 80a2d62:	4611      	mov	r1, r2
 80a2d64:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 80a2d66:	2300      	movs	r3, #0
 80a2d68:	f7fe ff04 	bl	80a1b74 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
 80a2d6c:	4b06      	ldr	r3, [pc, #24]	; (80a2d88 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
 80a2d6e:	2200      	movs	r2, #0
 80a2d70:	701a      	strb	r2, [r3, #0]
 80a2d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2d76:	8058      	strh	r0, [r3, #2]
 80a2d78:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 80a2d7a:	681a      	ldr	r2, [r3, #0]
 80a2d7c:	889b      	ldrh	r3, [r3, #4]
 80a2d7e:	6022      	str	r2, [r4, #0]
 80a2d80:	80a3      	strh	r3, [r4, #4]
}
 80a2d82:	4620      	mov	r0, r4
 80a2d84:	bd10      	pop	{r4, pc}
 80a2d86:	bf00      	nop
 80a2d88:	20000630 	.word	0x20000630

080a2d8c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2d90:	4b03      	ldr	r3, [pc, #12]	; (80a2da0 <_GLOBAL__sub_I_System+0x14>)
 80a2d92:	2000      	movs	r0, #0
 80a2d94:	7018      	strb	r0, [r3, #0]
 80a2d96:	8058      	strh	r0, [r3, #2]
 80a2d98:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2d9a:	f7fe bedb 	b.w	80a1b54 <set_system_mode>
 80a2d9e:	bf00      	nop
 80a2da0:	20000630 	.word	0x20000630

080a2da4 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2da6:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2da8:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2daa:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2dae:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a2db0:	2201      	movs	r2, #1
 80a2db2:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2db6:	4621      	mov	r1, r4
 80a2db8:	47a8      	blx	r5
}
 80a2dba:	b003      	add	sp, #12
 80a2dbc:	bd30      	pop	{r4, r5, pc}

080a2dbe <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a2dbe:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2dc0:	6803      	ldr	r3, [r0, #0]
 80a2dc2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a2dc4:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2dc8:	46a4      	mov	ip, r4
}
 80a2dca:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2dcc:	4760      	bx	ip

080a2dce <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a2dce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2dd0:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a2dd2:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a2dd4:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a2dd8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a2dda:	4621      	mov	r1, r4
 80a2ddc:	4613      	mov	r3, r2
 80a2dde:	2201      	movs	r2, #1
 80a2de0:	47a8      	blx	r5
}
 80a2de2:	b003      	add	sp, #12
 80a2de4:	bd30      	pop	{r4, r5, pc}

080a2de6 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a2de6:	4770      	bx	lr

080a2de8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a2de8:	4770      	bx	lr

080a2dea <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a2dea:	2000      	movs	r0, #0
 80a2dec:	4770      	bx	lr

080a2dee <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a2dee:	b510      	push	{r4, lr}
 80a2df0:	4604      	mov	r4, r0
 80a2df2:	2114      	movs	r1, #20
 80a2df4:	f000 fd8b 	bl	80a390e <_ZdlPvj>
 80a2df8:	4620      	mov	r0, r4
 80a2dfa:	bd10      	pop	{r4, pc}

080a2dfc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a2dfc:	f7fd b951 	b.w	80a00a2 <_ZdlPv>

080a2e00 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a2e00:	b510      	push	{r4, lr}
 80a2e02:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a2e04:	6803      	ldr	r3, [r0, #0]
 80a2e06:	689b      	ldr	r3, [r3, #8]
 80a2e08:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a2e0a:	68a3      	ldr	r3, [r4, #8]
 80a2e0c:	3b01      	subs	r3, #1
 80a2e0e:	60a3      	str	r3, [r4, #8]
 80a2e10:	b92b      	cbnz	r3, 80a2e1e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29+0x1e>
            _M_destroy();
 80a2e12:	6823      	ldr	r3, [r4, #0]
 80a2e14:	4620      	mov	r0, r4
        }
    }
 80a2e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a2e1a:	68db      	ldr	r3, [r3, #12]
 80a2e1c:	4718      	bx	r3
 80a2e1e:	bd10      	pop	{r4, pc}

080a2e20 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a2e20:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a2e22:	4604      	mov	r4, r0
 80a2e24:	4606      	mov	r6, r0
 80a2e26:	694d      	ldr	r5, [r1, #20]
 80a2e28:	4b04      	ldr	r3, [pc, #16]	; (80a2e3c <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a2e2a:	358c      	adds	r5, #140	; 0x8c
 80a2e2c:	f844 3b04 	str.w	r3, [r4], #4
 80a2e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2e34:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a2e36:	4630      	mov	r0, r6
 80a2e38:	7023      	strb	r3, [r4, #0]
 80a2e3a:	bd70      	pop	{r4, r5, r6, pc}
 80a2e3c:	080a558c 	.word	0x080a558c

080a2e40 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a2e40:	b510      	push	{r4, lr}
 80a2e42:	6943      	ldr	r3, [r0, #20]
 80a2e44:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a2e46:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2e4a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2e4e:	429a      	cmp	r2, r3
 80a2e50:	d005      	beq.n	80a2e5e <_ZN9TCPClient4peekEv+0x1e>
 80a2e52:	6962      	ldr	r2, [r4, #20]
 80a2e54:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a2e58:	4413      	add	r3, r2
 80a2e5a:	7918      	ldrb	r0, [r3, #4]
 80a2e5c:	bd10      	pop	{r4, pc}
 80a2e5e:	6803      	ldr	r3, [r0, #0]
 80a2e60:	691b      	ldr	r3, [r3, #16]
 80a2e62:	4798      	blx	r3
 80a2e64:	2800      	cmp	r0, #0
 80a2e66:	d1f4      	bne.n	80a2e52 <_ZN9TCPClient4peekEv+0x12>
 80a2e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a2e6c:	bd10      	pop	{r4, pc}

080a2e6e <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a2e6e:	b510      	push	{r4, lr}
 80a2e70:	6943      	ldr	r3, [r0, #20]
 80a2e72:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a2e74:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2e78:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2e7c:	429a      	cmp	r2, r3
 80a2e7e:	d008      	beq.n	80a2e92 <_ZN9TCPClient4readEv+0x24>
 80a2e80:	6962      	ldr	r2, [r4, #20]
 80a2e82:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a2e86:	1c59      	adds	r1, r3, #1
 80a2e88:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a2e8c:	4413      	add	r3, r2
 80a2e8e:	7918      	ldrb	r0, [r3, #4]
 80a2e90:	bd10      	pop	{r4, pc}
 80a2e92:	6803      	ldr	r3, [r0, #0]
 80a2e94:	691b      	ldr	r3, [r3, #16]
 80a2e96:	4798      	blx	r3
 80a2e98:	2800      	cmp	r0, #0
 80a2e9a:	d1f1      	bne.n	80a2e80 <_ZN9TCPClient4readEv+0x12>
 80a2e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a2ea0:	bd10      	pop	{r4, pc}

080a2ea2 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a2ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2ea4:	6943      	ldr	r3, [r0, #20]
 80a2ea6:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a2ea8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2eac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a2eb0:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a2eb2:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a2eb4:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a2eb6:	d106      	bne.n	80a2ec6 <_ZN9TCPClient4readEPhj+0x24>
 80a2eb8:	6803      	ldr	r3, [r0, #0]
 80a2eba:	691b      	ldr	r3, [r3, #16]
 80a2ebc:	4798      	blx	r3
 80a2ebe:	b910      	cbnz	r0, 80a2ec6 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a2ec0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a2ec4:	e014      	b.n	80a2ef0 <_ZN9TCPClient4readEPhj+0x4e>
 80a2ec6:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2ec8:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a2eca:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a2ece:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2ed2:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a2ed4:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a2ed6:	42bc      	cmp	r4, r7
 80a2ed8:	bf28      	it	cs
 80a2eda:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2edc:	3104      	adds	r1, #4
 80a2ede:	4622      	mov	r2, r4
 80a2ee0:	f002 f80e 	bl	80a4f00 <memcpy>
 80a2ee4:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a2ee6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a2eea:	4423      	add	r3, r4
 80a2eec:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a2ef0:	4620      	mov	r0, r4
 80a2ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2ef4 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a2ef4:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a2ef6:	2300      	movs	r3, #0
 80a2ef8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a2efc:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a2efe:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a2f02:	4770      	bx	lr

080a2f04 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a2f04:	b538      	push	{r3, r4, r5, lr}
 80a2f06:	6942      	ldr	r2, [r0, #20]
 80a2f08:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a2f0a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a2f0e:	b11b      	cbz	r3, 80a2f18 <_ZN9TCPClient9availableEv+0x14>
 80a2f10:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a2f14:	429a      	cmp	r2, r3
 80a2f16:	d00c      	beq.n	80a2f32 <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a2f18:	6920      	ldr	r0, [r4, #16]
 80a2f1a:	f7ff fb3b 	bl	80a2594 <_ZN5spark12NetworkClass4fromEm>
 80a2f1e:	6803      	ldr	r3, [r0, #0]
 80a2f20:	68db      	ldr	r3, [r3, #12]
 80a2f22:	4798      	blx	r3
 80a2f24:	b318      	cbz	r0, 80a2f6e <_ZN9TCPClient9availableEv+0x6a>
 80a2f26:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a2f28:	6818      	ldr	r0, [r3, #0]
 80a2f2a:	f7fe fd0b 	bl	80a1944 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a2f2e:	b918      	cbnz	r0, 80a2f38 <_ZN9TCPClient9availableEv+0x34>
 80a2f30:	e01d      	b.n	80a2f6e <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a2f32:	f7ff ffdf 	bl	80a2ef4 <_ZN9TCPClient12flush_bufferEv>
 80a2f36:	e7ef      	b.n	80a2f18 <_ZN9TCPClient9availableEv+0x14>
 80a2f38:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a2f3a:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a2f3e:	297f      	cmp	r1, #127	; 0x7f
 80a2f40:	d815      	bhi.n	80a2f6e <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a2f42:	1d05      	adds	r5, r0, #4
 80a2f44:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a2f48:	2300      	movs	r3, #0
 80a2f4a:	4429      	add	r1, r5
 80a2f4c:	6800      	ldr	r0, [r0, #0]
 80a2f4e:	f7fe fd11 	bl	80a1974 <socket_receive>
            if (ret > 0)
 80a2f52:	2800      	cmp	r0, #0
 80a2f54:	dd0b      	ble.n	80a2f6e <_ZN9TCPClient9availableEv+0x6a>
 80a2f56:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a2f58:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2f5c:	b90a      	cbnz	r2, 80a2f62 <_ZN9TCPClient9availableEv+0x5e>
 80a2f5e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a2f62:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a2f64:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a2f68:	4418      	add	r0, r3
 80a2f6a:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a2f6e:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a2f70:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a2f74:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a2f78:	1a18      	subs	r0, r3, r0
}
 80a2f7a:	bd38      	pop	{r3, r4, r5, pc}

080a2f7c <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a2f7c:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a2f7e:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a2f80:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a2f82:	6818      	ldr	r0, [r3, #0]
 80a2f84:	f7fe fcde 	bl	80a1944 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a2f88:	b118      	cbz	r0, 80a2f92 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a2f8a:	6963      	ldr	r3, [r4, #20]
 80a2f8c:	6818      	ldr	r0, [r3, #0]
 80a2f8e:	f7fe fcf9 	bl	80a1984 <socket_close>
 80a2f92:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a2f94:	f7fe fcfe 	bl	80a1994 <socket_handle_invalid>
 80a2f98:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2f9a:	6960      	ldr	r0, [r4, #20]
 80a2f9c:	2211      	movs	r2, #17
 80a2f9e:	2100      	movs	r1, #0
 80a2fa0:	308c      	adds	r0, #140	; 0x8c
 80a2fa2:	f001 ffb8 	bl	80a4f16 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a2fa6:	4620      	mov	r0, r4
}
 80a2fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a2fac:	f7ff bfa2 	b.w	80a2ef4 <_ZN9TCPClient12flush_bufferEv>

080a2fb0 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a2fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2fb4:	461f      	mov	r7, r3
    stop();
 80a2fb6:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a2fb8:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a2fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a2fbc:	4606      	mov	r6, r0
 80a2fbe:	460c      	mov	r4, r1
 80a2fc0:	4615      	mov	r5, r2
    stop();
 80a2fc2:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a2fc4:	4638      	mov	r0, r7
 80a2fc6:	f7ff fae5 	bl	80a2594 <_ZN5spark12NetworkClass4fromEm>
 80a2fca:	6803      	ldr	r3, [r0, #0]
 80a2fcc:	68db      	ldr	r3, [r3, #12]
 80a2fce:	4798      	blx	r3
 80a2fd0:	2800      	cmp	r0, #0
 80a2fd2:	d056      	beq.n	80a3082 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a2fd4:	9700      	str	r7, [sp, #0]
 80a2fd6:	462b      	mov	r3, r5
 80a2fd8:	2206      	movs	r2, #6
 80a2fda:	2101      	movs	r1, #1
 80a2fdc:	2002      	movs	r0, #2
 80a2fde:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a2fe2:	f7fe fcb7 	bl	80a1954 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a2fe6:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a2fe8:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a2fec:	2700      	movs	r7, #0
 80a2fee:	9302      	str	r3, [sp, #8]
 80a2ff0:	6973      	ldr	r3, [r6, #20]
 80a2ff2:	9703      	str	r7, [sp, #12]
 80a2ff4:	681b      	ldr	r3, [r3, #0]
 80a2ff6:	2001      	movs	r0, #1
 80a2ff8:	9301      	str	r3, [sp, #4]
 80a2ffa:	4b23      	ldr	r3, [pc, #140]	; (80a3088 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a2ffc:	aa02      	add	r2, sp, #8
 80a2ffe:	9300      	str	r3, [sp, #0]
 80a3000:	4922      	ldr	r1, [pc, #136]	; (80a308c <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a3002:	463b      	mov	r3, r7
 80a3004:	f7fe fd9e 	bl	80a1b44 <log_message>

          if (socket_handle_valid(d_->sock))
 80a3008:	6973      	ldr	r3, [r6, #20]
 80a300a:	6818      	ldr	r0, [r3, #0]
 80a300c:	f7fe fc9a 	bl	80a1944 <socket_handle_valid>
 80a3010:	2800      	cmp	r0, #0
 80a3012:	d036      	beq.n	80a3082 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a3014:	4630      	mov	r0, r6
 80a3016:	f7ff ff6d 	bl	80a2ef4 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a301a:	2302      	movs	r3, #2
 80a301c:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3020:	0a2b      	lsrs	r3, r5, #8
 80a3022:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3026:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3028:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a302c:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a3030:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a3032:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a3036:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a303a:	7963      	ldrb	r3, [r4, #5]
 80a303c:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a3040:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a3044:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3048:	f7fe fd6c 	bl	80a1b24 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a304c:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a304e:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3050:	2210      	movs	r2, #16
 80a3052:	a902      	add	r1, sp, #8
 80a3054:	6818      	ldr	r0, [r3, #0]
 80a3056:	f7fe fc85 	bl	80a1964 <socket_connect>
 80a305a:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a305c:	4628      	mov	r0, r5
 80a305e:	f7fe fd61 	bl	80a1b24 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a3062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3064:	6975      	ldr	r5, [r6, #20]
 80a3066:	358c      	adds	r5, #140	; 0x8c
 80a3068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a306a:	6823      	ldr	r3, [r4, #0]
 80a306c:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a306e:	f1b8 0f00 	cmp.w	r8, #0
 80a3072:	d005      	beq.n	80a3080 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a3074:	6833      	ldr	r3, [r6, #0]
 80a3076:	4630      	mov	r0, r6
 80a3078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a307a:	4798      	blx	r3
 80a307c:	4638      	mov	r0, r7
 80a307e:	e000      	b.n	80a3082 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a3080:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a3082:	b00a      	add	sp, #40	; 0x28
 80a3084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3088:	080a5743 	.word	0x080a5743
 80a308c:	080a573c 	.word	0x080a573c

080a3090 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a3090:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3092:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a3094:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a3096:	6818      	ldr	r0, [r3, #0]
 80a3098:	f7fe fc54 	bl	80a1944 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a309c:	b908      	cbnz	r0, 80a30a2 <_ZN9TCPClient6statusEv+0x12>
 80a309e:	2000      	movs	r0, #0
 80a30a0:	bd10      	pop	{r4, pc}
 80a30a2:	6920      	ldr	r0, [r4, #16]
 80a30a4:	f7ff fa76 	bl	80a2594 <_ZN5spark12NetworkClass4fromEm>
 80a30a8:	6803      	ldr	r3, [r0, #0]
 80a30aa:	68db      	ldr	r3, [r3, #12]
 80a30ac:	4798      	blx	r3
 80a30ae:	2800      	cmp	r0, #0
 80a30b0:	d0f5      	beq.n	80a309e <_ZN9TCPClient6statusEv+0xe>
 80a30b2:	6963      	ldr	r3, [r4, #20]
 80a30b4:	6818      	ldr	r0, [r3, #0]
 80a30b6:	f7fe fc3d 	bl	80a1934 <socket_active_status>
 80a30ba:	fab0 f080 	clz	r0, r0
 80a30be:	0940      	lsrs	r0, r0, #5
}
 80a30c0:	bd10      	pop	{r4, pc}

080a30c2 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a30c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a30c6:	2500      	movs	r5, #0
 80a30c8:	6045      	str	r5, [r0, #4]
 80a30ca:	4604      	mov	r4, r0
 80a30cc:	460e      	mov	r6, r1
 80a30ce:	4617      	mov	r7, r2
 80a30d0:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a30d2:	f7ff ffdd 	bl	80a3090 <_ZN9TCPClient6statusEv>
 80a30d6:	b160      	cbz	r0, 80a30f2 <_ZN9TCPClient5writeEPKhjm+0x30>
 80a30d8:	6960      	ldr	r0, [r4, #20]
 80a30da:	9501      	str	r5, [sp, #4]
 80a30dc:	f8cd 8000 	str.w	r8, [sp]
 80a30e0:	462b      	mov	r3, r5
 80a30e2:	463a      	mov	r2, r7
 80a30e4:	4631      	mov	r1, r6
 80a30e6:	6800      	ldr	r0, [r0, #0]
 80a30e8:	f7fe fc5c 	bl	80a19a4 <socket_send_ex>
    if (ret < 0) {
 80a30ec:	2800      	cmp	r0, #0
 80a30ee:	da03      	bge.n	80a30f8 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a30f0:	e001      	b.n	80a30f6 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a30f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a30f6:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a30f8:	b002      	add	sp, #8
 80a30fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a30fe <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a30fe:	b538      	push	{r3, r4, r5, lr}
 80a3100:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a3102:	f7ff ffc5 	bl	80a3090 <_ZN9TCPClient6statusEv>
 80a3106:	bb00      	cbnz	r0, 80a314a <_ZN9TCPClient9connectedEv+0x4c>
 80a3108:	6963      	ldr	r3, [r4, #20]
 80a310a:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a310e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3112:	4291      	cmp	r1, r2
 80a3114:	d119      	bne.n	80a314a <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a3116:	6818      	ldr	r0, [r3, #0]
 80a3118:	f7fe fc14 	bl	80a1944 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a311c:	b128      	cbz	r0, 80a312a <_ZN9TCPClient9connectedEv+0x2c>
 80a311e:	6963      	ldr	r3, [r4, #20]
 80a3120:	6818      	ldr	r0, [r3, #0]
 80a3122:	f7fe fc07 	bl	80a1934 <socket_active_status>
 80a3126:	2801      	cmp	r0, #1
 80a3128:	d001      	beq.n	80a312e <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a312a:	2500      	movs	r5, #0
 80a312c:	e00e      	b.n	80a314c <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a312e:	6823      	ldr	r3, [r4, #0]
 80a3130:	4620      	mov	r0, r4
 80a3132:	691b      	ldr	r3, [r3, #16]
 80a3134:	4798      	blx	r3
 80a3136:	2800      	cmp	r0, #0
 80a3138:	bf14      	ite	ne
 80a313a:	2501      	movne	r5, #1
 80a313c:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a313e:	d105      	bne.n	80a314c <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a3140:	6823      	ldr	r3, [r4, #0]
 80a3142:	4620      	mov	r0, r4
 80a3144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3146:	4798      	blx	r3
 80a3148:	e000      	b.n	80a314c <_ZN9TCPClient9connectedEv+0x4e>
 80a314a:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a314c:	4628      	mov	r0, r5
 80a314e:	bd38      	pop	{r3, r4, r5, pc}

080a3150 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a3150:	b508      	push	{r3, lr}
   return (status()!=0);
 80a3152:	f7ff ff9d 	bl	80a3090 <_ZN9TCPClient6statusEv>
}
 80a3156:	3000      	adds	r0, #0
 80a3158:	bf18      	it	ne
 80a315a:	2001      	movne	r0, #1
 80a315c:	bd08      	pop	{r3, pc}

080a315e <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a315e:	b510      	push	{r4, lr}
 80a3160:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a3162:	2300      	movs	r3, #0
 80a3164:	6001      	str	r1, [r0, #0]
 80a3166:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a316a:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a316e:	3088      	adds	r0, #136	; 0x88
 80a3170:	f7ff f96a 	bl	80a2448 <_ZN9IPAddressC1Ev>
}
 80a3174:	4620      	mov	r0, r4
 80a3176:	bd10      	pop	{r4, pc}

080a3178 <_ZN9TCPClientC1Em>:
 80a3178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a317c:	b570      	push	{r4, r5, r6, lr}
 80a317e:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a3180:	4a14      	ldr	r2, [pc, #80]	; (80a31d4 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a3182:	2300      	movs	r3, #0
 80a3184:	6043      	str	r3, [r0, #4]
 80a3186:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a3188:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a318a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a318c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a318e:	20a0      	movs	r0, #160	; 0xa0
 80a3190:	460e      	mov	r6, r1
 80a3192:	f7fc ff84 	bl	80a009e <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a3196:	4605      	mov	r5, r0
 80a3198:	b110      	cbz	r0, 80a31a0 <_ZN9TCPClientC1Em+0x28>
 80a319a:	4631      	mov	r1, r6
 80a319c:	f7ff ffdf 	bl	80a315e <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a31a0:	2014      	movs	r0, #20
 80a31a2:	f7fc ff7c 	bl	80a009e <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a31a6:	4603      	mov	r3, r0
 80a31a8:	b128      	cbz	r0, 80a31b6 <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a31aa:	2201      	movs	r2, #1
 80a31ac:	6042      	str	r2, [r0, #4]
 80a31ae:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a31b0:	4a09      	ldr	r2, [pc, #36]	; (80a31d8 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a31b2:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a31b4:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a31b6:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a31b8:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a31ba:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a31bc:	b128      	cbz	r0, 80a31ca <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a31be:	6843      	ldr	r3, [r0, #4]
 80a31c0:	3b01      	subs	r3, #1
 80a31c2:	6043      	str	r3, [r0, #4]
 80a31c4:	b90b      	cbnz	r3, 80a31ca <_ZN9TCPClientC1Em+0x52>
 80a31c6:	f7ff fe1b 	bl	80a2e00 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a31ca:	4620      	mov	r0, r4
 80a31cc:	f7ff fe92 	bl	80a2ef4 <_ZN9TCPClient12flush_bufferEv>
}
 80a31d0:	4620      	mov	r0, r4
 80a31d2:	bd70      	pop	{r4, r5, r6, pc}
 80a31d4:	080a56f8 	.word	0x080a56f8
 80a31d8:	080a56dc 	.word	0x080a56dc

080a31dc <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a31dc:	b510      	push	{r4, lr}
 80a31de:	4604      	mov	r4, r0
 80a31e0:	f7fe fbd8 	bl	80a1994 <socket_handle_invalid>
 80a31e4:	4601      	mov	r1, r0
 80a31e6:	4620      	mov	r0, r4
 80a31e8:	f7ff ffc6 	bl	80a3178 <_ZN9TCPClientC1Em>
{
}
 80a31ec:	4620      	mov	r0, r4
 80a31ee:	bd10      	pop	{r4, pc}

080a31f0 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a31f0:	b510      	push	{r4, lr}
 80a31f2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a31f4:	6800      	ldr	r0, [r0, #0]
 80a31f6:	f7fe fba5 	bl	80a1944 <socket_handle_valid>
 80a31fa:	b110      	cbz	r0, 80a3202 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a31fc:	6820      	ldr	r0, [r4, #0]
 80a31fe:	f7fe fbc1 	bl	80a1984 <socket_close>
    }
}
 80a3202:	4620      	mov	r0, r4
 80a3204:	bd10      	pop	{r4, pc}

080a3206 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a3206:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a3208:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a320a:	4620      	mov	r0, r4
 80a320c:	f7ff fff0 	bl	80a31f0 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a3210:	b124      	cbz	r4, 80a321c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a3212:	4620      	mov	r0, r4
 80a3214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3218:	f7fc bf43 	b.w	80a00a2 <_ZdlPv>
 80a321c:	bd10      	pop	{r4, pc}
	...

080a3220 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a3220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3224:	461f      	mov	r7, r3
    stop();
 80a3226:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a3228:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a322c:	4606      	mov	r6, r0
 80a322e:	460d      	mov	r5, r1
 80a3230:	4690      	mov	r8, r2
    stop();
 80a3232:	4798      	blx	r3
    if (Network.ready())
 80a3234:	4813      	ldr	r0, [pc, #76]	; (80a3284 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a3236:	f7ff f960 	bl	80a24fa <_ZN5spark12NetworkClass5readyEv>
 80a323a:	b300      	cbz	r0, 80a327e <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a323c:	a802      	add	r0, sp, #8
 80a323e:	f7ff f903 	bl	80a2448 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a3242:	4628      	mov	r0, r5
 80a3244:	f001 fec5 	bl	80a4fd2 <strlen>
 80a3248:	2400      	movs	r4, #0
 80a324a:	b281      	uxth	r1, r0
 80a324c:	9400      	str	r4, [sp, #0]
 80a324e:	463b      	mov	r3, r7
 80a3250:	aa03      	add	r2, sp, #12
 80a3252:	4628      	mov	r0, r5
 80a3254:	f7fe fc6e 	bl	80a1b34 <inet_gethostbyname>
 80a3258:	b980      	cbnz	r0, 80a327c <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a325a:	6833      	ldr	r3, [r6, #0]
 80a325c:	ad09      	add	r5, sp, #36	; 0x24
 80a325e:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a3262:	4b09      	ldr	r3, [pc, #36]	; (80a3288 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a3264:	ac03      	add	r4, sp, #12
 80a3266:	9308      	str	r3, [sp, #32]
 80a3268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a326a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a326c:	6823      	ldr	r3, [r4, #0]
 80a326e:	4642      	mov	r2, r8
 80a3270:	702b      	strb	r3, [r5, #0]
 80a3272:	a908      	add	r1, sp, #32
 80a3274:	463b      	mov	r3, r7
 80a3276:	4630      	mov	r0, r6
 80a3278:	47c8      	blx	r9
 80a327a:	e000      	b.n	80a327e <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a327c:	4620      	mov	r0, r4
}
 80a327e:	b00f      	add	sp, #60	; 0x3c
 80a3280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3284:	20000618 	.word	0x20000618
 80a3288:	080a558c 	.word	0x080a558c

080a328c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a328c:	4b02      	ldr	r3, [pc, #8]	; (80a3298 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a328e:	681a      	ldr	r2, [r3, #0]
 80a3290:	4b02      	ldr	r3, [pc, #8]	; (80a329c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a3292:	601a      	str	r2, [r3, #0]
 80a3294:	4770      	bx	lr
 80a3296:	bf00      	nop
 80a3298:	2000003c 	.word	0x2000003c
 80a329c:	20000638 	.word	0x20000638

080a32a0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a32a0:	4770      	bx	lr

080a32a2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a32a2:	7441      	strb	r1, [r0, #17]
 80a32a4:	4770      	bx	lr

080a32a6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a32a6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a32a8:	7c00      	ldrb	r0, [r0, #16]
 80a32aa:	f7fe fbfb 	bl	80a1aa4 <HAL_USART_Available_Data_For_Write>
}
 80a32ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a32b2:	bd08      	pop	{r3, pc}

080a32b4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a32b4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a32b6:	7c00      	ldrb	r0, [r0, #16]
 80a32b8:	f7fe fbcc 	bl	80a1a54 <HAL_USART_Available_Data>
}
 80a32bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a32c0:	bd08      	pop	{r3, pc}

080a32c2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a32c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a32c4:	7c00      	ldrb	r0, [r0, #16]
 80a32c6:	f7fe fbd5 	bl	80a1a74 <HAL_USART_Peek_Data>
}
 80a32ca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a32ce:	bf28      	it	cs
 80a32d0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a32d4:	bd08      	pop	{r3, pc}

080a32d6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a32d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a32d8:	7c00      	ldrb	r0, [r0, #16]
 80a32da:	f7fe fbc3 	bl	80a1a64 <HAL_USART_Read_Data>
}
 80a32de:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a32e2:	bf28      	it	cs
 80a32e4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a32e8:	bd08      	pop	{r3, pc}

080a32ea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a32ea:	7c00      	ldrb	r0, [r0, #16]
 80a32ec:	f7fe bbca 	b.w	80a1a84 <HAL_USART_Flush_Data>

080a32f0 <_ZN11USARTSerialD0Ev>:
 80a32f0:	b510      	push	{r4, lr}
 80a32f2:	4604      	mov	r4, r0
 80a32f4:	2114      	movs	r1, #20
 80a32f6:	f000 fb0a 	bl	80a390e <_ZdlPvj>
 80a32fa:	4620      	mov	r0, r4
 80a32fc:	bd10      	pop	{r4, pc}

080a32fe <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a32fe:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3300:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a3302:	4604      	mov	r4, r0
 80a3304:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3306:	b925      	cbnz	r5, 80a3312 <_ZN11USARTSerial5writeEh+0x14>
 80a3308:	7c00      	ldrb	r0, [r0, #16]
 80a330a:	f7fe fbcb 	bl	80a1aa4 <HAL_USART_Available_Data_For_Write>
 80a330e:	2800      	cmp	r0, #0
 80a3310:	dd05      	ble.n	80a331e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3312:	4631      	mov	r1, r6
 80a3314:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a331a:	f7fe bb93 	b.w	80a1a44 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a331e:	4628      	mov	r0, r5
 80a3320:	bd70      	pop	{r4, r5, r6, pc}
	...

080a3324 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3324:	b510      	push	{r4, lr}
 80a3326:	4604      	mov	r4, r0
 80a3328:	4608      	mov	r0, r1
 80a332a:	4611      	mov	r1, r2
 80a332c:	2200      	movs	r2, #0
 80a332e:	6062      	str	r2, [r4, #4]
 80a3330:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3334:	60a2      	str	r2, [r4, #8]
 80a3336:	4a05      	ldr	r2, [pc, #20]	; (80a334c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a3338:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a333a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a333c:	2201      	movs	r2, #1
 80a333e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a3340:	461a      	mov	r2, r3
 80a3342:	f7fe fb77 	bl	80a1a34 <HAL_USART_Init>
}
 80a3346:	4620      	mov	r0, r4
 80a3348:	bd10      	pop	{r4, pc}
 80a334a:	bf00      	nop
 80a334c:	080a5788 	.word	0x080a5788

080a3350 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a3350:	7c00      	ldrb	r0, [r0, #16]
 80a3352:	f7fe bb9f 	b.w	80a1a94 <HAL_USART_Is_Enabled>
	...

080a3358 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a3358:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a335a:	4d0c      	ldr	r5, [pc, #48]	; (80a338c <_Z22__fetch_global_Serial1v+0x34>)
 80a335c:	6829      	ldr	r1, [r5, #0]
 80a335e:	f011 0401 	ands.w	r4, r1, #1
 80a3362:	d111      	bne.n	80a3388 <_Z22__fetch_global_Serial1v+0x30>
 80a3364:	4628      	mov	r0, r5
 80a3366:	f7fc fe9e 	bl	80a00a6 <__cxa_guard_acquire>
 80a336a:	b168      	cbz	r0, 80a3388 <_Z22__fetch_global_Serial1v+0x30>
 80a336c:	4a08      	ldr	r2, [pc, #32]	; (80a3390 <_Z22__fetch_global_Serial1v+0x38>)
 80a336e:	4621      	mov	r1, r4
 80a3370:	4b08      	ldr	r3, [pc, #32]	; (80a3394 <_Z22__fetch_global_Serial1v+0x3c>)
 80a3372:	4809      	ldr	r0, [pc, #36]	; (80a3398 <_Z22__fetch_global_Serial1v+0x40>)
 80a3374:	f7ff ffd6 	bl	80a3324 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a3378:	4628      	mov	r0, r5
 80a337a:	f7fc fe99 	bl	80a00b0 <__cxa_guard_release>
 80a337e:	4a07      	ldr	r2, [pc, #28]	; (80a339c <_Z22__fetch_global_Serial1v+0x44>)
 80a3380:	4907      	ldr	r1, [pc, #28]	; (80a33a0 <_Z22__fetch_global_Serial1v+0x48>)
 80a3382:	4805      	ldr	r0, [pc, #20]	; (80a3398 <_Z22__fetch_global_Serial1v+0x40>)
 80a3384:	f000 fabe 	bl	80a3904 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a3388:	4803      	ldr	r0, [pc, #12]	; (80a3398 <_Z22__fetch_global_Serial1v+0x40>)
 80a338a:	bd38      	pop	{r3, r4, r5, pc}
 80a338c:	200006d4 	.word	0x200006d4
 80a3390:	200006d8 	.word	0x200006d8
 80a3394:	20000650 	.word	0x20000650
 80a3398:	2000063c 	.word	0x2000063c
 80a339c:	200000a8 	.word	0x200000a8
 80a33a0:	080a32a1 	.word	0x080a32a1

080a33a4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a33a4:	7441      	strb	r1, [r0, #17]
 80a33a6:	4770      	bx	lr

080a33a8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a33a8:	4770      	bx	lr

080a33aa <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a33aa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a33ac:	2100      	movs	r1, #0
 80a33ae:	7c00      	ldrb	r0, [r0, #16]
 80a33b0:	f7fe fba0 	bl	80a1af4 <HAL_USB_USART_Receive_Data>
}
 80a33b4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a33b8:	bf28      	it	cs
 80a33ba:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a33be:	bd08      	pop	{r3, pc}

080a33c0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a33c0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a33c2:	2101      	movs	r1, #1
 80a33c4:	7c00      	ldrb	r0, [r0, #16]
 80a33c6:	f7fe fb95 	bl	80a1af4 <HAL_USB_USART_Receive_Data>
}
 80a33ca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a33ce:	bf28      	it	cs
 80a33d0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a33d4:	bd08      	pop	{r3, pc}

080a33d6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a33d6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a33d8:	7c00      	ldrb	r0, [r0, #16]
 80a33da:	f7fe fb83 	bl	80a1ae4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a33de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a33e2:	bd08      	pop	{r3, pc}

080a33e4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a33e4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a33e6:	7c00      	ldrb	r0, [r0, #16]
 80a33e8:	f7fe fb74 	bl	80a1ad4 <HAL_USB_USART_Available_Data>
}
 80a33ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a33f0:	bd08      	pop	{r3, pc}

080a33f2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a33f2:	7c00      	ldrb	r0, [r0, #16]
 80a33f4:	f7fe bb8e 	b.w	80a1b14 <HAL_USB_USART_Flush_Data>

080a33f8 <_ZN9USBSerialD0Ev>:
 80a33f8:	b510      	push	{r4, lr}
 80a33fa:	4604      	mov	r4, r0
 80a33fc:	2114      	movs	r1, #20
 80a33fe:	f000 fa86 	bl	80a390e <_ZdlPvj>
 80a3402:	4620      	mov	r0, r4
 80a3404:	bd10      	pop	{r4, pc}

080a3406 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a3406:	b538      	push	{r3, r4, r5, lr}
 80a3408:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a340a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a340c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a340e:	f7fe fb69 	bl	80a1ae4 <HAL_USB_USART_Available_Data_For_Write>
 80a3412:	2800      	cmp	r0, #0
 80a3414:	dc01      	bgt.n	80a341a <_ZN9USBSerial5writeEh+0x14>
 80a3416:	7c60      	ldrb	r0, [r4, #17]
 80a3418:	b128      	cbz	r0, 80a3426 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a341a:	4629      	mov	r1, r5
 80a341c:	7c20      	ldrb	r0, [r4, #16]
 80a341e:	f7fe fb71 	bl	80a1b04 <HAL_USB_USART_Send_Data>
 80a3422:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a3426:	bd38      	pop	{r3, r4, r5, pc}

080a3428 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3428:	b510      	push	{r4, lr}
 80a342a:	4604      	mov	r4, r0
 80a342c:	2300      	movs	r3, #0
 80a342e:	6063      	str	r3, [r4, #4]
 80a3430:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3434:	60a3      	str	r3, [r4, #8]
 80a3436:	4b05      	ldr	r3, [pc, #20]	; (80a344c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a3438:	4608      	mov	r0, r1
 80a343a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a343c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a343e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a3440:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a3442:	4611      	mov	r1, r2
 80a3444:	f7fe fb36 	bl	80a1ab4 <HAL_USB_USART_Init>
}
 80a3448:	4620      	mov	r0, r4
 80a344a:	bd10      	pop	{r4, pc}
 80a344c:	080a57b8 	.word	0x080a57b8

080a3450 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3450:	2200      	movs	r2, #0
 80a3452:	7c00      	ldrb	r0, [r0, #16]
 80a3454:	f7fe bb36 	b.w	80a1ac4 <HAL_USB_USART_Begin>

080a3458 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3458:	b510      	push	{r4, lr}
 80a345a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a345c:	2214      	movs	r2, #20
 80a345e:	2100      	movs	r1, #0
 80a3460:	f001 fd59 	bl	80a4f16 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3464:	4b05      	ldr	r3, [pc, #20]	; (80a347c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3466:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3468:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a346a:	4b05      	ldr	r3, [pc, #20]	; (80a3480 <_Z19acquireSerialBufferv+0x28>)
 80a346c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a346e:	f240 1301 	movw	r3, #257	; 0x101
 80a3472:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3474:	2381      	movs	r3, #129	; 0x81
 80a3476:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3478:	bd10      	pop	{r4, pc}
 80a347a:	bf00      	nop
 80a347c:	200007e1 	.word	0x200007e1
 80a3480:	20000760 	.word	0x20000760

080a3484 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3484:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3486:	4d0e      	ldr	r5, [pc, #56]	; (80a34c0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a3488:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a348a:	a801      	add	r0, sp, #4
 80a348c:	f7ff ffe4 	bl	80a3458 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3490:	6829      	ldr	r1, [r5, #0]
 80a3492:	f011 0401 	ands.w	r4, r1, #1
 80a3496:	d110      	bne.n	80a34ba <_Z16_fetch_usbserialv+0x36>
 80a3498:	4628      	mov	r0, r5
 80a349a:	f7fc fe04 	bl	80a00a6 <__cxa_guard_acquire>
 80a349e:	b160      	cbz	r0, 80a34ba <_Z16_fetch_usbserialv+0x36>
 80a34a0:	aa01      	add	r2, sp, #4
 80a34a2:	4621      	mov	r1, r4
 80a34a4:	4807      	ldr	r0, [pc, #28]	; (80a34c4 <_Z16_fetch_usbserialv+0x40>)
 80a34a6:	f7ff ffbf 	bl	80a3428 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a34aa:	4628      	mov	r0, r5
 80a34ac:	f7fc fe00 	bl	80a00b0 <__cxa_guard_release>
 80a34b0:	4a05      	ldr	r2, [pc, #20]	; (80a34c8 <_Z16_fetch_usbserialv+0x44>)
 80a34b2:	4906      	ldr	r1, [pc, #24]	; (80a34cc <_Z16_fetch_usbserialv+0x48>)
 80a34b4:	4803      	ldr	r0, [pc, #12]	; (80a34c4 <_Z16_fetch_usbserialv+0x40>)
 80a34b6:	f000 fa25 	bl	80a3904 <__aeabi_atexit>
	return _usbserial;
}
 80a34ba:	4802      	ldr	r0, [pc, #8]	; (80a34c4 <_Z16_fetch_usbserialv+0x40>)
 80a34bc:	b007      	add	sp, #28
 80a34be:	bd30      	pop	{r4, r5, pc}
 80a34c0:	2000075c 	.word	0x2000075c
 80a34c4:	200008e4 	.word	0x200008e4
 80a34c8:	200000a8 	.word	0x200000a8
 80a34cc:	080a33a9 	.word	0x080a33a9

080a34d0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a34d0:	b510      	push	{r4, lr}
 80a34d2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a34d4:	2214      	movs	r2, #20
 80a34d6:	2100      	movs	r1, #0
 80a34d8:	f001 fd1d 	bl	80a4f16 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a34dc:	4b05      	ldr	r3, [pc, #20]	; (80a34f4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a34de:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a34e0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a34e2:	4b05      	ldr	r3, [pc, #20]	; (80a34f8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a34e4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a34e6:	f240 1301 	movw	r3, #257	; 0x101
 80a34ea:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a34ec:	2381      	movs	r3, #129	; 0x81
 80a34ee:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a34f0:	bd10      	pop	{r4, pc}
 80a34f2:	bf00      	nop
 80a34f4:	20000994 	.word	0x20000994
 80a34f8:	200008fc 	.word	0x200008fc

080a34fc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a34fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a34fe:	4c0e      	ldr	r4, [pc, #56]	; (80a3538 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a3500:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3502:	a801      	add	r0, sp, #4
 80a3504:	f7ff ffe4 	bl	80a34d0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3508:	6823      	ldr	r3, [r4, #0]
 80a350a:	07db      	lsls	r3, r3, #31
 80a350c:	d410      	bmi.n	80a3530 <_Z17_fetch_usbserial1v+0x34>
 80a350e:	4620      	mov	r0, r4
 80a3510:	f7fc fdc9 	bl	80a00a6 <__cxa_guard_acquire>
 80a3514:	b160      	cbz	r0, 80a3530 <_Z17_fetch_usbserial1v+0x34>
 80a3516:	aa01      	add	r2, sp, #4
 80a3518:	2101      	movs	r1, #1
 80a351a:	4808      	ldr	r0, [pc, #32]	; (80a353c <_Z17_fetch_usbserial1v+0x40>)
 80a351c:	f7ff ff84 	bl	80a3428 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3520:	4620      	mov	r0, r4
 80a3522:	f7fc fdc5 	bl	80a00b0 <__cxa_guard_release>
 80a3526:	4a06      	ldr	r2, [pc, #24]	; (80a3540 <_Z17_fetch_usbserial1v+0x44>)
 80a3528:	4906      	ldr	r1, [pc, #24]	; (80a3544 <_Z17_fetch_usbserial1v+0x48>)
 80a352a:	4804      	ldr	r0, [pc, #16]	; (80a353c <_Z17_fetch_usbserial1v+0x40>)
 80a352c:	f000 f9ea 	bl	80a3904 <__aeabi_atexit>
  return _usbserial1;
}
 80a3530:	4802      	ldr	r0, [pc, #8]	; (80a353c <_Z17_fetch_usbserial1v+0x40>)
 80a3532:	b006      	add	sp, #24
 80a3534:	bd10      	pop	{r4, pc}
 80a3536:	bf00      	nop
 80a3538:	200008f8 	.word	0x200008f8
 80a353c:	20000980 	.word	0x20000980
 80a3540:	200000a8 	.word	0x200000a8
 80a3544:	080a33a9 	.word	0x080a33a9

080a3548 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a3548:	2200      	movs	r2, #0
 80a354a:	4611      	mov	r1, r2
 80a354c:	6840      	ldr	r0, [r0, #4]
 80a354e:	f7fe bb7d 	b.w	80a1c4c <network_ready>

080a3552 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3552:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3554:	4616      	mov	r6, r2
 80a3556:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a3558:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a355a:	460f      	mov	r7, r1
 80a355c:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a355e:	2100      	movs	r1, #0
 80a3560:	a803      	add	r0, sp, #12
 80a3562:	f001 fcd8 	bl	80a4f16 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3566:	4630      	mov	r0, r6
 80a3568:	f001 fd33 	bl	80a4fd2 <strlen>
 80a356c:	2500      	movs	r5, #0
 80a356e:	9500      	str	r5, [sp, #0]
 80a3570:	b281      	uxth	r1, r0
 80a3572:	687b      	ldr	r3, [r7, #4]
 80a3574:	aa03      	add	r2, sp, #12
 80a3576:	4630      	mov	r0, r6
 80a3578:	f7fe fadc 	bl	80a1b34 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a357c:	b120      	cbz	r0, 80a3588 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a357e:	4629      	mov	r1, r5
 80a3580:	4620      	mov	r0, r4
 80a3582:	f7fe ff81 	bl	80a2488 <_ZN9IPAddressC1Em>
 80a3586:	e003      	b.n	80a3590 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a3588:	a903      	add	r1, sp, #12
 80a358a:	4620      	mov	r0, r4
 80a358c:	f7fe ff6a 	bl	80a2464 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a3590:	4620      	mov	r0, r4
 80a3592:	b009      	add	sp, #36	; 0x24
 80a3594:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3596 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a3596:	2200      	movs	r2, #0
 80a3598:	4611      	mov	r1, r2
 80a359a:	6840      	ldr	r0, [r0, #4]
 80a359c:	f7fe bb76 	b.w	80a1c8c <network_listening>

080a35a0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a35a0:	2200      	movs	r2, #0
 80a35a2:	4611      	mov	r1, r2
 80a35a4:	6840      	ldr	r0, [r0, #4]
 80a35a6:	f7fe bb81 	b.w	80a1cac <network_get_listen_timeout>

080a35aa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a35aa:	2200      	movs	r2, #0
 80a35ac:	6840      	ldr	r0, [r0, #4]
 80a35ae:	f7fe bb75 	b.w	80a1c9c <network_set_listen_timeout>

080a35b2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a35b2:	2200      	movs	r2, #0
 80a35b4:	f081 0101 	eor.w	r1, r1, #1
 80a35b8:	6840      	ldr	r0, [r0, #4]
 80a35ba:	f7fe bb5f 	b.w	80a1c7c <network_listen>

080a35be <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a35be:	2300      	movs	r3, #0
 80a35c0:	461a      	mov	r2, r3
 80a35c2:	4619      	mov	r1, r3
 80a35c4:	6840      	ldr	r0, [r0, #4]
 80a35c6:	f7fe bb51 	b.w	80a1c6c <network_off>

080a35ca <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a35ca:	2300      	movs	r3, #0
 80a35cc:	461a      	mov	r2, r3
 80a35ce:	4619      	mov	r1, r3
 80a35d0:	6840      	ldr	r0, [r0, #4]
 80a35d2:	f7fe bb43 	b.w	80a1c5c <network_on>

080a35d6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a35d6:	2200      	movs	r2, #0
 80a35d8:	4611      	mov	r1, r2
 80a35da:	6840      	ldr	r0, [r0, #4]
 80a35dc:	f7fe bb26 	b.w	80a1c2c <network_connecting>

080a35e0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a35e0:	2200      	movs	r2, #0
 80a35e2:	2102      	movs	r1, #2
 80a35e4:	6840      	ldr	r0, [r0, #4]
 80a35e6:	f7fe bb29 	b.w	80a1c3c <network_disconnect>

080a35ea <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a35ea:	2300      	movs	r3, #0
 80a35ec:	461a      	mov	r2, r3
 80a35ee:	6840      	ldr	r0, [r0, #4]
 80a35f0:	f7fe bb14 	b.w	80a1c1c <network_connect>

080a35f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a35f4:	4b02      	ldr	r3, [pc, #8]	; (80a3600 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a35f6:	2204      	movs	r2, #4
 80a35f8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a35fa:	4a02      	ldr	r2, [pc, #8]	; (80a3604 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a35fc:	601a      	str	r2, [r3, #0]
 80a35fe:	4770      	bx	lr
 80a3600:	20000a98 	.word	0x20000a98
 80a3604:	080a57e8 	.word	0x080a57e8

080a3608 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a3608:	b510      	push	{r4, lr}
 80a360a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a360c:	f001 fce1 	bl	80a4fd2 <strlen>
 80a3610:	3801      	subs	r0, #1
 80a3612:	1823      	adds	r3, r4, r0
 80a3614:	4620      	mov	r0, r4
	while(i<j){
 80a3616:	4298      	cmp	r0, r3
 80a3618:	d206      	bcs.n	80a3628 <_Z11str_reversePc+0x20>
		c = *i;
 80a361a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a361c:	7819      	ldrb	r1, [r3, #0]
 80a361e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a3622:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a3626:	e7f6      	b.n	80a3616 <_Z11str_reversePc+0xe>
 80a3628:	bd10      	pop	{r4, pc}

080a362a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a362a:	b570      	push	{r4, r5, r6, lr}
 80a362c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a362e:	1e91      	subs	r1, r2, #2
 80a3630:	2922      	cmp	r1, #34	; 0x22
 80a3632:	d820      	bhi.n	80a3676 <ultoa+0x4c>
 80a3634:	4625      	mov	r5, r4
 80a3636:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a3638:	b910      	cbnz	r0, 80a3640 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a363a:	4423      	add	r3, r4
            *ptr++ = '0';
 80a363c:	2230      	movs	r2, #48	; 0x30
 80a363e:	e00e      	b.n	80a365e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a3640:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a3644:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a3648:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a364a:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a364c:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a3650:	bf94      	ite	ls
 80a3652:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a3654:	3157      	addhi	r1, #87	; 0x57
 80a3656:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a365a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a365c:	e7eb      	b.n	80a3636 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a365e:	4299      	cmp	r1, r3
 80a3660:	d202      	bcs.n	80a3668 <ultoa+0x3e>
            *ptr++ = '0';
 80a3662:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a3666:	e7fa      	b.n	80a365e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a3668:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a366a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a366c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a366e:	f7ff ffcb 	bl	80a3608 <_Z11str_reversePc>
	return buffer;
 80a3672:	4620      	mov	r0, r4
 80a3674:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a3676:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a3678:	bd70      	pop	{r4, r5, r6, pc}
	...

080a367c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a367c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a367e:	4b14      	ldr	r3, [pc, #80]	; (80a36d0 <serialEventRun+0x54>)
 80a3680:	b133      	cbz	r3, 80a3690 <serialEventRun+0x14>
 80a3682:	f7ff feff 	bl	80a3484 <_Z16_fetch_usbserialv>
 80a3686:	6803      	ldr	r3, [r0, #0]
 80a3688:	691b      	ldr	r3, [r3, #16]
 80a368a:	4798      	blx	r3
 80a368c:	2800      	cmp	r0, #0
 80a368e:	dc16      	bgt.n	80a36be <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a3690:	4b10      	ldr	r3, [pc, #64]	; (80a36d4 <serialEventRun+0x58>)
 80a3692:	b133      	cbz	r3, 80a36a2 <serialEventRun+0x26>
 80a3694:	f7ff fe60 	bl	80a3358 <_Z22__fetch_global_Serial1v>
 80a3698:	6803      	ldr	r3, [r0, #0]
 80a369a:	691b      	ldr	r3, [r3, #16]
 80a369c:	4798      	blx	r3
 80a369e:	2800      	cmp	r0, #0
 80a36a0:	dc10      	bgt.n	80a36c4 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a36a2:	4b0d      	ldr	r3, [pc, #52]	; (80a36d8 <serialEventRun+0x5c>)
 80a36a4:	b10b      	cbz	r3, 80a36aa <serialEventRun+0x2e>
 80a36a6:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a36aa:	4b0c      	ldr	r3, [pc, #48]	; (80a36dc <serialEventRun+0x60>)
 80a36ac:	b17b      	cbz	r3, 80a36ce <serialEventRun+0x52>
 80a36ae:	f7ff ff25 	bl	80a34fc <_Z17_fetch_usbserial1v>
 80a36b2:	6803      	ldr	r3, [r0, #0]
 80a36b4:	691b      	ldr	r3, [r3, #16]
 80a36b6:	4798      	blx	r3
 80a36b8:	2800      	cmp	r0, #0
 80a36ba:	dc06      	bgt.n	80a36ca <serialEventRun+0x4e>
 80a36bc:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a36be:	f3af 8000 	nop.w
 80a36c2:	e7e5      	b.n	80a3690 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a36c4:	f3af 8000 	nop.w
 80a36c8:	e7eb      	b.n	80a36a2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a36ca:	f3af 8000 	nop.w
 80a36ce:	bd08      	pop	{r3, pc}
	...

080a36e0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a36e0:	b508      	push	{r3, lr}
	serialEventRun();
 80a36e2:	f7ff ffcb 	bl	80a367c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a36e6:	f7fe f8a3 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a36ea:	4b01      	ldr	r3, [pc, #4]	; (80a36f0 <_post_loop+0x10>)
 80a36ec:	6018      	str	r0, [r3, #0]
 80a36ee:	bd08      	pop	{r3, pc}
 80a36f0:	20000aa8 	.word	0x20000aa8

080a36f4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a36f4:	4802      	ldr	r0, [pc, #8]	; (80a3700 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a36f6:	4a03      	ldr	r2, [pc, #12]	; (80a3704 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a36f8:	4903      	ldr	r1, [pc, #12]	; (80a3708 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a36fa:	1a12      	subs	r2, r2, r0
 80a36fc:	f001 bc00 	b.w	80a4f00 <memcpy>
 80a3700:	40024000 	.word	0x40024000
 80a3704:	40024004 	.word	0x40024004
 80a3708:	080a59d8 	.word	0x080a59d8

080a370c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a370c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a370e:	2300      	movs	r3, #0
 80a3710:	9300      	str	r3, [sp, #0]
 80a3712:	461a      	mov	r2, r3
 80a3714:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3718:	f7fe fa4e 	bl	80a1bb8 <system_ctrl_set_result>
}
 80a371c:	b003      	add	sp, #12
 80a371e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3724 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a3724:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a3726:	8843      	ldrh	r3, [r0, #2]
 80a3728:	2b0a      	cmp	r3, #10
 80a372a:	d008      	beq.n	80a373e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a372c:	2b50      	cmp	r3, #80	; 0x50
 80a372e:	d109      	bne.n	80a3744 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a3730:	4b09      	ldr	r3, [pc, #36]	; (80a3758 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a3732:	681b      	ldr	r3, [r3, #0]
 80a3734:	b13b      	cbz	r3, 80a3746 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a3736:	b003      	add	sp, #12
 80a3738:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a373c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a373e:	f7ff ffe5 	bl	80a370c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a3742:	e006      	b.n	80a3752 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3744:	2300      	movs	r3, #0
 80a3746:	9300      	str	r3, [sp, #0]
 80a3748:	461a      	mov	r2, r3
 80a374a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a374e:	f7fe fa33 	bl	80a1bb8 <system_ctrl_set_result>
        break;
    }
}
 80a3752:	b003      	add	sp, #12
 80a3754:	f85d fb04 	ldr.w	pc, [sp], #4
 80a3758:	20000aa0 	.word	0x20000aa0

080a375c <module_user_init_hook>:

void module_user_init_hook()
{
 80a375c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a375e:	4c10      	ldr	r4, [pc, #64]	; (80a37a0 <module_user_init_hook+0x44>)
 80a3760:	4d10      	ldr	r5, [pc, #64]	; (80a37a4 <module_user_init_hook+0x48>)
 80a3762:	6823      	ldr	r3, [r4, #0]
 80a3764:	42ab      	cmp	r3, r5
 80a3766:	4b10      	ldr	r3, [pc, #64]	; (80a37a8 <module_user_init_hook+0x4c>)
 80a3768:	bf0c      	ite	eq
 80a376a:	2201      	moveq	r2, #1
 80a376c:	2200      	movne	r2, #0
 80a376e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3770:	d002      	beq.n	80a3778 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a3772:	f7ff ffbf 	bl	80a36f4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a3776:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3778:	f7fe f84a 	bl	80a1810 <HAL_RNG_GetRandomNumber>
 80a377c:	4604      	mov	r4, r0
    srand(seed);
 80a377e:	f001 fbd3 	bl	80a4f28 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a3782:	4b0a      	ldr	r3, [pc, #40]	; (80a37ac <module_user_init_hook+0x50>)
 80a3784:	b113      	cbz	r3, 80a378c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a3786:	4620      	mov	r0, r4
 80a3788:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a378c:	2100      	movs	r1, #0
 80a378e:	4807      	ldr	r0, [pc, #28]	; (80a37ac <module_user_init_hook+0x50>)
 80a3790:	f7fe fa3c 	bl	80a1c0c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a3794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a3798:	2100      	movs	r1, #0
 80a379a:	4805      	ldr	r0, [pc, #20]	; (80a37b0 <module_user_init_hook+0x54>)
 80a379c:	f7fe ba02 	b.w	80a1ba4 <system_ctrl_set_app_request_handler>
 80a37a0:	40024000 	.word	0x40024000
 80a37a4:	9a271c1e 	.word	0x9a271c1e
 80a37a8:	20000aa4 	.word	0x20000aa4
 80a37ac:	00000000 	.word	0x00000000
 80a37b0:	080a3725 	.word	0x080a3725

080a37b4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a37b4:	b510      	push	{r4, lr}
 80a37b6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a37b8:	480f      	ldr	r0, [pc, #60]	; (80a37f8 <pinAvailable+0x44>)
 80a37ba:	f7ff f919 	bl	80a29f0 <_ZN8SPIClass9isEnabledEv>
 80a37be:	b128      	cbz	r0, 80a37cc <pinAvailable+0x18>
 80a37c0:	f1a4 030d 	sub.w	r3, r4, #13
 80a37c4:	2b02      	cmp	r3, #2
 80a37c6:	d801      	bhi.n	80a37cc <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a37c8:	2000      	movs	r0, #0
 80a37ca:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a37cc:	f000 f840 	bl	80a3850 <_Z19__fetch_global_Wirev>
 80a37d0:	f7fe fe14 	bl	80a23fc <_ZN7TwoWire9isEnabledEv>
 80a37d4:	b108      	cbz	r0, 80a37da <pinAvailable+0x26>
 80a37d6:	2c01      	cmp	r4, #1
 80a37d8:	d9f6      	bls.n	80a37c8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a37da:	f7ff fdbd 	bl	80a3358 <_Z22__fetch_global_Serial1v>
 80a37de:	f7ff fdb7 	bl	80a3350 <_ZN11USARTSerial9isEnabledEv>
 80a37e2:	b118      	cbz	r0, 80a37ec <pinAvailable+0x38>
 80a37e4:	f1a4 0312 	sub.w	r3, r4, #18
 80a37e8:	2b01      	cmp	r3, #1
 80a37ea:	d9ed      	bls.n	80a37c8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a37ec:	2c17      	cmp	r4, #23
 80a37ee:	bf8c      	ite	hi
 80a37f0:	2000      	movhi	r0, #0
 80a37f2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a37f4:	bd10      	pop	{r4, pc}
 80a37f6:	bf00      	nop
 80a37f8:	20000adc 	.word	0x20000adc

080a37fc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a37fc:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a37fe:	b538      	push	{r3, r4, r5, lr}
 80a3800:	4604      	mov	r4, r0
 80a3802:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3804:	d80a      	bhi.n	80a381c <pinMode+0x20>
 80a3806:	29ff      	cmp	r1, #255	; 0xff
 80a3808:	d008      	beq.n	80a381c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a380a:	f7ff ffd3 	bl	80a37b4 <pinAvailable>
 80a380e:	b128      	cbz	r0, 80a381c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3810:	4629      	mov	r1, r5
 80a3812:	4620      	mov	r0, r4
}
 80a3814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3818:	f7fe b81a 	b.w	80a1850 <HAL_Pin_Mode>
 80a381c:	bd38      	pop	{r3, r4, r5, pc}

080a381e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a381e:	b538      	push	{r3, r4, r5, lr}
 80a3820:	4604      	mov	r4, r0
 80a3822:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3824:	f7fe f81c 	bl	80a1860 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3828:	28ff      	cmp	r0, #255	; 0xff
 80a382a:	d010      	beq.n	80a384e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a382c:	2806      	cmp	r0, #6
 80a382e:	d804      	bhi.n	80a383a <digitalWrite+0x1c>
 80a3830:	234d      	movs	r3, #77	; 0x4d
 80a3832:	fa23 f000 	lsr.w	r0, r3, r0
 80a3836:	07c3      	lsls	r3, r0, #31
 80a3838:	d409      	bmi.n	80a384e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a383a:	4620      	mov	r0, r4
 80a383c:	f7ff ffba 	bl	80a37b4 <pinAvailable>
 80a3840:	b128      	cbz	r0, 80a384e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3842:	4629      	mov	r1, r5
 80a3844:	4620      	mov	r0, r4
}
 80a3846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a384a:	f7fe b811 	b.w	80a1870 <HAL_GPIO_Write>
 80a384e:	bd38      	pop	{r3, r4, r5, pc}

080a3850 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a3850:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a3852:	4d0b      	ldr	r5, [pc, #44]	; (80a3880 <_Z19__fetch_global_Wirev+0x30>)
 80a3854:	6829      	ldr	r1, [r5, #0]
 80a3856:	f011 0401 	ands.w	r4, r1, #1
 80a385a:	d10f      	bne.n	80a387c <_Z19__fetch_global_Wirev+0x2c>
 80a385c:	4628      	mov	r0, r5
 80a385e:	f7fc fc22 	bl	80a00a6 <__cxa_guard_acquire>
 80a3862:	b158      	cbz	r0, 80a387c <_Z19__fetch_global_Wirev+0x2c>
 80a3864:	4621      	mov	r1, r4
 80a3866:	4807      	ldr	r0, [pc, #28]	; (80a3884 <_Z19__fetch_global_Wirev+0x34>)
 80a3868:	f7fe fd94 	bl	80a2394 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a386c:	4628      	mov	r0, r5
 80a386e:	f7fc fc1f 	bl	80a00b0 <__cxa_guard_release>
 80a3872:	4a05      	ldr	r2, [pc, #20]	; (80a3888 <_Z19__fetch_global_Wirev+0x38>)
 80a3874:	4905      	ldr	r1, [pc, #20]	; (80a388c <_Z19__fetch_global_Wirev+0x3c>)
 80a3876:	4803      	ldr	r0, [pc, #12]	; (80a3884 <_Z19__fetch_global_Wirev+0x34>)
 80a3878:	f000 f844 	bl	80a3904 <__aeabi_atexit>
	return wire;
}
 80a387c:	4801      	ldr	r0, [pc, #4]	; (80a3884 <_Z19__fetch_global_Wirev+0x34>)
 80a387e:	bd38      	pop	{r3, r4, r5, pc}
 80a3880:	20000aac 	.word	0x20000aac
 80a3884:	20000ab0 	.word	0x20000ab0
 80a3888:	200000a8 	.word	0x200000a8
 80a388c:	080a233d 	.word	0x080a233d

080a3890 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3890:	b513      	push	{r0, r1, r4, lr}
 80a3892:	4c08      	ldr	r4, [pc, #32]	; (80a38b4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3894:	2300      	movs	r3, #0
 80a3896:	461a      	mov	r2, r3
 80a3898:	4619      	mov	r1, r3
 80a389a:	9300      	str	r3, [sp, #0]
 80a389c:	4620      	mov	r0, r4
 80a389e:	f7fe fe09 	bl	80a24b4 <_ZN9IPAddressC1Ehhhh>
 80a38a2:	4620      	mov	r0, r4
 80a38a4:	4a04      	ldr	r2, [pc, #16]	; (80a38b8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a38a6:	4905      	ldr	r1, [pc, #20]	; (80a38bc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a38a8:	b002      	add	sp, #8
 80a38aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a38ae:	f000 b829 	b.w	80a3904 <__aeabi_atexit>
 80a38b2:	bf00      	nop
 80a38b4:	20000ac4 	.word	0x20000ac4
 80a38b8:	200000a8 	.word	0x200000a8
 80a38bc:	080a2405 	.word	0x080a2405

080a38c0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a38c0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a38c2:	4c0c      	ldr	r4, [pc, #48]	; (80a38f4 <_GLOBAL__sub_I_SPI+0x34>)
 80a38c4:	4e0c      	ldr	r6, [pc, #48]	; (80a38f8 <_GLOBAL__sub_I_SPI+0x38>)
 80a38c6:	4d0d      	ldr	r5, [pc, #52]	; (80a38fc <_GLOBAL__sub_I_SPI+0x3c>)
 80a38c8:	2100      	movs	r1, #0
 80a38ca:	4620      	mov	r0, r4
 80a38cc:	f7ff f810 	bl	80a28f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a38d0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a38d2:	4c0b      	ldr	r4, [pc, #44]	; (80a3900 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a38d4:	4632      	mov	r2, r6
 80a38d6:	4629      	mov	r1, r5
 80a38d8:	f000 f814 	bl	80a3904 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a38dc:	2101      	movs	r1, #1
 80a38de:	4620      	mov	r0, r4
 80a38e0:	f7ff f806 	bl	80a28f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a38e4:	4632      	mov	r2, r6
 80a38e6:	4629      	mov	r1, r5
 80a38e8:	4620      	mov	r0, r4
 80a38ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a38ee:	f000 b809 	b.w	80a3904 <__aeabi_atexit>
 80a38f2:	bf00      	nop
 80a38f4:	20000adc 	.word	0x20000adc
 80a38f8:	200000a8 	.word	0x200000a8
 80a38fc:	080a28e1 	.word	0x080a28e1
 80a3900:	20000aec 	.word	0x20000aec

080a3904 <__aeabi_atexit>:
 80a3904:	460b      	mov	r3, r1
 80a3906:	4601      	mov	r1, r0
 80a3908:	4618      	mov	r0, r3
 80a390a:	f001 baeb 	b.w	80a4ee4 <__cxa_atexit>

080a390e <_ZdlPvj>:
 80a390e:	f7fc bbc8 	b.w	80a00a2 <_ZdlPv>

080a3912 <_ZSt25__throw_bad_function_callv>:
 80a3912:	b508      	push	{r3, lr}
 80a3914:	f7fe f9f2 	bl	80a1cfc <abort>

080a3918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a3918:	4b24      	ldr	r3, [pc, #144]	; (80a39ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a391a:	681a      	ldr	r2, [r3, #0]
 80a391c:	07d0      	lsls	r0, r2, #31
 80a391e:	bf5c      	itt	pl
 80a3920:	2201      	movpl	r2, #1
 80a3922:	601a      	strpl	r2, [r3, #0]
 80a3924:	4b22      	ldr	r3, [pc, #136]	; (80a39b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a3926:	681a      	ldr	r2, [r3, #0]
 80a3928:	07d1      	lsls	r1, r2, #31
 80a392a:	bf5c      	itt	pl
 80a392c:	2201      	movpl	r2, #1
 80a392e:	601a      	strpl	r2, [r3, #0]
 80a3930:	4b20      	ldr	r3, [pc, #128]	; (80a39b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a3932:	681a      	ldr	r2, [r3, #0]
 80a3934:	07d2      	lsls	r2, r2, #31
 80a3936:	bf5c      	itt	pl
 80a3938:	2201      	movpl	r2, #1
 80a393a:	601a      	strpl	r2, [r3, #0]
 80a393c:	4b1e      	ldr	r3, [pc, #120]	; (80a39b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a393e:	681a      	ldr	r2, [r3, #0]
 80a3940:	07d0      	lsls	r0, r2, #31
 80a3942:	bf5c      	itt	pl
 80a3944:	2201      	movpl	r2, #1
 80a3946:	601a      	strpl	r2, [r3, #0]
 80a3948:	4b1c      	ldr	r3, [pc, #112]	; (80a39bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a394a:	681a      	ldr	r2, [r3, #0]
 80a394c:	07d1      	lsls	r1, r2, #31
 80a394e:	bf5c      	itt	pl
 80a3950:	2201      	movpl	r2, #1
 80a3952:	601a      	strpl	r2, [r3, #0]
 80a3954:	4b1a      	ldr	r3, [pc, #104]	; (80a39c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a3956:	681a      	ldr	r2, [r3, #0]
 80a3958:	07d2      	lsls	r2, r2, #31
 80a395a:	bf5c      	itt	pl
 80a395c:	2201      	movpl	r2, #1
 80a395e:	601a      	strpl	r2, [r3, #0]
 80a3960:	4b18      	ldr	r3, [pc, #96]	; (80a39c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a3962:	681a      	ldr	r2, [r3, #0]
 80a3964:	07d0      	lsls	r0, r2, #31
 80a3966:	bf5c      	itt	pl
 80a3968:	2201      	movpl	r2, #1
 80a396a:	601a      	strpl	r2, [r3, #0]
 80a396c:	4b16      	ldr	r3, [pc, #88]	; (80a39c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a396e:	681a      	ldr	r2, [r3, #0]
 80a3970:	07d1      	lsls	r1, r2, #31
 80a3972:	bf5c      	itt	pl
 80a3974:	2201      	movpl	r2, #1
 80a3976:	601a      	strpl	r2, [r3, #0]
 80a3978:	4b14      	ldr	r3, [pc, #80]	; (80a39cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a397a:	681a      	ldr	r2, [r3, #0]
 80a397c:	07d2      	lsls	r2, r2, #31
 80a397e:	bf5c      	itt	pl
 80a3980:	2201      	movpl	r2, #1
 80a3982:	601a      	strpl	r2, [r3, #0]
 80a3984:	4b12      	ldr	r3, [pc, #72]	; (80a39d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a3986:	681a      	ldr	r2, [r3, #0]
 80a3988:	07d0      	lsls	r0, r2, #31
 80a398a:	bf5c      	itt	pl
 80a398c:	2201      	movpl	r2, #1
 80a398e:	601a      	strpl	r2, [r3, #0]
 80a3990:	4b10      	ldr	r3, [pc, #64]	; (80a39d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a3992:	681a      	ldr	r2, [r3, #0]
 80a3994:	07d1      	lsls	r1, r2, #31
 80a3996:	bf5c      	itt	pl
 80a3998:	2201      	movpl	r2, #1
 80a399a:	601a      	strpl	r2, [r3, #0]
 80a399c:	4b0e      	ldr	r3, [pc, #56]	; (80a39d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a399e:	681a      	ldr	r2, [r3, #0]
 80a39a0:	07d2      	lsls	r2, r2, #31
 80a39a2:	bf5c      	itt	pl
 80a39a4:	2201      	movpl	r2, #1
 80a39a6:	601a      	strpl	r2, [r3, #0]
 80a39a8:	4770      	bx	lr
 80a39aa:	bf00      	nop
 80a39ac:	20000b28 	.word	0x20000b28
 80a39b0:	20000b24 	.word	0x20000b24
 80a39b4:	20000b20 	.word	0x20000b20
 80a39b8:	20000b1c 	.word	0x20000b1c
 80a39bc:	20000b18 	.word	0x20000b18
 80a39c0:	20000b14 	.word	0x20000b14
 80a39c4:	20000b10 	.word	0x20000b10
 80a39c8:	20000b0c 	.word	0x20000b0c
 80a39cc:	20000b08 	.word	0x20000b08
 80a39d0:	20000b04 	.word	0x20000b04
 80a39d4:	20000b00 	.word	0x20000b00
 80a39d8:	20000afc 	.word	0x20000afc

080a39dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a39dc:	4b18      	ldr	r3, [pc, #96]	; (80a3a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a39de:	681a      	ldr	r2, [r3, #0]
 80a39e0:	07d1      	lsls	r1, r2, #31
 80a39e2:	bf5c      	itt	pl
 80a39e4:	2201      	movpl	r2, #1
 80a39e6:	601a      	strpl	r2, [r3, #0]
 80a39e8:	4b16      	ldr	r3, [pc, #88]	; (80a3a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a39ea:	681a      	ldr	r2, [r3, #0]
 80a39ec:	07d2      	lsls	r2, r2, #31
 80a39ee:	bf5c      	itt	pl
 80a39f0:	2201      	movpl	r2, #1
 80a39f2:	601a      	strpl	r2, [r3, #0]
 80a39f4:	4b14      	ldr	r3, [pc, #80]	; (80a3a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a39f6:	681a      	ldr	r2, [r3, #0]
 80a39f8:	07d0      	lsls	r0, r2, #31
 80a39fa:	bf5c      	itt	pl
 80a39fc:	2201      	movpl	r2, #1
 80a39fe:	601a      	strpl	r2, [r3, #0]
 80a3a00:	4b12      	ldr	r3, [pc, #72]	; (80a3a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3a02:	681a      	ldr	r2, [r3, #0]
 80a3a04:	07d1      	lsls	r1, r2, #31
 80a3a06:	bf5c      	itt	pl
 80a3a08:	2201      	movpl	r2, #1
 80a3a0a:	601a      	strpl	r2, [r3, #0]
 80a3a0c:	4b10      	ldr	r3, [pc, #64]	; (80a3a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3a0e:	681a      	ldr	r2, [r3, #0]
 80a3a10:	07d2      	lsls	r2, r2, #31
 80a3a12:	bf5c      	itt	pl
 80a3a14:	2201      	movpl	r2, #1
 80a3a16:	601a      	strpl	r2, [r3, #0]
 80a3a18:	4b0e      	ldr	r3, [pc, #56]	; (80a3a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3a1a:	681a      	ldr	r2, [r3, #0]
 80a3a1c:	07d0      	lsls	r0, r2, #31
 80a3a1e:	bf5c      	itt	pl
 80a3a20:	2201      	movpl	r2, #1
 80a3a22:	601a      	strpl	r2, [r3, #0]
 80a3a24:	4b0c      	ldr	r3, [pc, #48]	; (80a3a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3a26:	681a      	ldr	r2, [r3, #0]
 80a3a28:	07d1      	lsls	r1, r2, #31
 80a3a2a:	bf5c      	itt	pl
 80a3a2c:	2201      	movpl	r2, #1
 80a3a2e:	601a      	strpl	r2, [r3, #0]
 80a3a30:	4b0a      	ldr	r3, [pc, #40]	; (80a3a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3a32:	681a      	ldr	r2, [r3, #0]
 80a3a34:	07d2      	lsls	r2, r2, #31
 80a3a36:	bf5c      	itt	pl
 80a3a38:	2201      	movpl	r2, #1
 80a3a3a:	601a      	strpl	r2, [r3, #0]
 80a3a3c:	4770      	bx	lr
 80a3a3e:	bf00      	nop
 80a3a40:	20000b48 	.word	0x20000b48
 80a3a44:	20000b44 	.word	0x20000b44
 80a3a48:	20000b40 	.word	0x20000b40
 80a3a4c:	20000b3c 	.word	0x20000b3c
 80a3a50:	20000b38 	.word	0x20000b38
 80a3a54:	20000b34 	.word	0x20000b34
 80a3a58:	20000b30 	.word	0x20000b30
 80a3a5c:	20000b2c 	.word	0x20000b2c

080a3a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3a60:	4b18      	ldr	r3, [pc, #96]	; (80a3ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3a62:	681a      	ldr	r2, [r3, #0]
 80a3a64:	07d1      	lsls	r1, r2, #31
 80a3a66:	bf5c      	itt	pl
 80a3a68:	2201      	movpl	r2, #1
 80a3a6a:	601a      	strpl	r2, [r3, #0]
 80a3a6c:	4b16      	ldr	r3, [pc, #88]	; (80a3ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3a6e:	681a      	ldr	r2, [r3, #0]
 80a3a70:	07d2      	lsls	r2, r2, #31
 80a3a72:	bf5c      	itt	pl
 80a3a74:	2201      	movpl	r2, #1
 80a3a76:	601a      	strpl	r2, [r3, #0]
 80a3a78:	4b14      	ldr	r3, [pc, #80]	; (80a3acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3a7a:	681a      	ldr	r2, [r3, #0]
 80a3a7c:	07d0      	lsls	r0, r2, #31
 80a3a7e:	bf5c      	itt	pl
 80a3a80:	2201      	movpl	r2, #1
 80a3a82:	601a      	strpl	r2, [r3, #0]
 80a3a84:	4b12      	ldr	r3, [pc, #72]	; (80a3ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3a86:	681a      	ldr	r2, [r3, #0]
 80a3a88:	07d1      	lsls	r1, r2, #31
 80a3a8a:	bf5c      	itt	pl
 80a3a8c:	2201      	movpl	r2, #1
 80a3a8e:	601a      	strpl	r2, [r3, #0]
 80a3a90:	4b10      	ldr	r3, [pc, #64]	; (80a3ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3a92:	681a      	ldr	r2, [r3, #0]
 80a3a94:	07d2      	lsls	r2, r2, #31
 80a3a96:	bf5c      	itt	pl
 80a3a98:	2201      	movpl	r2, #1
 80a3a9a:	601a      	strpl	r2, [r3, #0]
 80a3a9c:	4b0e      	ldr	r3, [pc, #56]	; (80a3ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3a9e:	681a      	ldr	r2, [r3, #0]
 80a3aa0:	07d0      	lsls	r0, r2, #31
 80a3aa2:	bf5c      	itt	pl
 80a3aa4:	2201      	movpl	r2, #1
 80a3aa6:	601a      	strpl	r2, [r3, #0]
 80a3aa8:	4b0c      	ldr	r3, [pc, #48]	; (80a3adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3aaa:	681a      	ldr	r2, [r3, #0]
 80a3aac:	07d1      	lsls	r1, r2, #31
 80a3aae:	bf5c      	itt	pl
 80a3ab0:	2201      	movpl	r2, #1
 80a3ab2:	601a      	strpl	r2, [r3, #0]
 80a3ab4:	4b0a      	ldr	r3, [pc, #40]	; (80a3ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3ab6:	681a      	ldr	r2, [r3, #0]
 80a3ab8:	07d2      	lsls	r2, r2, #31
 80a3aba:	bf5c      	itt	pl
 80a3abc:	2201      	movpl	r2, #1
 80a3abe:	601a      	strpl	r2, [r3, #0]
 80a3ac0:	4770      	bx	lr
 80a3ac2:	bf00      	nop
 80a3ac4:	20000b68 	.word	0x20000b68
 80a3ac8:	20000b64 	.word	0x20000b64
 80a3acc:	20000b60 	.word	0x20000b60
 80a3ad0:	20000b5c 	.word	0x20000b5c
 80a3ad4:	20000b58 	.word	0x20000b58
 80a3ad8:	20000b54 	.word	0x20000b54
 80a3adc:	20000b50 	.word	0x20000b50
 80a3ae0:	20000b4c 	.word	0x20000b4c

080a3ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a3ae4:	4b24      	ldr	r3, [pc, #144]	; (80a3b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a3ae6:	681a      	ldr	r2, [r3, #0]
 80a3ae8:	07d0      	lsls	r0, r2, #31
 80a3aea:	bf5c      	itt	pl
 80a3aec:	2201      	movpl	r2, #1
 80a3aee:	601a      	strpl	r2, [r3, #0]
 80a3af0:	4b22      	ldr	r3, [pc, #136]	; (80a3b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a3af2:	681a      	ldr	r2, [r3, #0]
 80a3af4:	07d1      	lsls	r1, r2, #31
 80a3af6:	bf5c      	itt	pl
 80a3af8:	2201      	movpl	r2, #1
 80a3afa:	601a      	strpl	r2, [r3, #0]
 80a3afc:	4b20      	ldr	r3, [pc, #128]	; (80a3b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a3afe:	681a      	ldr	r2, [r3, #0]
 80a3b00:	07d2      	lsls	r2, r2, #31
 80a3b02:	bf5c      	itt	pl
 80a3b04:	2201      	movpl	r2, #1
 80a3b06:	601a      	strpl	r2, [r3, #0]
 80a3b08:	4b1e      	ldr	r3, [pc, #120]	; (80a3b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a3b0a:	681a      	ldr	r2, [r3, #0]
 80a3b0c:	07d0      	lsls	r0, r2, #31
 80a3b0e:	bf5c      	itt	pl
 80a3b10:	2201      	movpl	r2, #1
 80a3b12:	601a      	strpl	r2, [r3, #0]
 80a3b14:	4b1c      	ldr	r3, [pc, #112]	; (80a3b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a3b16:	681a      	ldr	r2, [r3, #0]
 80a3b18:	07d1      	lsls	r1, r2, #31
 80a3b1a:	bf5c      	itt	pl
 80a3b1c:	2201      	movpl	r2, #1
 80a3b1e:	601a      	strpl	r2, [r3, #0]
 80a3b20:	4b1a      	ldr	r3, [pc, #104]	; (80a3b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a3b22:	681a      	ldr	r2, [r3, #0]
 80a3b24:	07d2      	lsls	r2, r2, #31
 80a3b26:	bf5c      	itt	pl
 80a3b28:	2201      	movpl	r2, #1
 80a3b2a:	601a      	strpl	r2, [r3, #0]
 80a3b2c:	4b18      	ldr	r3, [pc, #96]	; (80a3b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a3b2e:	681a      	ldr	r2, [r3, #0]
 80a3b30:	07d0      	lsls	r0, r2, #31
 80a3b32:	bf5c      	itt	pl
 80a3b34:	2201      	movpl	r2, #1
 80a3b36:	601a      	strpl	r2, [r3, #0]
 80a3b38:	4b16      	ldr	r3, [pc, #88]	; (80a3b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a3b3a:	681a      	ldr	r2, [r3, #0]
 80a3b3c:	07d1      	lsls	r1, r2, #31
 80a3b3e:	bf5c      	itt	pl
 80a3b40:	2201      	movpl	r2, #1
 80a3b42:	601a      	strpl	r2, [r3, #0]
 80a3b44:	4b14      	ldr	r3, [pc, #80]	; (80a3b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a3b46:	681a      	ldr	r2, [r3, #0]
 80a3b48:	07d2      	lsls	r2, r2, #31
 80a3b4a:	bf5c      	itt	pl
 80a3b4c:	2201      	movpl	r2, #1
 80a3b4e:	601a      	strpl	r2, [r3, #0]
 80a3b50:	4b12      	ldr	r3, [pc, #72]	; (80a3b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a3b52:	681a      	ldr	r2, [r3, #0]
 80a3b54:	07d0      	lsls	r0, r2, #31
 80a3b56:	bf5c      	itt	pl
 80a3b58:	2201      	movpl	r2, #1
 80a3b5a:	601a      	strpl	r2, [r3, #0]
 80a3b5c:	4b10      	ldr	r3, [pc, #64]	; (80a3ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a3b5e:	681a      	ldr	r2, [r3, #0]
 80a3b60:	07d1      	lsls	r1, r2, #31
 80a3b62:	bf5c      	itt	pl
 80a3b64:	2201      	movpl	r2, #1
 80a3b66:	601a      	strpl	r2, [r3, #0]
 80a3b68:	4b0e      	ldr	r3, [pc, #56]	; (80a3ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a3b6a:	681a      	ldr	r2, [r3, #0]
 80a3b6c:	07d2      	lsls	r2, r2, #31
 80a3b6e:	bf5c      	itt	pl
 80a3b70:	2201      	movpl	r2, #1
 80a3b72:	601a      	strpl	r2, [r3, #0]
 80a3b74:	4770      	bx	lr
 80a3b76:	bf00      	nop
 80a3b78:	20000b98 	.word	0x20000b98
 80a3b7c:	20000b94 	.word	0x20000b94
 80a3b80:	20000b90 	.word	0x20000b90
 80a3b84:	20000b8c 	.word	0x20000b8c
 80a3b88:	20000b88 	.word	0x20000b88
 80a3b8c:	20000b84 	.word	0x20000b84
 80a3b90:	20000b80 	.word	0x20000b80
 80a3b94:	20000b7c 	.word	0x20000b7c
 80a3b98:	20000b78 	.word	0x20000b78
 80a3b9c:	20000b74 	.word	0x20000b74
 80a3ba0:	20000b70 	.word	0x20000b70
 80a3ba4:	20000b6c 	.word	0x20000b6c

080a3ba8 <floor>:
 80a3ba8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80a3bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3bb0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80a3bb4:	2e13      	cmp	r6, #19
 80a3bb6:	460b      	mov	r3, r1
 80a3bb8:	4604      	mov	r4, r0
 80a3bba:	460d      	mov	r5, r1
 80a3bbc:	4688      	mov	r8, r1
 80a3bbe:	4607      	mov	r7, r0
 80a3bc0:	dc1c      	bgt.n	80a3bfc <floor+0x54>
 80a3bc2:	2e00      	cmp	r6, #0
 80a3bc4:	db3f      	blt.n	80a3c46 <floor+0x9e>
 80a3bc6:	4a3a      	ldr	r2, [pc, #232]	; (80a3cb0 <floor+0x108>)
 80a3bc8:	4686      	mov	lr, r0
 80a3bca:	fa42 f906 	asr.w	r9, r2, r6
 80a3bce:	ea01 0209 	and.w	r2, r1, r9
 80a3bd2:	4302      	orrs	r2, r0
 80a3bd4:	d017      	beq.n	80a3c06 <floor+0x5e>
 80a3bd6:	a334      	add	r3, pc, #208	; (adr r3, 80a3ca8 <floor+0x100>)
 80a3bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3bdc:	f000 f872 	bl	80a3cc4 <__adddf3>
 80a3be0:	2200      	movs	r2, #0
 80a3be2:	2300      	movs	r3, #0
 80a3be4:	f000 fcb0 	bl	80a4548 <__aeabi_dcmpgt>
 80a3be8:	b120      	cbz	r0, 80a3bf4 <floor+0x4c>
 80a3bea:	2d00      	cmp	r5, #0
 80a3bec:	db40      	blt.n	80a3c70 <floor+0xc8>
 80a3bee:	ea28 0509 	bic.w	r5, r8, r9
 80a3bf2:	2700      	movs	r7, #0
 80a3bf4:	4638      	mov	r0, r7
 80a3bf6:	4629      	mov	r1, r5
 80a3bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3bfc:	2e33      	cmp	r6, #51	; 0x33
 80a3bfe:	dd06      	ble.n	80a3c0e <floor+0x66>
 80a3c00:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a3c04:	d02f      	beq.n	80a3c66 <floor+0xbe>
 80a3c06:	4620      	mov	r0, r4
 80a3c08:	4619      	mov	r1, r3
 80a3c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3c0e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80a3c12:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80a3c16:	fa29 f902 	lsr.w	r9, r9, r2
 80a3c1a:	ea10 0f09 	tst.w	r0, r9
 80a3c1e:	d0f2      	beq.n	80a3c06 <floor+0x5e>
 80a3c20:	a321      	add	r3, pc, #132	; (adr r3, 80a3ca8 <floor+0x100>)
 80a3c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c26:	f000 f84d 	bl	80a3cc4 <__adddf3>
 80a3c2a:	2200      	movs	r2, #0
 80a3c2c:	2300      	movs	r3, #0
 80a3c2e:	f000 fc8b 	bl	80a4548 <__aeabi_dcmpgt>
 80a3c32:	2800      	cmp	r0, #0
 80a3c34:	d0de      	beq.n	80a3bf4 <floor+0x4c>
 80a3c36:	2d00      	cmp	r5, #0
 80a3c38:	db20      	blt.n	80a3c7c <floor+0xd4>
 80a3c3a:	4645      	mov	r5, r8
 80a3c3c:	ea27 0709 	bic.w	r7, r7, r9
 80a3c40:	4638      	mov	r0, r7
 80a3c42:	4629      	mov	r1, r5
 80a3c44:	e7d8      	b.n	80a3bf8 <floor+0x50>
 80a3c46:	a318      	add	r3, pc, #96	; (adr r3, 80a3ca8 <floor+0x100>)
 80a3c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c4c:	f000 f83a 	bl	80a3cc4 <__adddf3>
 80a3c50:	2200      	movs	r2, #0
 80a3c52:	2300      	movs	r3, #0
 80a3c54:	f000 fc78 	bl	80a4548 <__aeabi_dcmpgt>
 80a3c58:	2800      	cmp	r0, #0
 80a3c5a:	d0cb      	beq.n	80a3bf4 <floor+0x4c>
 80a3c5c:	2d00      	cmp	r5, #0
 80a3c5e:	db18      	blt.n	80a3c92 <floor+0xea>
 80a3c60:	2700      	movs	r7, #0
 80a3c62:	463d      	mov	r5, r7
 80a3c64:	e7c6      	b.n	80a3bf4 <floor+0x4c>
 80a3c66:	4602      	mov	r2, r0
 80a3c68:	460b      	mov	r3, r1
 80a3c6a:	f000 f82b 	bl	80a3cc4 <__adddf3>
 80a3c6e:	e7cc      	b.n	80a3c0a <floor+0x62>
 80a3c70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a3c74:	fa43 f606 	asr.w	r6, r3, r6
 80a3c78:	44b0      	add	r8, r6
 80a3c7a:	e7b8      	b.n	80a3bee <floor+0x46>
 80a3c7c:	2e14      	cmp	r6, #20
 80a3c7e:	d010      	beq.n	80a3ca2 <floor+0xfa>
 80a3c80:	2301      	movs	r3, #1
 80a3c82:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80a3c86:	fa03 f606 	lsl.w	r6, r3, r6
 80a3c8a:	1937      	adds	r7, r6, r4
 80a3c8c:	bf28      	it	cs
 80a3c8e:	4498      	addcs	r8, r3
 80a3c90:	e7d3      	b.n	80a3c3a <floor+0x92>
 80a3c92:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80a3c96:	4b07      	ldr	r3, [pc, #28]	; (80a3cb4 <floor+0x10c>)
 80a3c98:	4322      	orrs	r2, r4
 80a3c9a:	bf18      	it	ne
 80a3c9c:	461d      	movne	r5, r3
 80a3c9e:	2700      	movs	r7, #0
 80a3ca0:	e7a8      	b.n	80a3bf4 <floor+0x4c>
 80a3ca2:	f105 0801 	add.w	r8, r5, #1
 80a3ca6:	e7c8      	b.n	80a3c3a <floor+0x92>
 80a3ca8:	8800759c 	.word	0x8800759c
 80a3cac:	7e37e43c 	.word	0x7e37e43c
 80a3cb0:	000fffff 	.word	0x000fffff
 80a3cb4:	bff00000 	.word	0xbff00000

080a3cb8 <__aeabi_drsub>:
 80a3cb8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3cbc:	e002      	b.n	80a3cc4 <__adddf3>
 80a3cbe:	bf00      	nop

080a3cc0 <__aeabi_dsub>:
 80a3cc0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3cc4 <__adddf3>:
 80a3cc4:	b530      	push	{r4, r5, lr}
 80a3cc6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3cca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3cce:	ea94 0f05 	teq	r4, r5
 80a3cd2:	bf08      	it	eq
 80a3cd4:	ea90 0f02 	teqeq	r0, r2
 80a3cd8:	bf1f      	itttt	ne
 80a3cda:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3cde:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a3ce2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a3ce6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3cea:	f000 80e2 	beq.w	80a3eb2 <__adddf3+0x1ee>
 80a3cee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a3cf2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3cf6:	bfb8      	it	lt
 80a3cf8:	426d      	neglt	r5, r5
 80a3cfa:	dd0c      	ble.n	80a3d16 <__adddf3+0x52>
 80a3cfc:	442c      	add	r4, r5
 80a3cfe:	ea80 0202 	eor.w	r2, r0, r2
 80a3d02:	ea81 0303 	eor.w	r3, r1, r3
 80a3d06:	ea82 0000 	eor.w	r0, r2, r0
 80a3d0a:	ea83 0101 	eor.w	r1, r3, r1
 80a3d0e:	ea80 0202 	eor.w	r2, r0, r2
 80a3d12:	ea81 0303 	eor.w	r3, r1, r3
 80a3d16:	2d36      	cmp	r5, #54	; 0x36
 80a3d18:	bf88      	it	hi
 80a3d1a:	bd30      	pophi	{r4, r5, pc}
 80a3d1c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3d20:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3d24:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3d28:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3d2c:	d002      	beq.n	80a3d34 <__adddf3+0x70>
 80a3d2e:	4240      	negs	r0, r0
 80a3d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3d34:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3d38:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3d3c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3d40:	d002      	beq.n	80a3d48 <__adddf3+0x84>
 80a3d42:	4252      	negs	r2, r2
 80a3d44:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3d48:	ea94 0f05 	teq	r4, r5
 80a3d4c:	f000 80a7 	beq.w	80a3e9e <__adddf3+0x1da>
 80a3d50:	f1a4 0401 	sub.w	r4, r4, #1
 80a3d54:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3d58:	db0d      	blt.n	80a3d76 <__adddf3+0xb2>
 80a3d5a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a3d5e:	fa22 f205 	lsr.w	r2, r2, r5
 80a3d62:	1880      	adds	r0, r0, r2
 80a3d64:	f141 0100 	adc.w	r1, r1, #0
 80a3d68:	fa03 f20e 	lsl.w	r2, r3, lr
 80a3d6c:	1880      	adds	r0, r0, r2
 80a3d6e:	fa43 f305 	asr.w	r3, r3, r5
 80a3d72:	4159      	adcs	r1, r3
 80a3d74:	e00e      	b.n	80a3d94 <__adddf3+0xd0>
 80a3d76:	f1a5 0520 	sub.w	r5, r5, #32
 80a3d7a:	f10e 0e20 	add.w	lr, lr, #32
 80a3d7e:	2a01      	cmp	r2, #1
 80a3d80:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3d84:	bf28      	it	cs
 80a3d86:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3d8a:	fa43 f305 	asr.w	r3, r3, r5
 80a3d8e:	18c0      	adds	r0, r0, r3
 80a3d90:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3d94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3d98:	d507      	bpl.n	80a3daa <__adddf3+0xe6>
 80a3d9a:	f04f 0e00 	mov.w	lr, #0
 80a3d9e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3da2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3da6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3daa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3dae:	d31b      	bcc.n	80a3de8 <__adddf3+0x124>
 80a3db0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3db4:	d30c      	bcc.n	80a3dd0 <__adddf3+0x10c>
 80a3db6:	0849      	lsrs	r1, r1, #1
 80a3db8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3dbc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3dc0:	f104 0401 	add.w	r4, r4, #1
 80a3dc4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3dc8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3dcc:	f080 809a 	bcs.w	80a3f04 <__adddf3+0x240>
 80a3dd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3dd4:	bf08      	it	eq
 80a3dd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3dda:	f150 0000 	adcs.w	r0, r0, #0
 80a3dde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3de2:	ea41 0105 	orr.w	r1, r1, r5
 80a3de6:	bd30      	pop	{r4, r5, pc}
 80a3de8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3dec:	4140      	adcs	r0, r0
 80a3dee:	eb41 0101 	adc.w	r1, r1, r1
 80a3df2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3df6:	f1a4 0401 	sub.w	r4, r4, #1
 80a3dfa:	d1e9      	bne.n	80a3dd0 <__adddf3+0x10c>
 80a3dfc:	f091 0f00 	teq	r1, #0
 80a3e00:	bf04      	itt	eq
 80a3e02:	4601      	moveq	r1, r0
 80a3e04:	2000      	moveq	r0, #0
 80a3e06:	fab1 f381 	clz	r3, r1
 80a3e0a:	bf08      	it	eq
 80a3e0c:	3320      	addeq	r3, #32
 80a3e0e:	f1a3 030b 	sub.w	r3, r3, #11
 80a3e12:	f1b3 0220 	subs.w	r2, r3, #32
 80a3e16:	da0c      	bge.n	80a3e32 <__adddf3+0x16e>
 80a3e18:	320c      	adds	r2, #12
 80a3e1a:	dd08      	ble.n	80a3e2e <__adddf3+0x16a>
 80a3e1c:	f102 0c14 	add.w	ip, r2, #20
 80a3e20:	f1c2 020c 	rsb	r2, r2, #12
 80a3e24:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3e28:	fa21 f102 	lsr.w	r1, r1, r2
 80a3e2c:	e00c      	b.n	80a3e48 <__adddf3+0x184>
 80a3e2e:	f102 0214 	add.w	r2, r2, #20
 80a3e32:	bfd8      	it	le
 80a3e34:	f1c2 0c20 	rsble	ip, r2, #32
 80a3e38:	fa01 f102 	lsl.w	r1, r1, r2
 80a3e3c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3e40:	bfdc      	itt	le
 80a3e42:	ea41 010c 	orrle.w	r1, r1, ip
 80a3e46:	4090      	lslle	r0, r2
 80a3e48:	1ae4      	subs	r4, r4, r3
 80a3e4a:	bfa2      	ittt	ge
 80a3e4c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3e50:	4329      	orrge	r1, r5
 80a3e52:	bd30      	popge	{r4, r5, pc}
 80a3e54:	ea6f 0404 	mvn.w	r4, r4
 80a3e58:	3c1f      	subs	r4, #31
 80a3e5a:	da1c      	bge.n	80a3e96 <__adddf3+0x1d2>
 80a3e5c:	340c      	adds	r4, #12
 80a3e5e:	dc0e      	bgt.n	80a3e7e <__adddf3+0x1ba>
 80a3e60:	f104 0414 	add.w	r4, r4, #20
 80a3e64:	f1c4 0220 	rsb	r2, r4, #32
 80a3e68:	fa20 f004 	lsr.w	r0, r0, r4
 80a3e6c:	fa01 f302 	lsl.w	r3, r1, r2
 80a3e70:	ea40 0003 	orr.w	r0, r0, r3
 80a3e74:	fa21 f304 	lsr.w	r3, r1, r4
 80a3e78:	ea45 0103 	orr.w	r1, r5, r3
 80a3e7c:	bd30      	pop	{r4, r5, pc}
 80a3e7e:	f1c4 040c 	rsb	r4, r4, #12
 80a3e82:	f1c4 0220 	rsb	r2, r4, #32
 80a3e86:	fa20 f002 	lsr.w	r0, r0, r2
 80a3e8a:	fa01 f304 	lsl.w	r3, r1, r4
 80a3e8e:	ea40 0003 	orr.w	r0, r0, r3
 80a3e92:	4629      	mov	r1, r5
 80a3e94:	bd30      	pop	{r4, r5, pc}
 80a3e96:	fa21 f004 	lsr.w	r0, r1, r4
 80a3e9a:	4629      	mov	r1, r5
 80a3e9c:	bd30      	pop	{r4, r5, pc}
 80a3e9e:	f094 0f00 	teq	r4, #0
 80a3ea2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3ea6:	bf06      	itte	eq
 80a3ea8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3eac:	3401      	addeq	r4, #1
 80a3eae:	3d01      	subne	r5, #1
 80a3eb0:	e74e      	b.n	80a3d50 <__adddf3+0x8c>
 80a3eb2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3eb6:	bf18      	it	ne
 80a3eb8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3ebc:	d029      	beq.n	80a3f12 <__adddf3+0x24e>
 80a3ebe:	ea94 0f05 	teq	r4, r5
 80a3ec2:	bf08      	it	eq
 80a3ec4:	ea90 0f02 	teqeq	r0, r2
 80a3ec8:	d005      	beq.n	80a3ed6 <__adddf3+0x212>
 80a3eca:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3ece:	bf04      	itt	eq
 80a3ed0:	4619      	moveq	r1, r3
 80a3ed2:	4610      	moveq	r0, r2
 80a3ed4:	bd30      	pop	{r4, r5, pc}
 80a3ed6:	ea91 0f03 	teq	r1, r3
 80a3eda:	bf1e      	ittt	ne
 80a3edc:	2100      	movne	r1, #0
 80a3ede:	2000      	movne	r0, #0
 80a3ee0:	bd30      	popne	{r4, r5, pc}
 80a3ee2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3ee6:	d105      	bne.n	80a3ef4 <__adddf3+0x230>
 80a3ee8:	0040      	lsls	r0, r0, #1
 80a3eea:	4149      	adcs	r1, r1
 80a3eec:	bf28      	it	cs
 80a3eee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3ef2:	bd30      	pop	{r4, r5, pc}
 80a3ef4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3ef8:	bf3c      	itt	cc
 80a3efa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3efe:	bd30      	popcc	{r4, r5, pc}
 80a3f00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3f04:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3f08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3f0c:	f04f 0000 	mov.w	r0, #0
 80a3f10:	bd30      	pop	{r4, r5, pc}
 80a3f12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3f16:	bf1a      	itte	ne
 80a3f18:	4619      	movne	r1, r3
 80a3f1a:	4610      	movne	r0, r2
 80a3f1c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3f20:	bf1c      	itt	ne
 80a3f22:	460b      	movne	r3, r1
 80a3f24:	4602      	movne	r2, r0
 80a3f26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3f2a:	bf06      	itte	eq
 80a3f2c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3f30:	ea91 0f03 	teqeq	r1, r3
 80a3f34:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3f38:	bd30      	pop	{r4, r5, pc}
 80a3f3a:	bf00      	nop

080a3f3c <__aeabi_ui2d>:
 80a3f3c:	f090 0f00 	teq	r0, #0
 80a3f40:	bf04      	itt	eq
 80a3f42:	2100      	moveq	r1, #0
 80a3f44:	4770      	bxeq	lr
 80a3f46:	b530      	push	{r4, r5, lr}
 80a3f48:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3f4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3f50:	f04f 0500 	mov.w	r5, #0
 80a3f54:	f04f 0100 	mov.w	r1, #0
 80a3f58:	e750      	b.n	80a3dfc <__adddf3+0x138>
 80a3f5a:	bf00      	nop

080a3f5c <__aeabi_i2d>:
 80a3f5c:	f090 0f00 	teq	r0, #0
 80a3f60:	bf04      	itt	eq
 80a3f62:	2100      	moveq	r1, #0
 80a3f64:	4770      	bxeq	lr
 80a3f66:	b530      	push	{r4, r5, lr}
 80a3f68:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3f6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3f70:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3f74:	bf48      	it	mi
 80a3f76:	4240      	negmi	r0, r0
 80a3f78:	f04f 0100 	mov.w	r1, #0
 80a3f7c:	e73e      	b.n	80a3dfc <__adddf3+0x138>
 80a3f7e:	bf00      	nop

080a3f80 <__aeabi_f2d>:
 80a3f80:	0042      	lsls	r2, r0, #1
 80a3f82:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a3f86:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3f8a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3f8e:	bf1f      	itttt	ne
 80a3f90:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3f94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3f98:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3f9c:	4770      	bxne	lr
 80a3f9e:	f092 0f00 	teq	r2, #0
 80a3fa2:	bf14      	ite	ne
 80a3fa4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3fa8:	4770      	bxeq	lr
 80a3faa:	b530      	push	{r4, r5, lr}
 80a3fac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3fb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3fb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3fb8:	e720      	b.n	80a3dfc <__adddf3+0x138>
 80a3fba:	bf00      	nop

080a3fbc <__aeabi_ul2d>:
 80a3fbc:	ea50 0201 	orrs.w	r2, r0, r1
 80a3fc0:	bf08      	it	eq
 80a3fc2:	4770      	bxeq	lr
 80a3fc4:	b530      	push	{r4, r5, lr}
 80a3fc6:	f04f 0500 	mov.w	r5, #0
 80a3fca:	e00a      	b.n	80a3fe2 <__aeabi_l2d+0x16>

080a3fcc <__aeabi_l2d>:
 80a3fcc:	ea50 0201 	orrs.w	r2, r0, r1
 80a3fd0:	bf08      	it	eq
 80a3fd2:	4770      	bxeq	lr
 80a3fd4:	b530      	push	{r4, r5, lr}
 80a3fd6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3fda:	d502      	bpl.n	80a3fe2 <__aeabi_l2d+0x16>
 80a3fdc:	4240      	negs	r0, r0
 80a3fde:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3fe2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3fe6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3fea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3fee:	f43f aedc 	beq.w	80a3daa <__adddf3+0xe6>
 80a3ff2:	f04f 0203 	mov.w	r2, #3
 80a3ff6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3ffa:	bf18      	it	ne
 80a3ffc:	3203      	addne	r2, #3
 80a3ffe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4002:	bf18      	it	ne
 80a4004:	3203      	addne	r2, #3
 80a4006:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a400a:	f1c2 0320 	rsb	r3, r2, #32
 80a400e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a4012:	fa20 f002 	lsr.w	r0, r0, r2
 80a4016:	fa01 fe03 	lsl.w	lr, r1, r3
 80a401a:	ea40 000e 	orr.w	r0, r0, lr
 80a401e:	fa21 f102 	lsr.w	r1, r1, r2
 80a4022:	4414      	add	r4, r2
 80a4024:	e6c1      	b.n	80a3daa <__adddf3+0xe6>
 80a4026:	bf00      	nop

080a4028 <__aeabi_dmul>:
 80a4028:	b570      	push	{r4, r5, r6, lr}
 80a402a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a402e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4032:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4036:	bf1d      	ittte	ne
 80a4038:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a403c:	ea94 0f0c 	teqne	r4, ip
 80a4040:	ea95 0f0c 	teqne	r5, ip
 80a4044:	f000 f8de 	bleq	80a4204 <__aeabi_dmul+0x1dc>
 80a4048:	442c      	add	r4, r5
 80a404a:	ea81 0603 	eor.w	r6, r1, r3
 80a404e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a4052:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a4056:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a405a:	bf18      	it	ne
 80a405c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4060:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4064:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4068:	d038      	beq.n	80a40dc <__aeabi_dmul+0xb4>
 80a406a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a406e:	f04f 0500 	mov.w	r5, #0
 80a4072:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a4076:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a407a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a407e:	f04f 0600 	mov.w	r6, #0
 80a4082:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a4086:	f09c 0f00 	teq	ip, #0
 80a408a:	bf18      	it	ne
 80a408c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a4090:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4094:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a4098:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a409c:	d204      	bcs.n	80a40a8 <__aeabi_dmul+0x80>
 80a409e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a40a2:	416d      	adcs	r5, r5
 80a40a4:	eb46 0606 	adc.w	r6, r6, r6
 80a40a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a40ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a40b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a40b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a40b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a40bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a40c0:	bf88      	it	hi
 80a40c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a40c6:	d81e      	bhi.n	80a4106 <__aeabi_dmul+0xde>
 80a40c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a40cc:	bf08      	it	eq
 80a40ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a40d2:	f150 0000 	adcs.w	r0, r0, #0
 80a40d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a40da:	bd70      	pop	{r4, r5, r6, pc}
 80a40dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a40e0:	ea46 0101 	orr.w	r1, r6, r1
 80a40e4:	ea40 0002 	orr.w	r0, r0, r2
 80a40e8:	ea81 0103 	eor.w	r1, r1, r3
 80a40ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a40f0:	bfc2      	ittt	gt
 80a40f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a40f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a40fa:	bd70      	popgt	{r4, r5, r6, pc}
 80a40fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4100:	f04f 0e00 	mov.w	lr, #0
 80a4104:	3c01      	subs	r4, #1
 80a4106:	f300 80ab 	bgt.w	80a4260 <__aeabi_dmul+0x238>
 80a410a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a410e:	bfde      	ittt	le
 80a4110:	2000      	movle	r0, #0
 80a4112:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a4116:	bd70      	pople	{r4, r5, r6, pc}
 80a4118:	f1c4 0400 	rsb	r4, r4, #0
 80a411c:	3c20      	subs	r4, #32
 80a411e:	da35      	bge.n	80a418c <__aeabi_dmul+0x164>
 80a4120:	340c      	adds	r4, #12
 80a4122:	dc1b      	bgt.n	80a415c <__aeabi_dmul+0x134>
 80a4124:	f104 0414 	add.w	r4, r4, #20
 80a4128:	f1c4 0520 	rsb	r5, r4, #32
 80a412c:	fa00 f305 	lsl.w	r3, r0, r5
 80a4130:	fa20 f004 	lsr.w	r0, r0, r4
 80a4134:	fa01 f205 	lsl.w	r2, r1, r5
 80a4138:	ea40 0002 	orr.w	r0, r0, r2
 80a413c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a4140:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4144:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4148:	fa21 f604 	lsr.w	r6, r1, r4
 80a414c:	eb42 0106 	adc.w	r1, r2, r6
 80a4150:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4154:	bf08      	it	eq
 80a4156:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a415a:	bd70      	pop	{r4, r5, r6, pc}
 80a415c:	f1c4 040c 	rsb	r4, r4, #12
 80a4160:	f1c4 0520 	rsb	r5, r4, #32
 80a4164:	fa00 f304 	lsl.w	r3, r0, r4
 80a4168:	fa20 f005 	lsr.w	r0, r0, r5
 80a416c:	fa01 f204 	lsl.w	r2, r1, r4
 80a4170:	ea40 0002 	orr.w	r0, r0, r2
 80a4174:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4178:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a417c:	f141 0100 	adc.w	r1, r1, #0
 80a4180:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4184:	bf08      	it	eq
 80a4186:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a418a:	bd70      	pop	{r4, r5, r6, pc}
 80a418c:	f1c4 0520 	rsb	r5, r4, #32
 80a4190:	fa00 f205 	lsl.w	r2, r0, r5
 80a4194:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4198:	fa20 f304 	lsr.w	r3, r0, r4
 80a419c:	fa01 f205 	lsl.w	r2, r1, r5
 80a41a0:	ea43 0302 	orr.w	r3, r3, r2
 80a41a4:	fa21 f004 	lsr.w	r0, r1, r4
 80a41a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a41ac:	fa21 f204 	lsr.w	r2, r1, r4
 80a41b0:	ea20 0002 	bic.w	r0, r0, r2
 80a41b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a41b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a41bc:	bf08      	it	eq
 80a41be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a41c2:	bd70      	pop	{r4, r5, r6, pc}
 80a41c4:	f094 0f00 	teq	r4, #0
 80a41c8:	d10f      	bne.n	80a41ea <__aeabi_dmul+0x1c2>
 80a41ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a41ce:	0040      	lsls	r0, r0, #1
 80a41d0:	eb41 0101 	adc.w	r1, r1, r1
 80a41d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a41d8:	bf08      	it	eq
 80a41da:	3c01      	subeq	r4, #1
 80a41dc:	d0f7      	beq.n	80a41ce <__aeabi_dmul+0x1a6>
 80a41de:	ea41 0106 	orr.w	r1, r1, r6
 80a41e2:	f095 0f00 	teq	r5, #0
 80a41e6:	bf18      	it	ne
 80a41e8:	4770      	bxne	lr
 80a41ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a41ee:	0052      	lsls	r2, r2, #1
 80a41f0:	eb43 0303 	adc.w	r3, r3, r3
 80a41f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a41f8:	bf08      	it	eq
 80a41fa:	3d01      	subeq	r5, #1
 80a41fc:	d0f7      	beq.n	80a41ee <__aeabi_dmul+0x1c6>
 80a41fe:	ea43 0306 	orr.w	r3, r3, r6
 80a4202:	4770      	bx	lr
 80a4204:	ea94 0f0c 	teq	r4, ip
 80a4208:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a420c:	bf18      	it	ne
 80a420e:	ea95 0f0c 	teqne	r5, ip
 80a4212:	d00c      	beq.n	80a422e <__aeabi_dmul+0x206>
 80a4214:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4218:	bf18      	it	ne
 80a421a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a421e:	d1d1      	bne.n	80a41c4 <__aeabi_dmul+0x19c>
 80a4220:	ea81 0103 	eor.w	r1, r1, r3
 80a4224:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4228:	f04f 0000 	mov.w	r0, #0
 80a422c:	bd70      	pop	{r4, r5, r6, pc}
 80a422e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4232:	bf06      	itte	eq
 80a4234:	4610      	moveq	r0, r2
 80a4236:	4619      	moveq	r1, r3
 80a4238:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a423c:	d019      	beq.n	80a4272 <__aeabi_dmul+0x24a>
 80a423e:	ea94 0f0c 	teq	r4, ip
 80a4242:	d102      	bne.n	80a424a <__aeabi_dmul+0x222>
 80a4244:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a4248:	d113      	bne.n	80a4272 <__aeabi_dmul+0x24a>
 80a424a:	ea95 0f0c 	teq	r5, ip
 80a424e:	d105      	bne.n	80a425c <__aeabi_dmul+0x234>
 80a4250:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4254:	bf1c      	itt	ne
 80a4256:	4610      	movne	r0, r2
 80a4258:	4619      	movne	r1, r3
 80a425a:	d10a      	bne.n	80a4272 <__aeabi_dmul+0x24a>
 80a425c:	ea81 0103 	eor.w	r1, r1, r3
 80a4260:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4264:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4268:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a426c:	f04f 0000 	mov.w	r0, #0
 80a4270:	bd70      	pop	{r4, r5, r6, pc}
 80a4272:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4276:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a427a:	bd70      	pop	{r4, r5, r6, pc}

080a427c <__aeabi_ddiv>:
 80a427c:	b570      	push	{r4, r5, r6, lr}
 80a427e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4282:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4286:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a428a:	bf1d      	ittte	ne
 80a428c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4290:	ea94 0f0c 	teqne	r4, ip
 80a4294:	ea95 0f0c 	teqne	r5, ip
 80a4298:	f000 f8a7 	bleq	80a43ea <__aeabi_ddiv+0x16e>
 80a429c:	eba4 0405 	sub.w	r4, r4, r5
 80a42a0:	ea81 0e03 	eor.w	lr, r1, r3
 80a42a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a42a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a42ac:	f000 8088 	beq.w	80a43c0 <__aeabi_ddiv+0x144>
 80a42b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a42b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a42b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a42bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a42c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a42c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a42c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a42cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a42d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a42d4:	429d      	cmp	r5, r3
 80a42d6:	bf08      	it	eq
 80a42d8:	4296      	cmpeq	r6, r2
 80a42da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a42de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a42e2:	d202      	bcs.n	80a42ea <__aeabi_ddiv+0x6e>
 80a42e4:	085b      	lsrs	r3, r3, #1
 80a42e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a42ea:	1ab6      	subs	r6, r6, r2
 80a42ec:	eb65 0503 	sbc.w	r5, r5, r3
 80a42f0:	085b      	lsrs	r3, r3, #1
 80a42f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a42f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a42fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a42fe:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4302:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4306:	bf22      	ittt	cs
 80a4308:	1ab6      	subcs	r6, r6, r2
 80a430a:	4675      	movcs	r5, lr
 80a430c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4310:	085b      	lsrs	r3, r3, #1
 80a4312:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4316:	ebb6 0e02 	subs.w	lr, r6, r2
 80a431a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a431e:	bf22      	ittt	cs
 80a4320:	1ab6      	subcs	r6, r6, r2
 80a4322:	4675      	movcs	r5, lr
 80a4324:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4328:	085b      	lsrs	r3, r3, #1
 80a432a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a432e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4332:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4336:	bf22      	ittt	cs
 80a4338:	1ab6      	subcs	r6, r6, r2
 80a433a:	4675      	movcs	r5, lr
 80a433c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4340:	085b      	lsrs	r3, r3, #1
 80a4342:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4346:	ebb6 0e02 	subs.w	lr, r6, r2
 80a434a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a434e:	bf22      	ittt	cs
 80a4350:	1ab6      	subcs	r6, r6, r2
 80a4352:	4675      	movcs	r5, lr
 80a4354:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4358:	ea55 0e06 	orrs.w	lr, r5, r6
 80a435c:	d018      	beq.n	80a4390 <__aeabi_ddiv+0x114>
 80a435e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4362:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4366:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a436a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a436e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4372:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4376:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a437a:	d1c0      	bne.n	80a42fe <__aeabi_ddiv+0x82>
 80a437c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4380:	d10b      	bne.n	80a439a <__aeabi_ddiv+0x11e>
 80a4382:	ea41 0100 	orr.w	r1, r1, r0
 80a4386:	f04f 0000 	mov.w	r0, #0
 80a438a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a438e:	e7b6      	b.n	80a42fe <__aeabi_ddiv+0x82>
 80a4390:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4394:	bf04      	itt	eq
 80a4396:	4301      	orreq	r1, r0
 80a4398:	2000      	moveq	r0, #0
 80a439a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a439e:	bf88      	it	hi
 80a43a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a43a4:	f63f aeaf 	bhi.w	80a4106 <__aeabi_dmul+0xde>
 80a43a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a43ac:	bf04      	itt	eq
 80a43ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a43b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a43b6:	f150 0000 	adcs.w	r0, r0, #0
 80a43ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a43be:	bd70      	pop	{r4, r5, r6, pc}
 80a43c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a43c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a43c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a43cc:	bfc2      	ittt	gt
 80a43ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a43d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a43d6:	bd70      	popgt	{r4, r5, r6, pc}
 80a43d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a43dc:	f04f 0e00 	mov.w	lr, #0
 80a43e0:	3c01      	subs	r4, #1
 80a43e2:	e690      	b.n	80a4106 <__aeabi_dmul+0xde>
 80a43e4:	ea45 0e06 	orr.w	lr, r5, r6
 80a43e8:	e68d      	b.n	80a4106 <__aeabi_dmul+0xde>
 80a43ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a43ee:	ea94 0f0c 	teq	r4, ip
 80a43f2:	bf08      	it	eq
 80a43f4:	ea95 0f0c 	teqeq	r5, ip
 80a43f8:	f43f af3b 	beq.w	80a4272 <__aeabi_dmul+0x24a>
 80a43fc:	ea94 0f0c 	teq	r4, ip
 80a4400:	d10a      	bne.n	80a4418 <__aeabi_ddiv+0x19c>
 80a4402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4406:	f47f af34 	bne.w	80a4272 <__aeabi_dmul+0x24a>
 80a440a:	ea95 0f0c 	teq	r5, ip
 80a440e:	f47f af25 	bne.w	80a425c <__aeabi_dmul+0x234>
 80a4412:	4610      	mov	r0, r2
 80a4414:	4619      	mov	r1, r3
 80a4416:	e72c      	b.n	80a4272 <__aeabi_dmul+0x24a>
 80a4418:	ea95 0f0c 	teq	r5, ip
 80a441c:	d106      	bne.n	80a442c <__aeabi_ddiv+0x1b0>
 80a441e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4422:	f43f aefd 	beq.w	80a4220 <__aeabi_dmul+0x1f8>
 80a4426:	4610      	mov	r0, r2
 80a4428:	4619      	mov	r1, r3
 80a442a:	e722      	b.n	80a4272 <__aeabi_dmul+0x24a>
 80a442c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4430:	bf18      	it	ne
 80a4432:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4436:	f47f aec5 	bne.w	80a41c4 <__aeabi_dmul+0x19c>
 80a443a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a443e:	f47f af0d 	bne.w	80a425c <__aeabi_dmul+0x234>
 80a4442:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a4446:	f47f aeeb 	bne.w	80a4220 <__aeabi_dmul+0x1f8>
 80a444a:	e712      	b.n	80a4272 <__aeabi_dmul+0x24a>

080a444c <__gedf2>:
 80a444c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a4450:	e006      	b.n	80a4460 <__cmpdf2+0x4>
 80a4452:	bf00      	nop

080a4454 <__ledf2>:
 80a4454:	f04f 0c01 	mov.w	ip, #1
 80a4458:	e002      	b.n	80a4460 <__cmpdf2+0x4>
 80a445a:	bf00      	nop

080a445c <__cmpdf2>:
 80a445c:	f04f 0c01 	mov.w	ip, #1
 80a4460:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4464:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4468:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a446c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4470:	bf18      	it	ne
 80a4472:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a4476:	d01b      	beq.n	80a44b0 <__cmpdf2+0x54>
 80a4478:	b001      	add	sp, #4
 80a447a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a447e:	bf0c      	ite	eq
 80a4480:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4484:	ea91 0f03 	teqne	r1, r3
 80a4488:	bf02      	ittt	eq
 80a448a:	ea90 0f02 	teqeq	r0, r2
 80a448e:	2000      	moveq	r0, #0
 80a4490:	4770      	bxeq	lr
 80a4492:	f110 0f00 	cmn.w	r0, #0
 80a4496:	ea91 0f03 	teq	r1, r3
 80a449a:	bf58      	it	pl
 80a449c:	4299      	cmppl	r1, r3
 80a449e:	bf08      	it	eq
 80a44a0:	4290      	cmpeq	r0, r2
 80a44a2:	bf2c      	ite	cs
 80a44a4:	17d8      	asrcs	r0, r3, #31
 80a44a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a44aa:	f040 0001 	orr.w	r0, r0, #1
 80a44ae:	4770      	bx	lr
 80a44b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a44b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a44b8:	d102      	bne.n	80a44c0 <__cmpdf2+0x64>
 80a44ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a44be:	d107      	bne.n	80a44d0 <__cmpdf2+0x74>
 80a44c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a44c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a44c8:	d1d6      	bne.n	80a4478 <__cmpdf2+0x1c>
 80a44ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a44ce:	d0d3      	beq.n	80a4478 <__cmpdf2+0x1c>
 80a44d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a44d4:	4770      	bx	lr
 80a44d6:	bf00      	nop

080a44d8 <__aeabi_cdrcmple>:
 80a44d8:	4684      	mov	ip, r0
 80a44da:	4610      	mov	r0, r2
 80a44dc:	4662      	mov	r2, ip
 80a44de:	468c      	mov	ip, r1
 80a44e0:	4619      	mov	r1, r3
 80a44e2:	4663      	mov	r3, ip
 80a44e4:	e000      	b.n	80a44e8 <__aeabi_cdcmpeq>
 80a44e6:	bf00      	nop

080a44e8 <__aeabi_cdcmpeq>:
 80a44e8:	b501      	push	{r0, lr}
 80a44ea:	f7ff ffb7 	bl	80a445c <__cmpdf2>
 80a44ee:	2800      	cmp	r0, #0
 80a44f0:	bf48      	it	mi
 80a44f2:	f110 0f00 	cmnmi.w	r0, #0
 80a44f6:	bd01      	pop	{r0, pc}

080a44f8 <__aeabi_dcmpeq>:
 80a44f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a44fc:	f7ff fff4 	bl	80a44e8 <__aeabi_cdcmpeq>
 80a4500:	bf0c      	ite	eq
 80a4502:	2001      	moveq	r0, #1
 80a4504:	2000      	movne	r0, #0
 80a4506:	f85d fb08 	ldr.w	pc, [sp], #8
 80a450a:	bf00      	nop

080a450c <__aeabi_dcmplt>:
 80a450c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4510:	f7ff ffea 	bl	80a44e8 <__aeabi_cdcmpeq>
 80a4514:	bf34      	ite	cc
 80a4516:	2001      	movcc	r0, #1
 80a4518:	2000      	movcs	r0, #0
 80a451a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a451e:	bf00      	nop

080a4520 <__aeabi_dcmple>:
 80a4520:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4524:	f7ff ffe0 	bl	80a44e8 <__aeabi_cdcmpeq>
 80a4528:	bf94      	ite	ls
 80a452a:	2001      	movls	r0, #1
 80a452c:	2000      	movhi	r0, #0
 80a452e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4532:	bf00      	nop

080a4534 <__aeabi_dcmpge>:
 80a4534:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4538:	f7ff ffce 	bl	80a44d8 <__aeabi_cdrcmple>
 80a453c:	bf94      	ite	ls
 80a453e:	2001      	movls	r0, #1
 80a4540:	2000      	movhi	r0, #0
 80a4542:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4546:	bf00      	nop

080a4548 <__aeabi_dcmpgt>:
 80a4548:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a454c:	f7ff ffc4 	bl	80a44d8 <__aeabi_cdrcmple>
 80a4550:	bf34      	ite	cc
 80a4552:	2001      	movcc	r0, #1
 80a4554:	2000      	movcs	r0, #0
 80a4556:	f85d fb08 	ldr.w	pc, [sp], #8
 80a455a:	bf00      	nop

080a455c <__aeabi_dcmpun>:
 80a455c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4560:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4564:	d102      	bne.n	80a456c <__aeabi_dcmpun+0x10>
 80a4566:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a456a:	d10a      	bne.n	80a4582 <__aeabi_dcmpun+0x26>
 80a456c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4574:	d102      	bne.n	80a457c <__aeabi_dcmpun+0x20>
 80a4576:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a457a:	d102      	bne.n	80a4582 <__aeabi_dcmpun+0x26>
 80a457c:	f04f 0000 	mov.w	r0, #0
 80a4580:	4770      	bx	lr
 80a4582:	f04f 0001 	mov.w	r0, #1
 80a4586:	4770      	bx	lr

080a4588 <__aeabi_d2iz>:
 80a4588:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a458c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4590:	d215      	bcs.n	80a45be <__aeabi_d2iz+0x36>
 80a4592:	d511      	bpl.n	80a45b8 <__aeabi_d2iz+0x30>
 80a4594:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4598:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a459c:	d912      	bls.n	80a45c4 <__aeabi_d2iz+0x3c>
 80a459e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a45a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a45a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a45aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a45ae:	fa23 f002 	lsr.w	r0, r3, r2
 80a45b2:	bf18      	it	ne
 80a45b4:	4240      	negne	r0, r0
 80a45b6:	4770      	bx	lr
 80a45b8:	f04f 0000 	mov.w	r0, #0
 80a45bc:	4770      	bx	lr
 80a45be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a45c2:	d105      	bne.n	80a45d0 <__aeabi_d2iz+0x48>
 80a45c4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a45c8:	bf08      	it	eq
 80a45ca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a45ce:	4770      	bx	lr
 80a45d0:	f04f 0000 	mov.w	r0, #0
 80a45d4:	4770      	bx	lr
 80a45d6:	bf00      	nop

080a45d8 <__aeabi_d2uiz>:
 80a45d8:	004a      	lsls	r2, r1, #1
 80a45da:	d211      	bcs.n	80a4600 <__aeabi_d2uiz+0x28>
 80a45dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a45e0:	d211      	bcs.n	80a4606 <__aeabi_d2uiz+0x2e>
 80a45e2:	d50d      	bpl.n	80a4600 <__aeabi_d2uiz+0x28>
 80a45e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a45e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a45ec:	d40e      	bmi.n	80a460c <__aeabi_d2uiz+0x34>
 80a45ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a45f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a45f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a45fa:	fa23 f002 	lsr.w	r0, r3, r2
 80a45fe:	4770      	bx	lr
 80a4600:	f04f 0000 	mov.w	r0, #0
 80a4604:	4770      	bx	lr
 80a4606:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a460a:	d102      	bne.n	80a4612 <__aeabi_d2uiz+0x3a>
 80a460c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a4610:	4770      	bx	lr
 80a4612:	f04f 0000 	mov.w	r0, #0
 80a4616:	4770      	bx	lr

080a4618 <__aeabi_d2f>:
 80a4618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a461c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a4620:	bf24      	itt	cs
 80a4622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a4626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a462a:	d90d      	bls.n	80a4648 <__aeabi_d2f+0x30>
 80a462c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a4634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a4638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a463c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a4640:	bf08      	it	eq
 80a4642:	f020 0001 	biceq.w	r0, r0, #1
 80a4646:	4770      	bx	lr
 80a4648:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a464c:	d121      	bne.n	80a4692 <__aeabi_d2f+0x7a>
 80a464e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a4652:	bfbc      	itt	lt
 80a4654:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a4658:	4770      	bxlt	lr
 80a465a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a465e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a4662:	f1c2 0218 	rsb	r2, r2, #24
 80a4666:	f1c2 0c20 	rsb	ip, r2, #32
 80a466a:	fa10 f30c 	lsls.w	r3, r0, ip
 80a466e:	fa20 f002 	lsr.w	r0, r0, r2
 80a4672:	bf18      	it	ne
 80a4674:	f040 0001 	orrne.w	r0, r0, #1
 80a4678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a467c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a4680:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a4684:	ea40 000c 	orr.w	r0, r0, ip
 80a4688:	fa23 f302 	lsr.w	r3, r3, r2
 80a468c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a4690:	e7cc      	b.n	80a462c <__aeabi_d2f+0x14>
 80a4692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a4696:	d107      	bne.n	80a46a8 <__aeabi_d2f+0x90>
 80a4698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a469c:	bf1e      	ittt	ne
 80a469e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a46a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a46a6:	4770      	bxne	lr
 80a46a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a46ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a46b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a46b4:	4770      	bx	lr
 80a46b6:	bf00      	nop

080a46b8 <__aeabi_frsub>:
 80a46b8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a46bc:	e002      	b.n	80a46c4 <__addsf3>
 80a46be:	bf00      	nop

080a46c0 <__aeabi_fsub>:
 80a46c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a46c4 <__addsf3>:
 80a46c4:	0042      	lsls	r2, r0, #1
 80a46c6:	bf1f      	itttt	ne
 80a46c8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a46cc:	ea92 0f03 	teqne	r2, r3
 80a46d0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a46d4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a46d8:	d06a      	beq.n	80a47b0 <__addsf3+0xec>
 80a46da:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a46de:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a46e2:	bfc1      	itttt	gt
 80a46e4:	18d2      	addgt	r2, r2, r3
 80a46e6:	4041      	eorgt	r1, r0
 80a46e8:	4048      	eorgt	r0, r1
 80a46ea:	4041      	eorgt	r1, r0
 80a46ec:	bfb8      	it	lt
 80a46ee:	425b      	neglt	r3, r3
 80a46f0:	2b19      	cmp	r3, #25
 80a46f2:	bf88      	it	hi
 80a46f4:	4770      	bxhi	lr
 80a46f6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a46fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a46fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a4702:	bf18      	it	ne
 80a4704:	4240      	negne	r0, r0
 80a4706:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a470a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a470e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a4712:	bf18      	it	ne
 80a4714:	4249      	negne	r1, r1
 80a4716:	ea92 0f03 	teq	r2, r3
 80a471a:	d03f      	beq.n	80a479c <__addsf3+0xd8>
 80a471c:	f1a2 0201 	sub.w	r2, r2, #1
 80a4720:	fa41 fc03 	asr.w	ip, r1, r3
 80a4724:	eb10 000c 	adds.w	r0, r0, ip
 80a4728:	f1c3 0320 	rsb	r3, r3, #32
 80a472c:	fa01 f103 	lsl.w	r1, r1, r3
 80a4730:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4734:	d502      	bpl.n	80a473c <__addsf3+0x78>
 80a4736:	4249      	negs	r1, r1
 80a4738:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a473c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4740:	d313      	bcc.n	80a476a <__addsf3+0xa6>
 80a4742:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a4746:	d306      	bcc.n	80a4756 <__addsf3+0x92>
 80a4748:	0840      	lsrs	r0, r0, #1
 80a474a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a474e:	f102 0201 	add.w	r2, r2, #1
 80a4752:	2afe      	cmp	r2, #254	; 0xfe
 80a4754:	d251      	bcs.n	80a47fa <__addsf3+0x136>
 80a4756:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a475a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a475e:	bf08      	it	eq
 80a4760:	f020 0001 	biceq.w	r0, r0, #1
 80a4764:	ea40 0003 	orr.w	r0, r0, r3
 80a4768:	4770      	bx	lr
 80a476a:	0049      	lsls	r1, r1, #1
 80a476c:	eb40 0000 	adc.w	r0, r0, r0
 80a4770:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a4774:	f1a2 0201 	sub.w	r2, r2, #1
 80a4778:	d1ed      	bne.n	80a4756 <__addsf3+0x92>
 80a477a:	fab0 fc80 	clz	ip, r0
 80a477e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a4782:	ebb2 020c 	subs.w	r2, r2, ip
 80a4786:	fa00 f00c 	lsl.w	r0, r0, ip
 80a478a:	bfaa      	itet	ge
 80a478c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4790:	4252      	neglt	r2, r2
 80a4792:	4318      	orrge	r0, r3
 80a4794:	bfbc      	itt	lt
 80a4796:	40d0      	lsrlt	r0, r2
 80a4798:	4318      	orrlt	r0, r3
 80a479a:	4770      	bx	lr
 80a479c:	f092 0f00 	teq	r2, #0
 80a47a0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a47a4:	bf06      	itte	eq
 80a47a6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a47aa:	3201      	addeq	r2, #1
 80a47ac:	3b01      	subne	r3, #1
 80a47ae:	e7b5      	b.n	80a471c <__addsf3+0x58>
 80a47b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a47b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a47b8:	bf18      	it	ne
 80a47ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a47be:	d021      	beq.n	80a4804 <__addsf3+0x140>
 80a47c0:	ea92 0f03 	teq	r2, r3
 80a47c4:	d004      	beq.n	80a47d0 <__addsf3+0x10c>
 80a47c6:	f092 0f00 	teq	r2, #0
 80a47ca:	bf08      	it	eq
 80a47cc:	4608      	moveq	r0, r1
 80a47ce:	4770      	bx	lr
 80a47d0:	ea90 0f01 	teq	r0, r1
 80a47d4:	bf1c      	itt	ne
 80a47d6:	2000      	movne	r0, #0
 80a47d8:	4770      	bxne	lr
 80a47da:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a47de:	d104      	bne.n	80a47ea <__addsf3+0x126>
 80a47e0:	0040      	lsls	r0, r0, #1
 80a47e2:	bf28      	it	cs
 80a47e4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a47e8:	4770      	bx	lr
 80a47ea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a47ee:	bf3c      	itt	cc
 80a47f0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a47f4:	4770      	bxcc	lr
 80a47f6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a47fa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a47fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4802:	4770      	bx	lr
 80a4804:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4808:	bf16      	itet	ne
 80a480a:	4608      	movne	r0, r1
 80a480c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4810:	4601      	movne	r1, r0
 80a4812:	0242      	lsls	r2, r0, #9
 80a4814:	bf06      	itte	eq
 80a4816:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a481a:	ea90 0f01 	teqeq	r0, r1
 80a481e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a4822:	4770      	bx	lr

080a4824 <__aeabi_ui2f>:
 80a4824:	f04f 0300 	mov.w	r3, #0
 80a4828:	e004      	b.n	80a4834 <__aeabi_i2f+0x8>
 80a482a:	bf00      	nop

080a482c <__aeabi_i2f>:
 80a482c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a4830:	bf48      	it	mi
 80a4832:	4240      	negmi	r0, r0
 80a4834:	ea5f 0c00 	movs.w	ip, r0
 80a4838:	bf08      	it	eq
 80a483a:	4770      	bxeq	lr
 80a483c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a4840:	4601      	mov	r1, r0
 80a4842:	f04f 0000 	mov.w	r0, #0
 80a4846:	e01c      	b.n	80a4882 <__aeabi_l2f+0x2a>

080a4848 <__aeabi_ul2f>:
 80a4848:	ea50 0201 	orrs.w	r2, r0, r1
 80a484c:	bf08      	it	eq
 80a484e:	4770      	bxeq	lr
 80a4850:	f04f 0300 	mov.w	r3, #0
 80a4854:	e00a      	b.n	80a486c <__aeabi_l2f+0x14>
 80a4856:	bf00      	nop

080a4858 <__aeabi_l2f>:
 80a4858:	ea50 0201 	orrs.w	r2, r0, r1
 80a485c:	bf08      	it	eq
 80a485e:	4770      	bxeq	lr
 80a4860:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a4864:	d502      	bpl.n	80a486c <__aeabi_l2f+0x14>
 80a4866:	4240      	negs	r0, r0
 80a4868:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a486c:	ea5f 0c01 	movs.w	ip, r1
 80a4870:	bf02      	ittt	eq
 80a4872:	4684      	moveq	ip, r0
 80a4874:	4601      	moveq	r1, r0
 80a4876:	2000      	moveq	r0, #0
 80a4878:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a487c:	bf08      	it	eq
 80a487e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a4882:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a4886:	fabc f28c 	clz	r2, ip
 80a488a:	3a08      	subs	r2, #8
 80a488c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4890:	db10      	blt.n	80a48b4 <__aeabi_l2f+0x5c>
 80a4892:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4896:	4463      	add	r3, ip
 80a4898:	fa00 fc02 	lsl.w	ip, r0, r2
 80a489c:	f1c2 0220 	rsb	r2, r2, #32
 80a48a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a48a4:	fa20 f202 	lsr.w	r2, r0, r2
 80a48a8:	eb43 0002 	adc.w	r0, r3, r2
 80a48ac:	bf08      	it	eq
 80a48ae:	f020 0001 	biceq.w	r0, r0, #1
 80a48b2:	4770      	bx	lr
 80a48b4:	f102 0220 	add.w	r2, r2, #32
 80a48b8:	fa01 fc02 	lsl.w	ip, r1, r2
 80a48bc:	f1c2 0220 	rsb	r2, r2, #32
 80a48c0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a48c4:	fa21 f202 	lsr.w	r2, r1, r2
 80a48c8:	eb43 0002 	adc.w	r0, r3, r2
 80a48cc:	bf08      	it	eq
 80a48ce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a48d2:	4770      	bx	lr

080a48d4 <__aeabi_fmul>:
 80a48d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a48d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a48dc:	bf1e      	ittt	ne
 80a48de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a48e2:	ea92 0f0c 	teqne	r2, ip
 80a48e6:	ea93 0f0c 	teqne	r3, ip
 80a48ea:	d06f      	beq.n	80a49cc <__aeabi_fmul+0xf8>
 80a48ec:	441a      	add	r2, r3
 80a48ee:	ea80 0c01 	eor.w	ip, r0, r1
 80a48f2:	0240      	lsls	r0, r0, #9
 80a48f4:	bf18      	it	ne
 80a48f6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a48fa:	d01e      	beq.n	80a493a <__aeabi_fmul+0x66>
 80a48fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4900:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4904:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4908:	fba0 3101 	umull	r3, r1, r0, r1
 80a490c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4910:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a4914:	bf3e      	ittt	cc
 80a4916:	0049      	lslcc	r1, r1, #1
 80a4918:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a491c:	005b      	lslcc	r3, r3, #1
 80a491e:	ea40 0001 	orr.w	r0, r0, r1
 80a4922:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a4926:	2afd      	cmp	r2, #253	; 0xfd
 80a4928:	d81d      	bhi.n	80a4966 <__aeabi_fmul+0x92>
 80a492a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a492e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4932:	bf08      	it	eq
 80a4934:	f020 0001 	biceq.w	r0, r0, #1
 80a4938:	4770      	bx	lr
 80a493a:	f090 0f00 	teq	r0, #0
 80a493e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4942:	bf08      	it	eq
 80a4944:	0249      	lsleq	r1, r1, #9
 80a4946:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a494a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a494e:	3a7f      	subs	r2, #127	; 0x7f
 80a4950:	bfc2      	ittt	gt
 80a4952:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4956:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a495a:	4770      	bxgt	lr
 80a495c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4960:	f04f 0300 	mov.w	r3, #0
 80a4964:	3a01      	subs	r2, #1
 80a4966:	dc5d      	bgt.n	80a4a24 <__aeabi_fmul+0x150>
 80a4968:	f112 0f19 	cmn.w	r2, #25
 80a496c:	bfdc      	itt	le
 80a496e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a4972:	4770      	bxle	lr
 80a4974:	f1c2 0200 	rsb	r2, r2, #0
 80a4978:	0041      	lsls	r1, r0, #1
 80a497a:	fa21 f102 	lsr.w	r1, r1, r2
 80a497e:	f1c2 0220 	rsb	r2, r2, #32
 80a4982:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4986:	ea5f 0031 	movs.w	r0, r1, rrx
 80a498a:	f140 0000 	adc.w	r0, r0, #0
 80a498e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a4992:	bf08      	it	eq
 80a4994:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4998:	4770      	bx	lr
 80a499a:	f092 0f00 	teq	r2, #0
 80a499e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a49a2:	bf02      	ittt	eq
 80a49a4:	0040      	lsleq	r0, r0, #1
 80a49a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a49aa:	3a01      	subeq	r2, #1
 80a49ac:	d0f9      	beq.n	80a49a2 <__aeabi_fmul+0xce>
 80a49ae:	ea40 000c 	orr.w	r0, r0, ip
 80a49b2:	f093 0f00 	teq	r3, #0
 80a49b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a49ba:	bf02      	ittt	eq
 80a49bc:	0049      	lsleq	r1, r1, #1
 80a49be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a49c2:	3b01      	subeq	r3, #1
 80a49c4:	d0f9      	beq.n	80a49ba <__aeabi_fmul+0xe6>
 80a49c6:	ea41 010c 	orr.w	r1, r1, ip
 80a49ca:	e78f      	b.n	80a48ec <__aeabi_fmul+0x18>
 80a49cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a49d0:	ea92 0f0c 	teq	r2, ip
 80a49d4:	bf18      	it	ne
 80a49d6:	ea93 0f0c 	teqne	r3, ip
 80a49da:	d00a      	beq.n	80a49f2 <__aeabi_fmul+0x11e>
 80a49dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a49e0:	bf18      	it	ne
 80a49e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a49e6:	d1d8      	bne.n	80a499a <__aeabi_fmul+0xc6>
 80a49e8:	ea80 0001 	eor.w	r0, r0, r1
 80a49ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a49f0:	4770      	bx	lr
 80a49f2:	f090 0f00 	teq	r0, #0
 80a49f6:	bf17      	itett	ne
 80a49f8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a49fc:	4608      	moveq	r0, r1
 80a49fe:	f091 0f00 	teqne	r1, #0
 80a4a02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a4a06:	d014      	beq.n	80a4a32 <__aeabi_fmul+0x15e>
 80a4a08:	ea92 0f0c 	teq	r2, ip
 80a4a0c:	d101      	bne.n	80a4a12 <__aeabi_fmul+0x13e>
 80a4a0e:	0242      	lsls	r2, r0, #9
 80a4a10:	d10f      	bne.n	80a4a32 <__aeabi_fmul+0x15e>
 80a4a12:	ea93 0f0c 	teq	r3, ip
 80a4a16:	d103      	bne.n	80a4a20 <__aeabi_fmul+0x14c>
 80a4a18:	024b      	lsls	r3, r1, #9
 80a4a1a:	bf18      	it	ne
 80a4a1c:	4608      	movne	r0, r1
 80a4a1e:	d108      	bne.n	80a4a32 <__aeabi_fmul+0x15e>
 80a4a20:	ea80 0001 	eor.w	r0, r0, r1
 80a4a24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4a28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4a2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4a30:	4770      	bx	lr
 80a4a32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4a36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4a3a:	4770      	bx	lr

080a4a3c <__aeabi_fdiv>:
 80a4a3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4a40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4a44:	bf1e      	ittt	ne
 80a4a46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4a4a:	ea92 0f0c 	teqne	r2, ip
 80a4a4e:	ea93 0f0c 	teqne	r3, ip
 80a4a52:	d069      	beq.n	80a4b28 <__aeabi_fdiv+0xec>
 80a4a54:	eba2 0203 	sub.w	r2, r2, r3
 80a4a58:	ea80 0c01 	eor.w	ip, r0, r1
 80a4a5c:	0249      	lsls	r1, r1, #9
 80a4a5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a4a62:	d037      	beq.n	80a4ad4 <__aeabi_fdiv+0x98>
 80a4a64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4a68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4a6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4a70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4a74:	428b      	cmp	r3, r1
 80a4a76:	bf38      	it	cc
 80a4a78:	005b      	lslcc	r3, r3, #1
 80a4a7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4a7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a4a82:	428b      	cmp	r3, r1
 80a4a84:	bf24      	itt	cs
 80a4a86:	1a5b      	subcs	r3, r3, r1
 80a4a88:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4a8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4a90:	bf24      	itt	cs
 80a4a92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a4a96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4a9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4a9e:	bf24      	itt	cs
 80a4aa0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a4aa4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4aa8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4aac:	bf24      	itt	cs
 80a4aae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a4ab2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4ab6:	011b      	lsls	r3, r3, #4
 80a4ab8:	bf18      	it	ne
 80a4aba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4abe:	d1e0      	bne.n	80a4a82 <__aeabi_fdiv+0x46>
 80a4ac0:	2afd      	cmp	r2, #253	; 0xfd
 80a4ac2:	f63f af50 	bhi.w	80a4966 <__aeabi_fmul+0x92>
 80a4ac6:	428b      	cmp	r3, r1
 80a4ac8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4acc:	bf08      	it	eq
 80a4ace:	f020 0001 	biceq.w	r0, r0, #1
 80a4ad2:	4770      	bx	lr
 80a4ad4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4ad8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4adc:	327f      	adds	r2, #127	; 0x7f
 80a4ade:	bfc2      	ittt	gt
 80a4ae0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4ae4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4ae8:	4770      	bxgt	lr
 80a4aea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4aee:	f04f 0300 	mov.w	r3, #0
 80a4af2:	3a01      	subs	r2, #1
 80a4af4:	e737      	b.n	80a4966 <__aeabi_fmul+0x92>
 80a4af6:	f092 0f00 	teq	r2, #0
 80a4afa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4afe:	bf02      	ittt	eq
 80a4b00:	0040      	lsleq	r0, r0, #1
 80a4b02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4b06:	3a01      	subeq	r2, #1
 80a4b08:	d0f9      	beq.n	80a4afe <__aeabi_fdiv+0xc2>
 80a4b0a:	ea40 000c 	orr.w	r0, r0, ip
 80a4b0e:	f093 0f00 	teq	r3, #0
 80a4b12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4b16:	bf02      	ittt	eq
 80a4b18:	0049      	lsleq	r1, r1, #1
 80a4b1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4b1e:	3b01      	subeq	r3, #1
 80a4b20:	d0f9      	beq.n	80a4b16 <__aeabi_fdiv+0xda>
 80a4b22:	ea41 010c 	orr.w	r1, r1, ip
 80a4b26:	e795      	b.n	80a4a54 <__aeabi_fdiv+0x18>
 80a4b28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4b2c:	ea92 0f0c 	teq	r2, ip
 80a4b30:	d108      	bne.n	80a4b44 <__aeabi_fdiv+0x108>
 80a4b32:	0242      	lsls	r2, r0, #9
 80a4b34:	f47f af7d 	bne.w	80a4a32 <__aeabi_fmul+0x15e>
 80a4b38:	ea93 0f0c 	teq	r3, ip
 80a4b3c:	f47f af70 	bne.w	80a4a20 <__aeabi_fmul+0x14c>
 80a4b40:	4608      	mov	r0, r1
 80a4b42:	e776      	b.n	80a4a32 <__aeabi_fmul+0x15e>
 80a4b44:	ea93 0f0c 	teq	r3, ip
 80a4b48:	d104      	bne.n	80a4b54 <__aeabi_fdiv+0x118>
 80a4b4a:	024b      	lsls	r3, r1, #9
 80a4b4c:	f43f af4c 	beq.w	80a49e8 <__aeabi_fmul+0x114>
 80a4b50:	4608      	mov	r0, r1
 80a4b52:	e76e      	b.n	80a4a32 <__aeabi_fmul+0x15e>
 80a4b54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4b58:	bf18      	it	ne
 80a4b5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4b5e:	d1ca      	bne.n	80a4af6 <__aeabi_fdiv+0xba>
 80a4b60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a4b64:	f47f af5c 	bne.w	80a4a20 <__aeabi_fmul+0x14c>
 80a4b68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4b6c:	f47f af3c 	bne.w	80a49e8 <__aeabi_fmul+0x114>
 80a4b70:	e75f      	b.n	80a4a32 <__aeabi_fmul+0x15e>
 80a4b72:	bf00      	nop

080a4b74 <__aeabi_uldivmod>:
 80a4b74:	b953      	cbnz	r3, 80a4b8c <__aeabi_uldivmod+0x18>
 80a4b76:	b94a      	cbnz	r2, 80a4b8c <__aeabi_uldivmod+0x18>
 80a4b78:	2900      	cmp	r1, #0
 80a4b7a:	bf08      	it	eq
 80a4b7c:	2800      	cmpeq	r0, #0
 80a4b7e:	bf1c      	itt	ne
 80a4b80:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80a4b84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80a4b88:	f000 b9a6 	b.w	80a4ed8 <__aeabi_idiv0>
 80a4b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 80a4b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a4b94:	f000 f82a 	bl	80a4bec <__udivmoddi4>
 80a4b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a4b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4ba0:	b004      	add	sp, #16
 80a4ba2:	4770      	bx	lr

080a4ba4 <__aeabi_d2ulz>:
 80a4ba4:	b5d0      	push	{r4, r6, r7, lr}
 80a4ba6:	2200      	movs	r2, #0
 80a4ba8:	4b0e      	ldr	r3, [pc, #56]	; (80a4be4 <__aeabi_d2ulz+0x40>)
 80a4baa:	4606      	mov	r6, r0
 80a4bac:	460f      	mov	r7, r1
 80a4bae:	f7ff fa3b 	bl	80a4028 <__aeabi_dmul>
 80a4bb2:	f7ff fd11 	bl	80a45d8 <__aeabi_d2uiz>
 80a4bb6:	4604      	mov	r4, r0
 80a4bb8:	f7ff f9c0 	bl	80a3f3c <__aeabi_ui2d>
 80a4bbc:	2200      	movs	r2, #0
 80a4bbe:	4b0a      	ldr	r3, [pc, #40]	; (80a4be8 <__aeabi_d2ulz+0x44>)
 80a4bc0:	f7ff fa32 	bl	80a4028 <__aeabi_dmul>
 80a4bc4:	4602      	mov	r2, r0
 80a4bc6:	460b      	mov	r3, r1
 80a4bc8:	4630      	mov	r0, r6
 80a4bca:	4639      	mov	r1, r7
 80a4bcc:	f7ff f878 	bl	80a3cc0 <__aeabi_dsub>
 80a4bd0:	f7ff fd02 	bl	80a45d8 <__aeabi_d2uiz>
 80a4bd4:	4623      	mov	r3, r4
 80a4bd6:	2200      	movs	r2, #0
 80a4bd8:	ea42 0200 	orr.w	r2, r2, r0
 80a4bdc:	4610      	mov	r0, r2
 80a4bde:	4619      	mov	r1, r3
 80a4be0:	bdd0      	pop	{r4, r6, r7, pc}
 80a4be2:	bf00      	nop
 80a4be4:	3df00000 	.word	0x3df00000
 80a4be8:	41f00000 	.word	0x41f00000

080a4bec <__udivmoddi4>:
 80a4bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4bf0:	468c      	mov	ip, r1
 80a4bf2:	460c      	mov	r4, r1
 80a4bf4:	4605      	mov	r5, r0
 80a4bf6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a4bf8:	2b00      	cmp	r3, #0
 80a4bfa:	d14f      	bne.n	80a4c9c <__udivmoddi4+0xb0>
 80a4bfc:	428a      	cmp	r2, r1
 80a4bfe:	4617      	mov	r7, r2
 80a4c00:	d96b      	bls.n	80a4cda <__udivmoddi4+0xee>
 80a4c02:	fab2 fe82 	clz	lr, r2
 80a4c06:	f1be 0f00 	cmp.w	lr, #0
 80a4c0a:	d00b      	beq.n	80a4c24 <__udivmoddi4+0x38>
 80a4c0c:	f1ce 0520 	rsb	r5, lr, #32
 80a4c10:	fa20 f505 	lsr.w	r5, r0, r5
 80a4c14:	fa01 f30e 	lsl.w	r3, r1, lr
 80a4c18:	ea45 0c03 	orr.w	ip, r5, r3
 80a4c1c:	fa02 f70e 	lsl.w	r7, r2, lr
 80a4c20:	fa00 f50e 	lsl.w	r5, r0, lr
 80a4c24:	0c39      	lsrs	r1, r7, #16
 80a4c26:	fbbc f0f1 	udiv	r0, ip, r1
 80a4c2a:	b2ba      	uxth	r2, r7
 80a4c2c:	fb01 c310 	mls	r3, r1, r0, ip
 80a4c30:	fb00 f802 	mul.w	r8, r0, r2
 80a4c34:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a4c38:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a4c3c:	45a0      	cmp	r8, r4
 80a4c3e:	d909      	bls.n	80a4c54 <__udivmoddi4+0x68>
 80a4c40:	19e4      	adds	r4, r4, r7
 80a4c42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a4c46:	f080 8128 	bcs.w	80a4e9a <__udivmoddi4+0x2ae>
 80a4c4a:	45a0      	cmp	r8, r4
 80a4c4c:	f240 8125 	bls.w	80a4e9a <__udivmoddi4+0x2ae>
 80a4c50:	3802      	subs	r0, #2
 80a4c52:	443c      	add	r4, r7
 80a4c54:	ebc8 0404 	rsb	r4, r8, r4
 80a4c58:	fbb4 f3f1 	udiv	r3, r4, r1
 80a4c5c:	fb01 4c13 	mls	ip, r1, r3, r4
 80a4c60:	fb03 f202 	mul.w	r2, r3, r2
 80a4c64:	b2ac      	uxth	r4, r5
 80a4c66:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a4c6a:	428a      	cmp	r2, r1
 80a4c6c:	d909      	bls.n	80a4c82 <__udivmoddi4+0x96>
 80a4c6e:	19c9      	adds	r1, r1, r7
 80a4c70:	f103 34ff 	add.w	r4, r3, #4294967295	; 0xffffffff
 80a4c74:	f080 810f 	bcs.w	80a4e96 <__udivmoddi4+0x2aa>
 80a4c78:	428a      	cmp	r2, r1
 80a4c7a:	f240 810c 	bls.w	80a4e96 <__udivmoddi4+0x2aa>
 80a4c7e:	3b02      	subs	r3, #2
 80a4c80:	4439      	add	r1, r7
 80a4c82:	1a8a      	subs	r2, r1, r2
 80a4c84:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a4c88:	2100      	movs	r1, #0
 80a4c8a:	2e00      	cmp	r6, #0
 80a4c8c:	d063      	beq.n	80a4d56 <__udivmoddi4+0x16a>
 80a4c8e:	fa22 f20e 	lsr.w	r2, r2, lr
 80a4c92:	2300      	movs	r3, #0
 80a4c94:	e886 000c 	stmia.w	r6, {r2, r3}
 80a4c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4c9c:	428b      	cmp	r3, r1
 80a4c9e:	d907      	bls.n	80a4cb0 <__udivmoddi4+0xc4>
 80a4ca0:	2e00      	cmp	r6, #0
 80a4ca2:	d056      	beq.n	80a4d52 <__udivmoddi4+0x166>
 80a4ca4:	2100      	movs	r1, #0
 80a4ca6:	e886 0011 	stmia.w	r6, {r0, r4}
 80a4caa:	4608      	mov	r0, r1
 80a4cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4cb0:	fab3 f183 	clz	r1, r3
 80a4cb4:	2900      	cmp	r1, #0
 80a4cb6:	f040 8093 	bne.w	80a4de0 <__udivmoddi4+0x1f4>
 80a4cba:	42a3      	cmp	r3, r4
 80a4cbc:	d302      	bcc.n	80a4cc4 <__udivmoddi4+0xd8>
 80a4cbe:	4282      	cmp	r2, r0
 80a4cc0:	f200 80fe 	bhi.w	80a4ec0 <__udivmoddi4+0x2d4>
 80a4cc4:	1a85      	subs	r5, r0, r2
 80a4cc6:	eb64 0303 	sbc.w	r3, r4, r3
 80a4cca:	469c      	mov	ip, r3
 80a4ccc:	2001      	movs	r0, #1
 80a4cce:	2e00      	cmp	r6, #0
 80a4cd0:	d041      	beq.n	80a4d56 <__udivmoddi4+0x16a>
 80a4cd2:	e886 1020 	stmia.w	r6, {r5, ip}
 80a4cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4cda:	b912      	cbnz	r2, 80a4ce2 <__udivmoddi4+0xf6>
 80a4cdc:	2701      	movs	r7, #1
 80a4cde:	fbb7 f7f2 	udiv	r7, r7, r2
 80a4ce2:	fab7 fe87 	clz	lr, r7
 80a4ce6:	f1be 0f00 	cmp.w	lr, #0
 80a4cea:	d136      	bne.n	80a4d5a <__udivmoddi4+0x16e>
 80a4cec:	1be4      	subs	r4, r4, r7
 80a4cee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a4cf2:	fa1f f987 	uxth.w	r9, r7
 80a4cf6:	2101      	movs	r1, #1
 80a4cf8:	fbb4 f3f8 	udiv	r3, r4, r8
 80a4cfc:	fb08 4413 	mls	r4, r8, r3, r4
 80a4d00:	fb09 f203 	mul.w	r2, r9, r3
 80a4d04:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a4d08:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a4d0c:	42a2      	cmp	r2, r4
 80a4d0e:	d907      	bls.n	80a4d20 <__udivmoddi4+0x134>
 80a4d10:	19e4      	adds	r4, r4, r7
 80a4d12:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80a4d16:	d202      	bcs.n	80a4d1e <__udivmoddi4+0x132>
 80a4d18:	42a2      	cmp	r2, r4
 80a4d1a:	f200 80d3 	bhi.w	80a4ec4 <__udivmoddi4+0x2d8>
 80a4d1e:	4603      	mov	r3, r0
 80a4d20:	1aa4      	subs	r4, r4, r2
 80a4d22:	fbb4 f0f8 	udiv	r0, r4, r8
 80a4d26:	fb08 4810 	mls	r8, r8, r0, r4
 80a4d2a:	fb09 f900 	mul.w	r9, r9, r0
 80a4d2e:	b2ac      	uxth	r4, r5
 80a4d30:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a4d34:	4591      	cmp	r9, r2
 80a4d36:	d907      	bls.n	80a4d48 <__udivmoddi4+0x15c>
 80a4d38:	19d2      	adds	r2, r2, r7
 80a4d3a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80a4d3e:	d202      	bcs.n	80a4d46 <__udivmoddi4+0x15a>
 80a4d40:	4591      	cmp	r9, r2
 80a4d42:	f200 80ba 	bhi.w	80a4eba <__udivmoddi4+0x2ce>
 80a4d46:	4620      	mov	r0, r4
 80a4d48:	ebc9 0202 	rsb	r2, r9, r2
 80a4d4c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a4d50:	e79b      	b.n	80a4c8a <__udivmoddi4+0x9e>
 80a4d52:	4631      	mov	r1, r6
 80a4d54:	4630      	mov	r0, r6
 80a4d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4d5a:	fa07 f70e 	lsl.w	r7, r7, lr
 80a4d5e:	f1ce 0c20 	rsb	ip, lr, #32
 80a4d62:	fa24 f30c 	lsr.w	r3, r4, ip
 80a4d66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a4d6a:	fbb3 faf8 	udiv	sl, r3, r8
 80a4d6e:	fa1f f987 	uxth.w	r9, r7
 80a4d72:	fb08 351a 	mls	r5, r8, sl, r3
 80a4d76:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a4d7a:	fa04 f40e 	lsl.w	r4, r4, lr
 80a4d7e:	fb0a fb09 	mul.w	fp, sl, r9
 80a4d82:	ea4c 0c04 	orr.w	ip, ip, r4
 80a4d86:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a4d8a:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a4d8e:	459b      	cmp	fp, r3
 80a4d90:	fa00 f50e 	lsl.w	r5, r0, lr
 80a4d94:	d90a      	bls.n	80a4dac <__udivmoddi4+0x1c0>
 80a4d96:	19db      	adds	r3, r3, r7
 80a4d98:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a4d9c:	f080 808b 	bcs.w	80a4eb6 <__udivmoddi4+0x2ca>
 80a4da0:	459b      	cmp	fp, r3
 80a4da2:	f240 8088 	bls.w	80a4eb6 <__udivmoddi4+0x2ca>
 80a4da6:	f1aa 0a02 	sub.w	sl, sl, #2
 80a4daa:	443b      	add	r3, r7
 80a4dac:	ebcb 0303 	rsb	r3, fp, r3
 80a4db0:	fbb3 f0f8 	udiv	r0, r3, r8
 80a4db4:	fb08 3310 	mls	r3, r8, r0, r3
 80a4db8:	fb00 f409 	mul.w	r4, r0, r9
 80a4dbc:	fa1f fc8c 	uxth.w	ip, ip
 80a4dc0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a4dc4:	429c      	cmp	r4, r3
 80a4dc6:	d907      	bls.n	80a4dd8 <__udivmoddi4+0x1ec>
 80a4dc8:	19db      	adds	r3, r3, r7
 80a4dca:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a4dce:	d26e      	bcs.n	80a4eae <__udivmoddi4+0x2c2>
 80a4dd0:	429c      	cmp	r4, r3
 80a4dd2:	d96c      	bls.n	80a4eae <__udivmoddi4+0x2c2>
 80a4dd4:	3802      	subs	r0, #2
 80a4dd6:	443b      	add	r3, r7
 80a4dd8:	1b1c      	subs	r4, r3, r4
 80a4dda:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a4dde:	e78b      	b.n	80a4cf8 <__udivmoddi4+0x10c>
 80a4de0:	f1c1 0e20 	rsb	lr, r1, #32
 80a4de4:	408b      	lsls	r3, r1
 80a4de6:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a4dea:	ea4c 0c03 	orr.w	ip, ip, r3
 80a4dee:	fa24 f70e 	lsr.w	r7, r4, lr
 80a4df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a4df6:	fbb7 faf9 	udiv	sl, r7, r9
 80a4dfa:	fa1f f38c 	uxth.w	r3, ip
 80a4dfe:	fb09 771a 	mls	r7, r9, sl, r7
 80a4e02:	fa20 f80e 	lsr.w	r8, r0, lr
 80a4e06:	408c      	lsls	r4, r1
 80a4e08:	fb0a f503 	mul.w	r5, sl, r3
 80a4e0c:	ea48 0404 	orr.w	r4, r8, r4
 80a4e10:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a4e14:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a4e18:	42bd      	cmp	r5, r7
 80a4e1a:	fa02 f201 	lsl.w	r2, r2, r1
 80a4e1e:	fa00 fb01 	lsl.w	fp, r0, r1
 80a4e22:	d909      	bls.n	80a4e38 <__udivmoddi4+0x24c>
 80a4e24:	eb17 070c 	adds.w	r7, r7, ip
 80a4e28:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 80a4e2c:	d241      	bcs.n	80a4eb2 <__udivmoddi4+0x2c6>
 80a4e2e:	42bd      	cmp	r5, r7
 80a4e30:	d93f      	bls.n	80a4eb2 <__udivmoddi4+0x2c6>
 80a4e32:	f1aa 0a02 	sub.w	sl, sl, #2
 80a4e36:	4467      	add	r7, ip
 80a4e38:	1b7f      	subs	r7, r7, r5
 80a4e3a:	fbb7 f5f9 	udiv	r5, r7, r9
 80a4e3e:	fb09 7715 	mls	r7, r9, r5, r7
 80a4e42:	fb05 f303 	mul.w	r3, r5, r3
 80a4e46:	b2a4      	uxth	r4, r4
 80a4e48:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a4e4c:	42bb      	cmp	r3, r7
 80a4e4e:	d908      	bls.n	80a4e62 <__udivmoddi4+0x276>
 80a4e50:	eb17 070c 	adds.w	r7, r7, ip
 80a4e54:	f105 30ff 	add.w	r0, r5, #4294967295	; 0xffffffff
 80a4e58:	d227      	bcs.n	80a4eaa <__udivmoddi4+0x2be>
 80a4e5a:	42bb      	cmp	r3, r7
 80a4e5c:	d925      	bls.n	80a4eaa <__udivmoddi4+0x2be>
 80a4e5e:	3d02      	subs	r5, #2
 80a4e60:	4467      	add	r7, ip
 80a4e62:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a4e66:	fba0 8902 	umull	r8, r9, r0, r2
 80a4e6a:	1aff      	subs	r7, r7, r3
 80a4e6c:	454f      	cmp	r7, r9
 80a4e6e:	4645      	mov	r5, r8
 80a4e70:	464c      	mov	r4, r9
 80a4e72:	d314      	bcc.n	80a4e9e <__udivmoddi4+0x2b2>
 80a4e74:	d029      	beq.n	80a4eca <__udivmoddi4+0x2de>
 80a4e76:	b366      	cbz	r6, 80a4ed2 <__udivmoddi4+0x2e6>
 80a4e78:	ebbb 0305 	subs.w	r3, fp, r5
 80a4e7c:	eb67 0704 	sbc.w	r7, r7, r4
 80a4e80:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a4e84:	40cb      	lsrs	r3, r1
 80a4e86:	40cf      	lsrs	r7, r1
 80a4e88:	ea4e 0303 	orr.w	r3, lr, r3
 80a4e8c:	e886 0088 	stmia.w	r6, {r3, r7}
 80a4e90:	2100      	movs	r1, #0
 80a4e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4e96:	4623      	mov	r3, r4
 80a4e98:	e6f3      	b.n	80a4c82 <__udivmoddi4+0x96>
 80a4e9a:	4618      	mov	r0, r3
 80a4e9c:	e6da      	b.n	80a4c54 <__udivmoddi4+0x68>
 80a4e9e:	ebb8 0502 	subs.w	r5, r8, r2
 80a4ea2:	eb69 040c 	sbc.w	r4, r9, ip
 80a4ea6:	3801      	subs	r0, #1
 80a4ea8:	e7e5      	b.n	80a4e76 <__udivmoddi4+0x28a>
 80a4eaa:	4605      	mov	r5, r0
 80a4eac:	e7d9      	b.n	80a4e62 <__udivmoddi4+0x276>
 80a4eae:	4610      	mov	r0, r2
 80a4eb0:	e792      	b.n	80a4dd8 <__udivmoddi4+0x1ec>
 80a4eb2:	4682      	mov	sl, r0
 80a4eb4:	e7c0      	b.n	80a4e38 <__udivmoddi4+0x24c>
 80a4eb6:	4692      	mov	sl, r2
 80a4eb8:	e778      	b.n	80a4dac <__udivmoddi4+0x1c0>
 80a4eba:	3802      	subs	r0, #2
 80a4ebc:	443a      	add	r2, r7
 80a4ebe:	e743      	b.n	80a4d48 <__udivmoddi4+0x15c>
 80a4ec0:	4608      	mov	r0, r1
 80a4ec2:	e704      	b.n	80a4cce <__udivmoddi4+0xe2>
 80a4ec4:	3b02      	subs	r3, #2
 80a4ec6:	443c      	add	r4, r7
 80a4ec8:	e72a      	b.n	80a4d20 <__udivmoddi4+0x134>
 80a4eca:	45c3      	cmp	fp, r8
 80a4ecc:	d3e7      	bcc.n	80a4e9e <__udivmoddi4+0x2b2>
 80a4ece:	463c      	mov	r4, r7
 80a4ed0:	e7d1      	b.n	80a4e76 <__udivmoddi4+0x28a>
 80a4ed2:	4631      	mov	r1, r6
 80a4ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a4ed8 <__aeabi_idiv0>:
 80a4ed8:	4770      	bx	lr
 80a4eda:	bf00      	nop

080a4edc <atoi>:
 80a4edc:	220a      	movs	r2, #10
 80a4ede:	2100      	movs	r1, #0
 80a4ee0:	f000 b920 	b.w	80a5124 <strtol>

080a4ee4 <__cxa_atexit>:
 80a4ee4:	b510      	push	{r4, lr}
 80a4ee6:	4c05      	ldr	r4, [pc, #20]	; (80a4efc <__cxa_atexit+0x18>)
 80a4ee8:	4613      	mov	r3, r2
 80a4eea:	b12c      	cbz	r4, 80a4ef8 <__cxa_atexit+0x14>
 80a4eec:	460a      	mov	r2, r1
 80a4eee:	4601      	mov	r1, r0
 80a4ef0:	2002      	movs	r0, #2
 80a4ef2:	f3af 8000 	nop.w
 80a4ef6:	bd10      	pop	{r4, pc}
 80a4ef8:	4620      	mov	r0, r4
 80a4efa:	bd10      	pop	{r4, pc}
 80a4efc:	00000000 	.word	0x00000000

080a4f00 <memcpy>:
 80a4f00:	b510      	push	{r4, lr}
 80a4f02:	1e43      	subs	r3, r0, #1
 80a4f04:	440a      	add	r2, r1
 80a4f06:	4291      	cmp	r1, r2
 80a4f08:	d004      	beq.n	80a4f14 <memcpy+0x14>
 80a4f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4f12:	e7f8      	b.n	80a4f06 <memcpy+0x6>
 80a4f14:	bd10      	pop	{r4, pc}

080a4f16 <memset>:
 80a4f16:	4603      	mov	r3, r0
 80a4f18:	4402      	add	r2, r0
 80a4f1a:	4293      	cmp	r3, r2
 80a4f1c:	d002      	beq.n	80a4f24 <memset+0xe>
 80a4f1e:	f803 1b01 	strb.w	r1, [r3], #1
 80a4f22:	e7fa      	b.n	80a4f1a <memset+0x4>
 80a4f24:	4770      	bx	lr
	...

080a4f28 <srand>:
 80a4f28:	b538      	push	{r3, r4, r5, lr}
 80a4f2a:	4b12      	ldr	r3, [pc, #72]	; (80a4f74 <srand+0x4c>)
 80a4f2c:	4605      	mov	r5, r0
 80a4f2e:	681c      	ldr	r4, [r3, #0]
 80a4f30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4f32:	b9d3      	cbnz	r3, 80a4f6a <srand+0x42>
 80a4f34:	2018      	movs	r0, #24
 80a4f36:	f7fc fec1 	bl	80a1cbc <malloc>
 80a4f3a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a4f3e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a4f40:	8003      	strh	r3, [r0, #0]
 80a4f42:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a4f46:	8043      	strh	r3, [r0, #2]
 80a4f48:	f241 2334 	movw	r3, #4660	; 0x1234
 80a4f4c:	8083      	strh	r3, [r0, #4]
 80a4f4e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a4f52:	80c3      	strh	r3, [r0, #6]
 80a4f54:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a4f58:	8103      	strh	r3, [r0, #8]
 80a4f5a:	2305      	movs	r3, #5
 80a4f5c:	8143      	strh	r3, [r0, #10]
 80a4f5e:	230b      	movs	r3, #11
 80a4f60:	8183      	strh	r3, [r0, #12]
 80a4f62:	2201      	movs	r2, #1
 80a4f64:	2300      	movs	r3, #0
 80a4f66:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a4f6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4f6c:	2200      	movs	r2, #0
 80a4f6e:	611d      	str	r5, [r3, #16]
 80a4f70:	615a      	str	r2, [r3, #20]
 80a4f72:	bd38      	pop	{r3, r4, r5, pc}
 80a4f74:	200000a4 	.word	0x200000a4

080a4f78 <strcmp>:
 80a4f78:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a4f7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a4f80:	2a01      	cmp	r2, #1
 80a4f82:	bf28      	it	cs
 80a4f84:	429a      	cmpcs	r2, r3
 80a4f86:	d0f7      	beq.n	80a4f78 <strcmp>
 80a4f88:	1ad0      	subs	r0, r2, r3
 80a4f8a:	4770      	bx	lr

080a4f8c <strcpy>:
 80a4f8c:	4603      	mov	r3, r0
 80a4f8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a4f92:	f803 2b01 	strb.w	r2, [r3], #1
 80a4f96:	2a00      	cmp	r2, #0
 80a4f98:	d1f9      	bne.n	80a4f8e <strcpy+0x2>
 80a4f9a:	4770      	bx	lr

080a4f9c <strdup>:
 80a4f9c:	4b02      	ldr	r3, [pc, #8]	; (80a4fa8 <strdup+0xc>)
 80a4f9e:	4601      	mov	r1, r0
 80a4fa0:	6818      	ldr	r0, [r3, #0]
 80a4fa2:	f000 b803 	b.w	80a4fac <_strdup_r>
 80a4fa6:	bf00      	nop
 80a4fa8:	200000a4 	.word	0x200000a4

080a4fac <_strdup_r>:
 80a4fac:	b570      	push	{r4, r5, r6, lr}
 80a4fae:	4606      	mov	r6, r0
 80a4fb0:	4608      	mov	r0, r1
 80a4fb2:	460c      	mov	r4, r1
 80a4fb4:	f000 f80d 	bl	80a4fd2 <strlen>
 80a4fb8:	1c45      	adds	r5, r0, #1
 80a4fba:	4629      	mov	r1, r5
 80a4fbc:	4630      	mov	r0, r6
 80a4fbe:	f7fc fea5 	bl	80a1d0c <_malloc_r>
 80a4fc2:	4606      	mov	r6, r0
 80a4fc4:	b118      	cbz	r0, 80a4fce <_strdup_r+0x22>
 80a4fc6:	462a      	mov	r2, r5
 80a4fc8:	4621      	mov	r1, r4
 80a4fca:	f7ff ff99 	bl	80a4f00 <memcpy>
 80a4fce:	4630      	mov	r0, r6
 80a4fd0:	bd70      	pop	{r4, r5, r6, pc}

080a4fd2 <strlen>:
 80a4fd2:	4603      	mov	r3, r0
 80a4fd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4fd8:	2a00      	cmp	r2, #0
 80a4fda:	d1fb      	bne.n	80a4fd4 <strlen+0x2>
 80a4fdc:	1a18      	subs	r0, r3, r0
 80a4fde:	3801      	subs	r0, #1
 80a4fe0:	4770      	bx	lr

080a4fe2 <strstr>:
 80a4fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4fe4:	7803      	ldrb	r3, [r0, #0]
 80a4fe6:	b963      	cbnz	r3, 80a5002 <strstr+0x20>
 80a4fe8:	780b      	ldrb	r3, [r1, #0]
 80a4fea:	2b00      	cmp	r3, #0
 80a4fec:	bf18      	it	ne
 80a4fee:	2000      	movne	r0, #0
 80a4ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4ff2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80a4ff6:	b162      	cbz	r2, 80a5012 <strstr+0x30>
 80a4ff8:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80a4ffc:	4630      	mov	r0, r6
 80a4ffe:	4297      	cmp	r7, r2
 80a5000:	d0f7      	beq.n	80a4ff2 <strstr+0x10>
 80a5002:	4603      	mov	r3, r0
 80a5004:	1c46      	adds	r6, r0, #1
 80a5006:	7800      	ldrb	r0, [r0, #0]
 80a5008:	b110      	cbz	r0, 80a5010 <strstr+0x2e>
 80a500a:	1e4d      	subs	r5, r1, #1
 80a500c:	1e5c      	subs	r4, r3, #1
 80a500e:	e7f0      	b.n	80a4ff2 <strstr+0x10>
 80a5010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5012:	4618      	mov	r0, r3
 80a5014:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a5018 <_strtol_r>:
 80a5018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a501c:	460f      	mov	r7, r1
 80a501e:	4680      	mov	r8, r0
 80a5020:	483f      	ldr	r0, [pc, #252]	; (80a5120 <_strtol_r+0x108>)
 80a5022:	f8d0 9000 	ldr.w	r9, [r0]
 80a5026:	463d      	mov	r5, r7
 80a5028:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a502c:	eb09 0004 	add.w	r0, r9, r4
 80a5030:	7840      	ldrb	r0, [r0, #1]
 80a5032:	f000 0008 	and.w	r0, r0, #8
 80a5036:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a503a:	b108      	cbz	r0, 80a5040 <_strtol_r+0x28>
 80a503c:	462f      	mov	r7, r5
 80a503e:	e7f2      	b.n	80a5026 <_strtol_r+0xe>
 80a5040:	2c2d      	cmp	r4, #45	; 0x2d
 80a5042:	d103      	bne.n	80a504c <_strtol_r+0x34>
 80a5044:	1cbd      	adds	r5, r7, #2
 80a5046:	787c      	ldrb	r4, [r7, #1]
 80a5048:	2601      	movs	r6, #1
 80a504a:	e003      	b.n	80a5054 <_strtol_r+0x3c>
 80a504c:	2c2b      	cmp	r4, #43	; 0x2b
 80a504e:	bf04      	itt	eq
 80a5050:	787c      	ldrbeq	r4, [r7, #1]
 80a5052:	1cbd      	addeq	r5, r7, #2
 80a5054:	b113      	cbz	r3, 80a505c <_strtol_r+0x44>
 80a5056:	2b10      	cmp	r3, #16
 80a5058:	d10a      	bne.n	80a5070 <_strtol_r+0x58>
 80a505a:	e05b      	b.n	80a5114 <_strtol_r+0xfc>
 80a505c:	2c30      	cmp	r4, #48	; 0x30
 80a505e:	d157      	bne.n	80a5110 <_strtol_r+0xf8>
 80a5060:	7828      	ldrb	r0, [r5, #0]
 80a5062:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a5066:	2858      	cmp	r0, #88	; 0x58
 80a5068:	d14d      	bne.n	80a5106 <_strtol_r+0xee>
 80a506a:	786c      	ldrb	r4, [r5, #1]
 80a506c:	2310      	movs	r3, #16
 80a506e:	3502      	adds	r5, #2
 80a5070:	2e00      	cmp	r6, #0
 80a5072:	bf14      	ite	ne
 80a5074:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a5078:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a507c:	fbbc faf3 	udiv	sl, ip, r3
 80a5080:	2700      	movs	r7, #0
 80a5082:	4638      	mov	r0, r7
 80a5084:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a5088:	eb09 0e04 	add.w	lr, r9, r4
 80a508c:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a5090:	f01e 0f04 	tst.w	lr, #4
 80a5094:	d001      	beq.n	80a509a <_strtol_r+0x82>
 80a5096:	3c30      	subs	r4, #48	; 0x30
 80a5098:	e00b      	b.n	80a50b2 <_strtol_r+0x9a>
 80a509a:	f01e 0e03 	ands.w	lr, lr, #3
 80a509e:	d01b      	beq.n	80a50d8 <_strtol_r+0xc0>
 80a50a0:	f1be 0f01 	cmp.w	lr, #1
 80a50a4:	bf0c      	ite	eq
 80a50a6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a50aa:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a50ae:	ebce 0404 	rsb	r4, lr, r4
 80a50b2:	42a3      	cmp	r3, r4
 80a50b4:	dd10      	ble.n	80a50d8 <_strtol_r+0xc0>
 80a50b6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a50ba:	d00a      	beq.n	80a50d2 <_strtol_r+0xba>
 80a50bc:	4550      	cmp	r0, sl
 80a50be:	d806      	bhi.n	80a50ce <_strtol_r+0xb6>
 80a50c0:	d101      	bne.n	80a50c6 <_strtol_r+0xae>
 80a50c2:	4564      	cmp	r4, ip
 80a50c4:	dc03      	bgt.n	80a50ce <_strtol_r+0xb6>
 80a50c6:	fb03 4000 	mla	r0, r3, r0, r4
 80a50ca:	2701      	movs	r7, #1
 80a50cc:	e001      	b.n	80a50d2 <_strtol_r+0xba>
 80a50ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a50d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a50d6:	e7d7      	b.n	80a5088 <_strtol_r+0x70>
 80a50d8:	1c7b      	adds	r3, r7, #1
 80a50da:	d10c      	bne.n	80a50f6 <_strtol_r+0xde>
 80a50dc:	2e00      	cmp	r6, #0
 80a50de:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a50e2:	bf14      	ite	ne
 80a50e4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a50e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a50ec:	f8c8 3000 	str.w	r3, [r8]
 80a50f0:	b92a      	cbnz	r2, 80a50fe <_strtol_r+0xe6>
 80a50f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a50f6:	b106      	cbz	r6, 80a50fa <_strtol_r+0xe2>
 80a50f8:	4240      	negs	r0, r0
 80a50fa:	b172      	cbz	r2, 80a511a <_strtol_r+0x102>
 80a50fc:	b107      	cbz	r7, 80a5100 <_strtol_r+0xe8>
 80a50fe:	1e69      	subs	r1, r5, #1
 80a5100:	6011      	str	r1, [r2, #0]
 80a5102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5106:	2430      	movs	r4, #48	; 0x30
 80a5108:	2b00      	cmp	r3, #0
 80a510a:	d1b1      	bne.n	80a5070 <_strtol_r+0x58>
 80a510c:	2308      	movs	r3, #8
 80a510e:	e7af      	b.n	80a5070 <_strtol_r+0x58>
 80a5110:	230a      	movs	r3, #10
 80a5112:	e7ad      	b.n	80a5070 <_strtol_r+0x58>
 80a5114:	2c30      	cmp	r4, #48	; 0x30
 80a5116:	d0a3      	beq.n	80a5060 <_strtol_r+0x48>
 80a5118:	e7aa      	b.n	80a5070 <_strtol_r+0x58>
 80a511a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a511e:	bf00      	nop
 80a5120:	20000040 	.word	0x20000040

080a5124 <strtol>:
 80a5124:	4613      	mov	r3, r2
 80a5126:	460a      	mov	r2, r1
 80a5128:	4601      	mov	r1, r0
 80a512a:	4802      	ldr	r0, [pc, #8]	; (80a5134 <strtol+0x10>)
 80a512c:	6800      	ldr	r0, [r0, #0]
 80a512e:	f7ff bf73 	b.w	80a5018 <_strtol_r>
 80a5132:	bf00      	nop
 80a5134:	200000a4 	.word	0x200000a4

080a5138 <dynalib_user>:
 80a5138:	080a0021 080a0061 080a008d 080a0091     !...a...........
 80a5148:	00000000 65726957 45736920 6c62616e     ....Wire isEnabl
 80a5158:	203f6465 6f685328 20646c75 31206562     ed? (Should be 1
 80a5168:	72656820 203a2965 69684300 69207072      here): .Chirp i
 80a5178:	6e655373 52726f73 72757465 00203a6e     sSensorReturn: .
 80a5188:	72696843 68632070 49707269 65685473     Chirp chirpIsThe
 80a5198:	203a6572 69684300 61207072 65726464     re: .Chirp addre
 80a51a8:	203a7373 30007830 69684300 73207072     ss: 0x.0.Chirp s
 80a51b8:	7774666f 20657261 73726556 206e6f69     oftware Version 
 80a51c8:	20676528 36327830 20736920 362e3276     (eg 0x26 is v2.6
 80a51d8:	30203a29 61420078 72657474 61622079     ): 0x.Battery ba
 80a51e8:	74655264 206e7275 74614200 79726574     dReturn .Battery
 80a51f8:	75616720 73496567 72656854 74002065      gaugeIsThere .t
 80a5208:	676e6968 62752e73 746f6469 6f632e73     hings.ubidots.co
 80a5218:	6177006d 56726574 65756c61 6d657400     m.waterValue.tem
 80a5228:	6c615670 63006575 766c6c65 61746c6f     pValue.cellvolta
 80a5238:	73006567 65746174 6863666f 00677261     ge.stateofcharg.
 80a5248:	61706163 61746963 2065636e 6d657400     capacitance .tem
 80a5258:	61726570 65727574 61620020 72657474     perature .batter
 80a5268:	6f762079 6761746c 73002065 65746174     y voltage .state
 80a5278:	20666f20 72616863 00206567 72656c61      of charge .aler
 80a5288:	59002074 4e005345 6f68004f 74655777     t .YES.NO.howWet
 80a5298:	6f680020 746f4877 6f680020 74655777      .howHot .howWet
 80a52a8:	68002500 6f48776f 69740074 6c45656d     .%.howHot.timeEl
 80a52b8:	65737061 65002064 7370616c 6f546465     apsed .elapsedTo
 80a52c8:	646e6553 69002041 7468206e 73207074     SendA .in http s
 80a52d8:	20646e65 2f002041 2f697061 362e3176     end A ./api/v1.6
 80a52e8:	7261762f 6c626169 352f7365 63303835     /variables/5580c
 80a52f8:	37333135 34353236 64363632 32663866     51376254266df8f2
 80a5308:	2f623233 756c6176 7b007365 6c617622     32b/values.{"val
 80a5318:	3a226575 50007d00 0054534f 6c707041     ue":.}.POST.Appl
 80a5328:	74616369 3e6e6f69 73655209 736e6f70     ication>.Respons
 80a5338:	74732065 73757461 4100203a 696c7070     e status: .Appli
 80a5348:	69746163 093e6e6f 50545448 73655220     cation>.HTTP Res
 80a5358:	736e6f70 6f422065 203a7964 312e2500     ponse Body: .%.1
 80a5368:	21250066 00326500 74726150 656c6369     f.%!.e2.Particle
 80a5378:	6275702e 6873696c 74697720 32652068     .publish with e2
 80a5388:	73656d20 65676173 49414620 0044454c      message FAILED.
 80a5398:	68206e69 20707474 646e6573 00204220     in http send B .
 80a53a8:	6970612f 2e31762f 61762f36 62616972     /api/v1.6/variab
 80a53b8:	2f73656c 30383535 35323563 35323637     les/5580c5257625
 80a53c8:	33363234 66353637 65663536 6c61762f     4263765f65fe/val
 80a53d8:	00736575 68206e69 20707474 646e6573     ues.in http send
 80a53e8:	00204320 6970612f 2e31762f 61762f36      C ./api/v1.6/va
 80a53f8:	62616972 2f73656c 30313735 65343833     riables/5710384e
 80a5408:	35323637 61373234 37336635 39636430     7625427a5f370dc9
 80a5418:	6c61762f 00736575 68206e69 20707474     /values.in http 
 80a5428:	646e6573 00204420 6970612f 2e31762f     send D ./api/v1.
 80a5438:	61762f36 62616972 2f73656c 30313735     6/variables/5710
 80a5448:	39373833 35323637 62373234 39616633     38797625427b3fa9
 80a5458:	39396164 6c61762f 00736575 20656854     da99/values.The 
 80a5468:	6e616c70 6e207374 20646565 65746177     plants need wate
 80a5478:	57202172 72657461 756c6156 73692065     r! WaterValue is
 80a5488:	6f430020 6e65746e 79542d74 61006570      .Content-Type.a
 80a5498:	696c7070 69746163 6a2f6e6f 006e6f73     pplication/json.
 80a54a8:	75412d58 542d6874 6e656b6f 57343300     X-Auth-Token.34W
 80a54b8:	31596a47 33303751 34574664 61514e65     GjY1Q703dFW4eNQa
 80a54c8:	72446f4a 584b4d42 39464b48 64577a45     JoDrBMKXHKF9EzWd
 80a54d8:	54695837 55765262 53636a30 78513935     7XiTbRvU0jcS59Qx
 80a54e8:	45726e48 724d7365 48200058 2f505454     HnrEesMrX. HTTP/
 80a54f8:	0d302e31 6c63000a 0065736f 6e6e6f43     1.0...close.Conn
 80a5508:	69746365 48006e6f 0054534f 746e6f43     ection.HOST.Cont
 80a5518:	2d746e65 676e654c 0d006874 000a0d0a     ent-Length......

080a5528 <_ZTV8DogLcdhw>:
	...
 80a5530:	080a00b7 080a00e3 080a00f1 080a25c1     .............%..

080a5540 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a5548:	080a1d4b 080a1d51 080a1da7 080a1d5f     K...Q......._...
 80a5558:	080a1d4d                                M...

080a555c <_ZTV7TwoWire>:
	...
 80a5564:	080a233d 080a2387 080a235f 080a233f     =#...#.._#..?#..
 80a5574:	080a2367 080a236f 080a2377 080a237f     g#..o#..w#...#..

080a5584 <_ZTV9IPAddress>:
	...
 80a558c:	080a2415 080a2405 080a2407 64756162     .$...$...$..baud
 80a559c:	72655300 006c6169 53425355 61697265     .Serial.USBSeria
 80a55ac:	7400316c 00657079 61726170 6d63006d     l1.type.param.cm
 80a55bc:	64690064 646e6800 72747300 6966006d     d.id.hnd.strm.fi
 80a55cc:	6c00746c 61006c76 61486464 656c646e     lt.lvl.addHandle
 80a55dc:	65720072 65766f6d 646e6148 0072656c     r.removeHandler.
 80a55ec:	6d756e65 646e6148 7372656c 4f534a00     enumHandlers.JSO
 80a55fc:	7274534e 4c6d6165 6148676f 656c646e     NStreamLogHandle
 80a560c:	70610072 30250070 20753031 00205d00     r.app.%010u .] .
 80a561c:	2c006425 29280020 2000203a 6f63005b     %d., .(): . [.co
 80a562c:	3d206564 69250020 74656400 736c6961     de = .%i.details
 80a563c:	00203d20 66006e6c 6f63006e 64006564      = .ln.fn.code.d
 80a564c:	69617465 6f6e006c 7400656e 65636172     etail.none.trace
 80a565c:	666e6900 6177006f 65006e72 726f7272     .info.warn.error
 80a566c:	6e617000 61006369 00006c6c              .panic.all..

080a5678 <_ZTVN5spark12NetworkClassE>:
	...
 80a5680:	080a24dd 080a24e7 080a24f1 080a24fb     .$...$...$...$..
 80a5690:	080a2505 080a2511 080a251d 080a2529     .%...%...%..)%..
 80a56a0:	080a2531 080a253b 080a2545 006e616e     1%..;%..E%..nan.
 80a56b0:	0066766f 6e69002e 00000066              ovf...inf...

080a56bc <_ZTV8SPIClass>:
	...
 80a56c4:	080a28e1 080a28e3                       .(...(..

080a56cc <_ZL14clock_divisors>:
 80a56cc:	18100800 38302820                       .... (08

080a56d4 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a56dc:	080a2de9 080a2def 080a3207 080a2dfd     .-...-...2...-..
 80a56ec:	080a2deb                                .-..

080a56f0 <_ZTV9TCPClient>:
	...
 80a56f8:	080a011d 080a0149 080a2da5 080a2dbf     ....I....-...-..
 80a5708:	080a2f05 080a2e6f 080a2e41 080a2de7     ./..o...A....-..
 80a5718:	080a2fb1 080a3221 080a2ea3 080a2f7d     ./..!2......}/..
 80a5728:	080a30ff 080a3151 080a2dcf 080a30c3     .0..Q1...-...0..
 80a5738:	080a2e21 69726977 5400676e 6c435043     !...wiring.TCPCl
 80a5748:	746e6569 636f7320 3d74656b 5a007825     ient socket=%x.Z
 80a5758:	302b2500 253a6433 00753230 252d5925     .%+03d:%02u.%Y-%
 80a5768:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 80a5778:	74637361 00656d69                       asctime.

080a5780 <_ZTV11USARTSerial>:
	...
 80a5788:	080a32a1 080a32f1 080a32ff 080a25c1     .2...2...2...%..
 80a5798:	080a32b5 080a32d7 080a32c3 080a32eb     .2...2...2...2..
 80a57a8:	080a32a3 080a32a7                       .2...2..

080a57b0 <_ZTV9USBSerial>:
	...
 80a57b8:	080a33a9 080a33f9 080a3407 080a25c1     .3...3...4...%..
 80a57c8:	080a33e5 080a33ab 080a33c1 080a33f3     .3...3...3...3..
 80a57d8:	080a33d7 080a33a5                       .3...3..

080a57e0 <_ZTVN5spark9WiFiClassE>:
	...
 80a57e8:	080a35eb 080a35e1 080a35d7 080a3549     .5...5...5..I5..
 80a57f8:	080a35cb 080a35bf 080a35b3 080a35ab     .5...5...5...5..
 80a5808:	080a35a1 080a3597 080a3553              .5...5..S5..

080a5814 <_ctype_>:
 80a5814:	20202000 20202020 28282020 20282828     .         ((((( 
 80a5824:	20202020 20202020 20202020 20202020                     
 80a5834:	10108820 10101010 10101010 10101010      ...............
 80a5844:	04040410 04040404 10040404 10101010     ................
 80a5854:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a5864:	01010101 01010101 01010101 10101010     ................
 80a5874:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a5884:	02020202 02020202 02020202 10101010     ................
 80a5894:	00000020 00000000 00000000 00000000      ...............
	...

080a5918 <__sf_fake_stdin>:
	...

080a5938 <__sf_fake_stdout>:
	...

080a5958 <__sf_fake_stderr>:
	...
 80a5978:	00000043                                         C.

080a597a <link_const_variable_data_end>:
	...

080a597c <link_constructors_location>:
 80a597c:	080a0ca9 	.word	0x080a0ca9
 80a5980:	080a0e31 	.word	0x080a0e31
 80a5984:	080a11d9 	.word	0x080a11d9
 80a5988:	080a12b3 	.word	0x080a12b3
 80a598c:	080a142b 	.word	0x080a142b
 80a5990:	080a17fd 	.word	0x080a17fd
 80a5994:	080a24cd 	.word	0x080a24cd
 80a5998:	080a25ad 	.word	0x080a25ad
 80a599c:	080a28c5 	.word	0x080a28c5
 80a59a0:	080a2d8d 	.word	0x080a2d8d
 80a59a4:	080a328d 	.word	0x080a328d
 80a59a8:	080a35f5 	.word	0x080a35f5
 80a59ac:	080a3891 	.word	0x080a3891
 80a59b0:	080a38c1 	.word	0x080a38c1
 80a59b4:	080a3919 	.word	0x080a3919
 80a59b8:	080a39dd 	.word	0x080a39dd
 80a59bc:	080a3a61 	.word	0x080a3a61
 80a59c0:	080a3ae5 	.word	0x080a3ae5

080a59c4 <link_constructors_end>:
	...
